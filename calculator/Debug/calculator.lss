
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000163c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000258  00800060  0000163c  000016d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008002b8  008002b8  00001928  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000303d  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cc  00000000  00000000  00004ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014df  00000000  00000000  00005285  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  00006764  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006dbd  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002621  00000000  00000000  0000d91d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000ff3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001af3  00000000  00000000  00010016  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 be 08 	call	0x117c	; 0x117c <main>
      8a:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getBit>:
	PORTC &= ~_BV(LCD_CS);
	LCD_DataHigh = hh;
	LCD_DataLow = ll;
	PORTC |= _BV(LCD_WR);
	PORTC &= ~_BV(LCD_WR);
	PORTC |= _BV(LCD_CS);
      92:	9c 01       	movw	r18, r24
      94:	02 c0       	rjmp	.+4      	; 0x9a <getBit+0x8>
      96:	35 95       	asr	r19
      98:	27 95       	ror	r18
      9a:	6a 95       	dec	r22
      9c:	e2 f7       	brpl	.-8      	; 0x96 <getBit+0x4>
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	20 ff       	sbrs	r18, 0
      a2:	80 e0       	ldi	r24, 0x00	; 0
      a4:	08 95       	ret

000000a6 <touch_write>:
      a6:	1f 93       	push	r17
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	18 2f       	mov	r17, r24
      ae:	82 b3       	in	r24, 0x12	; 18
      b0:	8d 7f       	andi	r24, 0xFD	; 253
      b2:	82 bb       	out	0x12, r24	; 18
      b4:	c7 e0       	ldi	r28, 0x07	; 7
      b6:	d0 e0       	ldi	r29, 0x00	; 0
      b8:	15 c0       	rjmp	.+42     	; 0xe4 <touch_write+0x3e>
      ba:	be 01       	movw	r22, r28
      bc:	81 2f       	mov	r24, r17
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	0e 94 49 00 	call	0x92	; 0x92 <getBit>
      c4:	88 23       	and	r24, r24
      c6:	21 f0       	breq	.+8      	; 0xd0 <touch_write+0x2a>
      c8:	82 b3       	in	r24, 0x12	; 18
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	82 bb       	out	0x12, r24	; 18
      ce:	03 c0       	rjmp	.+6      	; 0xd6 <touch_write+0x30>
      d0:	82 b3       	in	r24, 0x12	; 18
      d2:	8f 7b       	andi	r24, 0xBF	; 191
      d4:	82 bb       	out	0x12, r24	; 18
      d6:	82 b3       	in	r24, 0x12	; 18
      d8:	8d 7f       	andi	r24, 0xFD	; 253
      da:	82 bb       	out	0x12, r24	; 18
      dc:	82 b3       	in	r24, 0x12	; 18
      de:	82 60       	ori	r24, 0x02	; 2
      e0:	82 bb       	out	0x12, r24	; 18
      e2:	21 97       	sbiw	r28, 0x01	; 1
      e4:	dd 23       	and	r29, r29
      e6:	4c f7       	brge	.-46     	; 0xba <touch_write+0x14>
      e8:	df 91       	pop	r29
      ea:	cf 91       	pop	r28
      ec:	1f 91       	pop	r17
      ee:	08 95       	ret

000000f0 <touch_read_char>:
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	14 c0       	rjmp	.+40     	; 0x126 <touch_read_char+0x36>
      fe:	ec 01       	movw	r28, r24
     100:	cc 0f       	add	r28, r28
     102:	dd 1f       	adc	r29, r29
     104:	82 b3       	in	r24, 0x12	; 18
     106:	82 60       	ori	r24, 0x02	; 2
     108:	82 bb       	out	0x12, r24	; 18
     10a:	82 b3       	in	r24, 0x12	; 18
     10c:	8d 7f       	andi	r24, 0xFD	; 253
     10e:	82 bb       	out	0x12, r24	; 18
     110:	80 b3       	in	r24, 0x10	; 16
     112:	63 e0       	ldi	r22, 0x03	; 3
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 49 00 	call	0x92	; 0x92 <getBit>
     11c:	9e 01       	movw	r18, r28
     11e:	28 0f       	add	r18, r24
     120:	31 1d       	adc	r19, r1
     122:	c9 01       	movw	r24, r18
     124:	1f 5f       	subi	r17, 0xFF	; 255
     126:	1c 30       	cpi	r17, 0x0C	; 12
     128:	50 f3       	brcs	.-44     	; 0xfe <touch_read_char+0xe>
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	1f 91       	pop	r17
     130:	08 95       	ret

00000132 <touch_read_xy>:
     132:	83 e3       	ldi	r24, 0x33	; 51
     134:	97 e0       	ldi	r25, 0x07	; 7
     136:	01 97       	sbiw	r24, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <touch_read_xy+0x4>
     13a:	82 b3       	in	r24, 0x12	; 18
     13c:	8b 7f       	andi	r24, 0xFB	; 251
     13e:	82 bb       	out	0x12, r24	; 18
     140:	80 e9       	ldi	r24, 0x90	; 144
     142:	0e 94 53 00 	call	0xa6	; 0xa6 <touch_write>
     146:	83 e3       	ldi	r24, 0x33	; 51
     148:	97 e0       	ldi	r25, 0x07	; 7
     14a:	01 97       	sbiw	r24, 0x01	; 1
     14c:	f1 f7       	brne	.-4      	; 0x14a <touch_read_xy+0x18>
     14e:	82 b3       	in	r24, 0x12	; 18
     150:	82 60       	ori	r24, 0x02	; 2
     152:	82 bb       	out	0x12, r24	; 18
	...
     15c:	82 b3       	in	r24, 0x12	; 18
     15e:	8d 7f       	andi	r24, 0xFD	; 253
     160:	82 bb       	out	0x12, r24	; 18
	...
     16a:	0e 94 78 00 	call	0xf0	; 0xf0 <touch_read_char>
     16e:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <T_Y+0x1>
     172:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <T_Y>
     176:	80 ed       	ldi	r24, 0xD0	; 208
     178:	0e 94 53 00 	call	0xa6	; 0xa6 <touch_write>
     17c:	82 b3       	in	r24, 0x12	; 18
     17e:	82 60       	ori	r24, 0x02	; 2
     180:	82 bb       	out	0x12, r24	; 18
	...
     18a:	82 b3       	in	r24, 0x12	; 18
     18c:	8d 7f       	andi	r24, 0xFD	; 253
     18e:	82 bb       	out	0x12, r24	; 18
	...
     198:	0e 94 78 00 	call	0xf0	; 0xf0 <touch_read_char>
     19c:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <T_X+0x1>
     1a0:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <T_X>
     1a4:	82 b3       	in	r24, 0x12	; 18
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	82 bb       	out	0x12, r24	; 18
     1aa:	08 95       	ret

000001ac <LCD_write_cmd>:
     1ac:	25 b3       	in	r18, 0x15	; 21
     1ae:	2e 7f       	andi	r18, 0xFE	; 254
     1b0:	25 bb       	out	0x15, r18	; 21
     1b2:	25 b3       	in	r18, 0x15	; 21
     1b4:	2f 77       	andi	r18, 0x7F	; 127
     1b6:	25 bb       	out	0x15, r18	; 21
     1b8:	98 bb       	out	0x18, r25	; 24
     1ba:	8b bb       	out	0x1b, r24	; 27
     1bc:	85 b3       	in	r24, 0x15	; 21
     1be:	82 60       	ori	r24, 0x02	; 2
     1c0:	85 bb       	out	0x15, r24	; 21
     1c2:	85 b3       	in	r24, 0x15	; 21
     1c4:	8d 7f       	andi	r24, 0xFD	; 253
     1c6:	85 bb       	out	0x15, r24	; 21
     1c8:	85 b3       	in	r24, 0x15	; 21
     1ca:	80 68       	ori	r24, 0x80	; 128
     1cc:	85 bb       	out	0x15, r24	; 21
     1ce:	08 95       	ret

000001d0 <LCD_write_data>:
}

void LCD_write_data(int DH)	
{
	PORTC |= _BV(LCD_RS);
     1d0:	25 b3       	in	r18, 0x15	; 21
     1d2:	21 60       	ori	r18, 0x01	; 1
     1d4:	25 bb       	out	0x15, r18	; 21
	PORTC &= ~_BV(LCD_CS);
     1d6:	25 b3       	in	r18, 0x15	; 21
     1d8:	2f 77       	andi	r18, 0x7F	; 127
     1da:	25 bb       	out	0x15, r18	; 21
	LCD_DataHigh = DH >> 8;
     1dc:	98 bb       	out	0x18, r25	; 24
	LCD_DataLow = DH;
     1de:	8b bb       	out	0x1b, r24	; 27
	PORTC |= _BV(LCD_WR);
     1e0:	85 b3       	in	r24, 0x15	; 21
     1e2:	82 60       	ori	r24, 0x02	; 2
     1e4:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~_BV(LCD_WR);
     1e6:	85 b3       	in	r24, 0x15	; 21
     1e8:	8d 7f       	andi	r24, 0xFD	; 253
     1ea:	85 bb       	out	0x15, r24	; 21
	PORTC |= _BV(LCD_CS);
     1ec:	85 b3       	in	r24, 0x15	; 21
     1ee:	80 68       	ori	r24, 0x80	; 128
     1f0:	85 bb       	out	0x15, r24	; 21
     1f2:	08 95       	ret

000001f4 <LCD_write_cmd_data>:
}


void LCD_write_cmd_data(int com1, int dat1)				//write cmd and save to memory
{
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	eb 01       	movw	r28, r22
	LCD_write_cmd(com1);
     1fa:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_write_cmd>
	LCD_write_data(dat1);
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_write_data>
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <address_set>:

void address_set(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)	//set up memory to draw on
{
     20a:	ef 92       	push	r14
     20c:	ff 92       	push	r15
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	8c 01       	movw	r16, r24
     218:	eb 01       	movw	r28, r22
     21a:	79 01       	movw	r14, r18
	LCD_write_cmd_data(0x0044, (x2 << 8) + x1);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	74 2f       	mov	r23, r20
     222:	68 0f       	add	r22, r24
     224:	79 1f       	adc	r23, r25
     226:	84 e4       	ldi	r24, 0x44	; 68
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd_data(0x0045, y1);
     22e:	be 01       	movw	r22, r28
     230:	85 e4       	ldi	r24, 0x45	; 69
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd_data(0x0046, y2);
     238:	b7 01       	movw	r22, r14
     23a:	86 e4       	ldi	r24, 0x46	; 70
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd_data(0x004e, x1);
     242:	b8 01       	movw	r22, r16
     244:	8e e4       	ldi	r24, 0x4E	; 78
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd_data(0x004f, y1);
     24c:	be 01       	movw	r22, r28
     24e:	8f e4       	ldi	r24, 0x4F	; 79
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd(0x0022);
     256:	82 e2       	ldi	r24, 0x22	; 34
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_write_cmd>
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	08 95       	ret

0000026c <LCD_screen_color>:

void LCD_screen_color(unsigned int color)
{
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	int i,j;
	address_set(0, 0, 239, 319);
     27a:	2f e3       	ldi	r18, 0x3F	; 63
     27c:	31 e0       	ldi	r19, 0x01	; 1
     27e:	4f ee       	ldi	r20, 0xEF	; 239
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 05 01 	call	0x20a	; 0x20a <address_set>

	for(i = 0; i < 320; i++)
     28e:	e1 2c       	mov	r14, r1
     290:	f1 2c       	mov	r15, r1
     292:	0d c0       	rjmp	.+26     	; 0x2ae <LCD_screen_color+0x42>
	{
		for (j = 0; j < 240; j++)
		{
			LCD_write_data(color);
     294:	c8 01       	movw	r24, r16
     296:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_write_data>
	int i,j;
	address_set(0, 0, 239, 319);

	for(i = 0; i < 320; i++)
	{
		for (j = 0; j < 240; j++)
     29a:	21 96       	adiw	r28, 0x01	; 1
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <LCD_screen_color+0x36>
     29e:	c0 e0       	ldi	r28, 0x00	; 0
     2a0:	d0 e0       	ldi	r29, 0x00	; 0
     2a2:	c0 3f       	cpi	r28, 0xF0	; 240
     2a4:	d1 05       	cpc	r29, r1
     2a6:	b4 f3       	brlt	.-20     	; 0x294 <LCD_screen_color+0x28>
void LCD_screen_color(unsigned int color)
{
	int i,j;
	address_set(0, 0, 239, 319);

	for(i = 0; i < 320; i++)
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	e8 1a       	sub	r14, r24
     2ac:	f8 0a       	sbc	r15, r24
     2ae:	80 e4       	ldi	r24, 0x40	; 64
     2b0:	e8 16       	cp	r14, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	f8 06       	cpc	r15, r24
     2b6:	9c f3       	brlt	.-26     	; 0x29e <LCD_screen_color+0x32>
		for (j = 0; j < 240; j++)
		{
			LCD_write_data(color);
		}
	}
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	08 95       	ret

000002c6 <TFT_set_cursor>:
	
	draw_calc();
}

void TFT_set_cursor(signed int x_pos, signed int y_pos)
{
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
	y_pos = (MAX_Y - 1 - y_pos);
     2ca:	cf e3       	ldi	r28, 0x3F	; 63
     2cc:	d1 e0       	ldi	r29, 0x01	; 1
     2ce:	c6 1b       	sub	r28, r22
     2d0:	d7 0b       	sbc	r29, r23
	
	LCD_write_cmd_data(0x004E, x_pos);
     2d2:	bc 01       	movw	r22, r24
     2d4:	8e e4       	ldi	r24, 0x4E	; 78
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd_data(0x004F, y_pos);
     2dc:	be 01       	movw	r22, r28
     2de:	8f e4       	ldi	r24, 0x4F	; 79
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd(0x0022);
     2e6:	82 e2       	ldi	r24, 0x22	; 34
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_write_cmd>
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <draw_pixel>:

void draw_pixel(signed int x_pos, signed int y_pos, unsigned int colour)
{
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
	if((x_pos >= MAX_X) || (y_pos >= MAX_Y) || (x_pos < 0) || (y_pos < 0)) return;
     2f8:	80 3f       	cpi	r24, 0xF0	; 240
     2fa:	91 05       	cpc	r25, r1
     2fc:	a4 f4       	brge	.+40     	; 0x326 <draw_pixel+0x32>
     2fe:	60 34       	cpi	r22, 0x40	; 64
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	72 07       	cpc	r23, r18
     304:	84 f4       	brge	.+32     	; 0x326 <draw_pixel+0x32>
     306:	99 23       	and	r25, r25
     308:	74 f0       	brlt	.+28     	; 0x326 <draw_pixel+0x32>
     30a:	77 23       	and	r23, r23
     30c:	64 f0       	brlt	.+24     	; 0x326 <draw_pixel+0x32>
     30e:	ea 01       	movw	r28, r20
	
	PORTC &= ~_BV(LCD_CS);
     310:	25 b3       	in	r18, 0x15	; 21
     312:	2f 77       	andi	r18, 0x7F	; 127
     314:	25 bb       	out	0x15, r18	; 21
	TFT_set_cursor(x_pos, y_pos);
     316:	0e 94 63 01 	call	0x2c6	; 0x2c6 <TFT_set_cursor>
	LCD_write_data(colour);
     31a:	ce 01       	movw	r24, r28
     31c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_write_data>
	PORTC |= _BV(LCD_CS);
     320:	85 b3       	in	r24, 0x15	; 21
     322:	80 68       	ori	r24, 0x80	; 128
     324:	85 bb       	out	0x15, r24	; 21
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <draw_line>:

void draw_line(signed int x1, signed int y1, signed int x2, signed int y2, unsigned int colour)
{
     32c:	2f 92       	push	r2
     32e:	3f 92       	push	r3
     330:	4f 92       	push	r4
     332:	5f 92       	push	r5
     334:	6f 92       	push	r6
     336:	7f 92       	push	r7
     338:	8f 92       	push	r8
     33a:	9f 92       	push	r9
     33c:	af 92       	push	r10
     33e:	bf 92       	push	r11
     340:	cf 92       	push	r12
     342:	df 92       	push	r13
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
     352:	7b 01       	movw	r14, r22
     354:	3a 01       	movw	r6, r20
     356:	29 01       	movw	r4, r18
     358:	18 01       	movw	r2, r16
	signed int dy = 0x0000;
	signed int stepx = 0x0000;
	signed int stepy = 0x0000;
	signed int fraction = 0x0000;

	dy = (y2 - y1);
     35a:	89 01       	movw	r16, r18
     35c:	06 1b       	sub	r16, r22
     35e:	17 0b       	sbc	r17, r23
	dx = (x2 - x1);
     360:	4a 01       	movw	r8, r20
     362:	88 1a       	sub	r8, r24
     364:	99 0a       	sbc	r9, r25

	if(dy < 0)
     366:	11 23       	and	r17, r17
     368:	3c f4       	brge	.+14     	; 0x378 <draw_line+0x4c>
	{
		dy = -dy;
     36a:	11 95       	neg	r17
     36c:	01 95       	neg	r16
     36e:	11 09       	sbc	r17, r1
		stepy = -1;
     370:	aa 24       	eor	r10, r10
     372:	aa 94       	dec	r10
     374:	ba 2c       	mov	r11, r10
     376:	03 c0       	rjmp	.+6      	; 0x37e <draw_line+0x52>
	}
	else
	{
		stepy = 1;
     378:	aa 24       	eor	r10, r10
     37a:	a3 94       	inc	r10
     37c:	b1 2c       	mov	r11, r1
	}

	if(dx < 0)
     37e:	99 20       	and	r9, r9
     380:	3c f4       	brge	.+14     	; 0x390 <draw_line+0x64>
	{
		dx = -dx;
     382:	91 94       	neg	r9
     384:	81 94       	neg	r8
     386:	91 08       	sbc	r9, r1
		stepx = -1;
     388:	cc 24       	eor	r12, r12
     38a:	ca 94       	dec	r12
     38c:	dc 2c       	mov	r13, r12
     38e:	03 c0       	rjmp	.+6      	; 0x396 <draw_line+0x6a>
	}
	else
	{
		stepx = 1;
     390:	cc 24       	eor	r12, r12
     392:	c3 94       	inc	r12
     394:	d1 2c       	mov	r13, r1
	}

	dx <<= 0x01;
     396:	88 0c       	add	r8, r8
     398:	99 1c       	adc	r9, r9
	dy <<= 0x01;
     39a:	00 0f       	add	r16, r16
     39c:	11 1f       	adc	r17, r17

	draw_pixel(x1, y1, colour);
     39e:	a1 01       	movw	r20, r2
     3a0:	b7 01       	movw	r22, r14
     3a2:	ce 01       	movw	r24, r28
     3a4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <draw_pixel>

	if(dx > dy)
     3a8:	08 15       	cp	r16, r8
     3aa:	19 05       	cpc	r17, r9
     3ac:	d4 f4       	brge	.+52     	; 0x3e2 <draw_line+0xb6>
	{
		fraction = (dy - (dx >> 1));
     3ae:	c4 01       	movw	r24, r8
     3b0:	95 95       	asr	r25
     3b2:	87 95       	ror	r24
     3b4:	28 01       	movw	r4, r16
     3b6:	48 1a       	sub	r4, r24
     3b8:	59 0a       	sbc	r5, r25
		while(x1 != x2)
     3ba:	0f c0       	rjmp	.+30     	; 0x3da <draw_line+0xae>
		{
			if(fraction >= 0)
     3bc:	55 20       	and	r5, r5
     3be:	24 f0       	brlt	.+8      	; 0x3c8 <draw_line+0x9c>
			{
				y1 += stepy;
     3c0:	ea 0c       	add	r14, r10
     3c2:	fb 1c       	adc	r15, r11
				fraction -= dx;
     3c4:	48 18       	sub	r4, r8
     3c6:	59 08       	sbc	r5, r9
			}
			
			x1 += stepx;
     3c8:	cc 0d       	add	r28, r12
     3ca:	dd 1d       	adc	r29, r13
			fraction += dy;
     3cc:	40 0e       	add	r4, r16
     3ce:	51 1e       	adc	r5, r17

			draw_pixel(x1, y1, colour);
     3d0:	a1 01       	movw	r20, r2
     3d2:	b7 01       	movw	r22, r14
     3d4:	ce 01       	movw	r24, r28
     3d6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <draw_pixel>
	draw_pixel(x1, y1, colour);

	if(dx > dy)
	{
		fraction = (dy - (dx >> 1));
		while(x1 != x2)
     3da:	c6 15       	cp	r28, r6
     3dc:	d7 05       	cpc	r29, r7
     3de:	71 f7       	brne	.-36     	; 0x3bc <draw_line+0x90>
     3e0:	19 c0       	rjmp	.+50     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			draw_pixel(x1, y1, colour);
		}
	}
	else
	{
		fraction = (dx - (dy >> 1));
     3e2:	c8 01       	movw	r24, r16
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	34 01       	movw	r6, r8
     3ea:	68 1a       	sub	r6, r24
     3ec:	79 0a       	sbc	r7, r25

		while(y1 != y2)
     3ee:	0f c0       	rjmp	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			if (fraction >= 0)
     3f0:	77 20       	and	r7, r7
     3f2:	24 f0       	brlt	.+8      	; 0x3fc <draw_line+0xd0>
			{
				x1 += stepx;
     3f4:	cc 0d       	add	r28, r12
     3f6:	dd 1d       	adc	r29, r13
				fraction -= dy;
     3f8:	60 1a       	sub	r6, r16
     3fa:	71 0a       	sbc	r7, r17
			}
			y1 += stepy;
     3fc:	ea 0c       	add	r14, r10
     3fe:	fb 1c       	adc	r15, r11
			fraction += dx;
     400:	68 0c       	add	r6, r8
     402:	79 1c       	adc	r7, r9
			draw_pixel(x1, y1, colour);
     404:	a1 01       	movw	r20, r2
     406:	b7 01       	movw	r22, r14
     408:	ce 01       	movw	r24, r28
     40a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <draw_pixel>
	}
	else
	{
		fraction = (dx - (dy >> 1));

		while(y1 != y2)
     40e:	e4 14       	cp	r14, r4
     410:	f5 04       	cpc	r15, r5
     412:	71 f7       	brne	.-36     	; 0x3f0 <draw_line+0xc4>
			y1 += stepy;
			fraction += dx;
			draw_pixel(x1, y1, colour);
		}
	}
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	bf 90       	pop	r11
     426:	af 90       	pop	r10
     428:	9f 90       	pop	r9
     42a:	8f 90       	pop	r8
     42c:	7f 90       	pop	r7
     42e:	6f 90       	pop	r6
     430:	5f 90       	pop	r5
     432:	4f 90       	pop	r4
     434:	3f 90       	pop	r3
     436:	2f 90       	pop	r2
     438:	08 95       	ret

0000043a <draw_font_pixel>:


void draw_font_pixel(unsigned int x_pos, unsigned int y_pos, unsigned int colour, unsigned char pixel_size)
{
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	7a 01       	movw	r14, r20
     446:	12 2f       	mov	r17, r18
	int i = 0x0000;

	PORTC &= ~_BV(LCD_CS);
     448:	25 b3       	in	r18, 0x15	; 21
     44a:	2f 77       	andi	r18, 0x7F	; 127
     44c:	25 bb       	out	0x15, r18	; 21
	
	TFT_set_cursor(x_pos, y_pos);
     44e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <TFT_set_cursor>
	
	for(i = 0x0000; i < (pixel_size * pixel_size); i++)
     452:	c0 e0       	ldi	r28, 0x00	; 0
     454:	d0 e0       	ldi	r29, 0x00	; 0
     456:	04 c0       	rjmp	.+8      	; 0x460 <draw_font_pixel+0x26>
	{
		LCD_write_data(colour);
     458:	c7 01       	movw	r24, r14
     45a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_write_data>

	PORTC &= ~_BV(LCD_CS);
	
	TFT_set_cursor(x_pos, y_pos);
	
	for(i = 0x0000; i < (pixel_size * pixel_size); i++)
     45e:	21 96       	adiw	r28, 0x01	; 1
     460:	11 9f       	mul	r17, r17
     462:	c0 01       	movw	r24, r0
     464:	11 24       	eor	r1, r1
     466:	c8 17       	cp	r28, r24
     468:	d9 07       	cpc	r29, r25
     46a:	b4 f3       	brlt	.-20     	; 0x458 <draw_font_pixel+0x1e>
	{
		LCD_write_data(colour);
	}
	
	PORTC |= _BV(LCD_CS);
     46c:	85 b3       	in	r24, 0x15	; 21
     46e:	80 68       	ori	r24, 0x80	; 128
     470:	85 bb       	out	0x15, r24	; 21
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	08 95       	ret

0000047e <print_char>:

void print_char(unsigned int x_pos, unsigned int y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char ch)
{
     47e:	4f 92       	push	r4
     480:	5f 92       	push	r5
     482:	6f 92       	push	r6
     484:	8f 92       	push	r8
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	6c 01       	movw	r12, r24
     49e:	eb 01       	movw	r28, r22
     4a0:	f4 2e       	mov	r15, r20
     4a2:	59 01       	movw	r10, r18
     4a4:	28 01       	movw	r4, r16
	signed char i = 0x00;
	unsigned char j = 0x00;

	unsigned int value = 0x0000;

	if(font_size <= 0)
     4a6:	41 11       	cpse	r20, r1
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <print_char+0x30>
	{
		font_size = 1;
     4aa:	ff 24       	eor	r15, r15
     4ac:	f3 94       	inc	r15
	}

	if(x_pos < font_size)
     4ae:	8f 2c       	mov	r8, r15
     4b0:	91 2c       	mov	r9, r1
     4b2:	c8 14       	cp	r12, r8
     4b4:	d9 04       	cpc	r13, r9
     4b6:	08 f4       	brcc	.+2      	; 0x4ba <print_char+0x3c>
	{
		x_pos = font_size;
     4b8:	64 01       	movw	r12, r8
     4ba:	68 94       	set
     4bc:	66 24       	eor	r6, r6
     4be:	62 f8       	bld	r6, 2
     4c0:	3c c0       	rjmp	.+120    	; 0x53a <print_char+0xbc>
	for(i = 0x04; i >= 0x00; i--)
	{
		for(j = 0x00; j < 0x08; j++)
		{
			value = 0x0000;
			value = ( (font[ ( (unsigned char)ch ) - 0x20 ][i]) );
     4c2:	8e 2d       	mov	r24, r14
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	80 97       	sbiw	r24, 0x20	; 32
     4c8:	fc 01       	movw	r30, r24
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e8 0f       	add	r30, r24
     4d4:	f9 1f       	adc	r31, r25
     4d6:	ee 57       	subi	r30, 0x7E	; 126
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	e6 0d       	add	r30, r6
     4dc:	f1 1d       	adc	r31, r1
     4de:	67 fc       	sbrc	r6, 7
     4e0:	fa 95       	dec	r31
     4e2:	80 81       	ld	r24, Z
     4e4:	90 e0       	ldi	r25, 0x00	; 0

			if(((value >> j) & 0x01) != 0x00)
     4e6:	01 2e       	mov	r0, r17
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <print_char+0x70>
     4ea:	96 95       	lsr	r25
     4ec:	87 95       	ror	r24
     4ee:	0a 94       	dec	r0
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <print_char+0x6c>
     4f2:	80 ff       	sbrs	r24, 0
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <print_char+0x86>
			{
				draw_font_pixel(x_pos, y_pos, colour, font_size);
     4f6:	2f 2d       	mov	r18, r15
     4f8:	a5 01       	movw	r20, r10
     4fa:	be 01       	movw	r22, r28
     4fc:	c6 01       	movw	r24, r12
     4fe:	0e 94 1d 02 	call	0x43a	; 0x43a <draw_font_pixel>
     502:	06 c0       	rjmp	.+12     	; 0x510 <print_char+0x92>
			}
			else
			{
				draw_font_pixel(x_pos, y_pos, back_colour, font_size);
     504:	2f 2d       	mov	r18, r15
     506:	a2 01       	movw	r20, r4
     508:	be 01       	movw	r22, r28
     50a:	c6 01       	movw	r24, r12
     50c:	0e 94 1d 02 	call	0x43a	; 0x43a <draw_font_pixel>
			}

			y_pos += font_size;
     510:	c8 0d       	add	r28, r8
     512:	d9 1d       	adc	r29, r9
		x_pos = font_size;
	}

	for(i = 0x04; i >= 0x00; i--)
	{
		for(j = 0x00; j < 0x08; j++)
     514:	1f 5f       	subi	r17, 0xFF	; 255
     516:	01 c0       	rjmp	.+2      	; 0x51a <print_char+0x9c>
     518:	10 e0       	ldi	r17, 0x00	; 0
     51a:	18 30       	cpi	r17, 0x08	; 8
     51c:	90 f2       	brcs	.-92     	; 0x4c2 <print_char+0x44>
				draw_font_pixel(x_pos, y_pos, back_colour, font_size);
			}

			y_pos += font_size;
		}
		y_pos -= (font_size << 0x03);
     51e:	8f 2d       	mov	r24, r15
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	c8 1b       	sub	r28, r24
     530:	d9 0b       	sbc	r29, r25
		x_pos++;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	c8 1a       	sub	r12, r24
     536:	d8 0a       	sbc	r13, r24
	if(x_pos < font_size)
	{
		x_pos = font_size;
	}

	for(i = 0x04; i >= 0x00; i--)
     538:	6a 94       	dec	r6
     53a:	66 20       	and	r6, r6
     53c:	6c f7       	brge	.-38     	; 0x518 <print_char+0x9a>
			y_pos += font_size;
		}
		y_pos -= (font_size << 0x03);
		x_pos++;
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	9f 90       	pop	r9
     554:	8f 90       	pop	r8
     556:	6f 90       	pop	r6
     558:	5f 90       	pop	r5
     55a:	4f 90       	pop	r4
     55c:	08 95       	ret

0000055e <print_str>:

void print_str(unsigned int x_pos, unsigned int y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char *ch)
{
     55e:	3f 92       	push	r3
     560:	4f 92       	push	r4
     562:	5f 92       	push	r5
     564:	6f 92       	push	r6
     566:	7f 92       	push	r7
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	6c 01       	movw	r12, r24
     582:	4b 01       	movw	r8, r22
     584:	34 2e       	mov	r3, r20
     586:	59 01       	movw	r10, r18
     588:	28 01       	movw	r4, r16
     58a:	37 01       	movw	r6, r14
	int cnt = 0;
	strrev(ch);
     58c:	c7 01       	movw	r24, r14
     58e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <strrev>
	}
}

void print_str(unsigned int x_pos, unsigned int y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char *ch)
{
	int cnt = 0;
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	d0 e0       	ldi	r29, 0x00	; 0
	strrev(ch);
	
	while( (ch[cnt] >= 0x20) && (ch[cnt] <= 0x7F) )
     596:	1a c0       	rjmp	.+52     	; 0x5cc <print_str+0x6e>
	{
		if (ch[cnt] == 0x5f) 
     598:	8f 35       	cpi	r24, 0x5F	; 95
     59a:	11 f4       	brne	.+4      	; 0x5a0 <print_str+0x42>
		{
			cnt++;
     59c:	21 96       	adiw	r28, 0x01	; 1
			continue;
     59e:	16 c0       	rjmp	.+44     	; 0x5cc <print_str+0x6e>
		}
		print_char(x_pos, y_pos, font_size, colour, back_colour, ch[cnt++]);
     5a0:	21 96       	adiw	r28, 0x01	; 1
     5a2:	e8 2e       	mov	r14, r24
     5a4:	82 01       	movw	r16, r4
     5a6:	95 01       	movw	r18, r10
     5a8:	43 2d       	mov	r20, r3
     5aa:	b4 01       	movw	r22, r8
     5ac:	c6 01       	movw	r24, r12
     5ae:	0e 94 3f 02 	call	0x47e	; 0x47e <print_char>
		x_pos += 0x06;
		print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
     5b2:	68 94       	set
     5b4:	ee 24       	eor	r14, r14
     5b6:	e5 f8       	bld	r14, 5
     5b8:	95 01       	movw	r18, r10
     5ba:	43 2d       	mov	r20, r3
     5bc:	b4 01       	movw	r22, r8
     5be:	c6 01       	movw	r24, r12
     5c0:	06 96       	adiw	r24, 0x06	; 6
     5c2:	0e 94 3f 02 	call	0x47e	; 0x47e <print_char>
		x_pos += 0x06;
     5c6:	8c e0       	ldi	r24, 0x0C	; 12
     5c8:	c8 0e       	add	r12, r24
     5ca:	d1 1c       	adc	r13, r1
void print_str(unsigned int x_pos, unsigned int y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char *ch)
{
	int cnt = 0;
	strrev(ch);
	
	while( (ch[cnt] >= 0x20) && (ch[cnt] <= 0x7F) )
     5cc:	f3 01       	movw	r30, r6
     5ce:	ec 0f       	add	r30, r28
     5d0:	fd 1f       	adc	r31, r29
     5d2:	80 81       	ld	r24, Z
     5d4:	90 ee       	ldi	r25, 0xE0	; 224
     5d6:	98 0f       	add	r25, r24
     5d8:	90 36       	cpi	r25, 0x60	; 96
     5da:	f0 f2       	brcs	.-68     	; 0x598 <print_str+0x3a>
		print_char(x_pos, y_pos, font_size, colour, back_colour, ch[cnt++]);
		x_pos += 0x06;
		print_char(x_pos, y_pos, font_size, colour, back_colour, 0x20);
		x_pos += 0x06;
	}
}
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	df 90       	pop	r13
     5ea:	cf 90       	pop	r12
     5ec:	bf 90       	pop	r11
     5ee:	af 90       	pop	r10
     5f0:	9f 90       	pop	r9
     5f2:	8f 90       	pop	r8
     5f4:	7f 90       	pop	r7
     5f6:	6f 90       	pop	r6
     5f8:	5f 90       	pop	r5
     5fa:	4f 90       	pop	r4
     5fc:	3f 90       	pop	r3
     5fe:	08 95       	ret

00000600 <draw_calc>:
	}
}


void draw_calc()
{
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
	//draw top menu for choosing decimal system
	draw_line(0, 40, MAX_X, 40, WHITE);
     60c:	0f ef       	ldi	r16, 0xFF	; 255
     60e:	1f ef       	ldi	r17, 0xFF	; 255
     610:	28 e2       	ldi	r18, 0x28	; 40
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 ef       	ldi	r20, 0xF0	; 240
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	68 e2       	ldi	r22, 0x28	; 40
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 96 01 	call	0x32c	; 0x32c <draw_line>
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
     624:	cc e3       	ldi	r28, 0x3C	; 60
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	0b c0       	rjmp	.+22     	; 0x640 <draw_calc+0x40>
	{
		draw_line(i, 0, i, 40, WHITE);
     62a:	0f ef       	ldi	r16, 0xFF	; 255
     62c:	1f ef       	ldi	r17, 0xFF	; 255
     62e:	28 e2       	ldi	r18, 0x28	; 40
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	ae 01       	movw	r20, r28
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 96 01 	call	0x32c	; 0x32c <draw_line>

void draw_calc()
{
	//draw top menu for choosing decimal system
	draw_line(0, 40, MAX_X, 40, WHITE);
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
     63e:	ec 96       	adiw	r28, 0x3c	; 60
     640:	c0 3f       	cpi	r28, 0xF0	; 240
     642:	d1 05       	cpc	r29, r1
     644:	94 f3       	brlt	.-28     	; 0x62a <draw_calc+0x2a>
     646:	c4 e6       	ldi	r28, 0x64	; 100
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	0b c0       	rjmp	.+22     	; 0x662 <draw_calc+0x62>
	}
	
	//draw actual calculator lines
	for (int j = 100; j < MAX_Y; j = j + (MAX_Y - 100) / 5)
	{
		draw_line(0, j, MAX_X, j, WHITE);
     64c:	0f ef       	ldi	r16, 0xFF	; 255
     64e:	1f ef       	ldi	r17, 0xFF	; 255
     650:	9e 01       	movw	r18, r28
     652:	40 ef       	ldi	r20, 0xF0	; 240
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	be 01       	movw	r22, r28
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 96 01 	call	0x32c	; 0x32c <draw_line>
	{
		draw_line(i, 0, i, 40, WHITE);
	}
	
	//draw actual calculator lines
	for (int j = 100; j < MAX_Y; j = j + (MAX_Y - 100) / 5)
     660:	ac 96       	adiw	r28, 0x2c	; 44
     662:	c0 34       	cpi	r28, 0x40	; 64
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	d8 07       	cpc	r29, r24
     668:	8c f3       	brlt	.-30     	; 0x64c <draw_calc+0x4c>
     66a:	cc e3       	ldi	r28, 0x3C	; 60
     66c:	d0 e0       	ldi	r29, 0x00	; 0
     66e:	0b c0       	rjmp	.+22     	; 0x686 <draw_calc+0x86>
		draw_line(0, j, MAX_X, j, WHITE);
	}
	
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
	{
		draw_line(i, 100, i, MAX_Y - (MAX_Y - 100) / 5, WHITE);
     670:	0f ef       	ldi	r16, 0xFF	; 255
     672:	1f ef       	ldi	r17, 0xFF	; 255
     674:	24 e1       	ldi	r18, 0x14	; 20
     676:	31 e0       	ldi	r19, 0x01	; 1
     678:	ae 01       	movw	r20, r28
     67a:	64 e6       	ldi	r22, 0x64	; 100
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	ce 01       	movw	r24, r28
     680:	0e 94 96 01 	call	0x32c	; 0x32c <draw_line>
	for (int j = 100; j < MAX_Y; j = j + (MAX_Y - 100) / 5)
	{
		draw_line(0, j, MAX_X, j, WHITE);
	}
	
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
     684:	ec 96       	adiw	r28, 0x3c	; 60
     686:	c0 3f       	cpi	r28, 0xF0	; 240
     688:	d1 05       	cpc	r29, r1
     68a:	94 f3       	brlt	.-28     	; 0x670 <draw_calc+0x70>
     68c:	c0 e3       	ldi	r28, 0x30	; 48
     68e:	d0 e0       	ldi	r29, 0x00	; 0
     690:	0b c0       	rjmp	.+22     	; 0x6a8 <draw_calc+0xa8>
		draw_line(i, 100, i, MAX_Y - (MAX_Y - 100) / 5, WHITE);
	}
	
	for (int i = MAX_X / 5; i < MAX_X; i = i + MAX_X / 6)
	{
		draw_line(i, MAX_Y - (MAX_Y - 100) / 6, i, MAX_Y, WHITE);
     692:	0f ef       	ldi	r16, 0xFF	; 255
     694:	1f ef       	ldi	r17, 0xFF	; 255
     696:	20 e4       	ldi	r18, 0x40	; 64
     698:	31 e0       	ldi	r19, 0x01	; 1
     69a:	ae 01       	movw	r20, r28
     69c:	6c e1       	ldi	r22, 0x1C	; 28
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	ce 01       	movw	r24, r28
     6a2:	0e 94 96 01 	call	0x32c	; 0x32c <draw_line>
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
	{
		draw_line(i, 100, i, MAX_Y - (MAX_Y - 100) / 5, WHITE);
	}
	
	for (int i = MAX_X / 5; i < MAX_X; i = i + MAX_X / 6)
     6a6:	a8 96       	adiw	r28, 0x28	; 40
     6a8:	c0 3f       	cpi	r28, 0xF0	; 240
     6aa:	d1 05       	cpc	r29, r1
     6ac:	94 f3       	brlt	.-28     	; 0x692 <draw_calc+0x92>
	{
		draw_line(i, MAX_Y - (MAX_Y - 100) / 6, i, MAX_Y, WHITE);
	}
	
	//draw characters
	print_str(220, 286, 3, WHITE, BLACK, "A");
     6ae:	0f 2e       	mov	r0, r31
     6b0:	f2 e6       	ldi	r31, 0x62	; 98
     6b2:	ef 2e       	mov	r14, r31
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	ff 2e       	mov	r15, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	00 e0       	ldi	r16, 0x00	; 0
     6bc:	10 e0       	ldi	r17, 0x00	; 0
     6be:	2f ef       	ldi	r18, 0xFF	; 255
     6c0:	3f ef       	ldi	r19, 0xFF	; 255
     6c2:	43 e0       	ldi	r20, 0x03	; 3
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	6e e1       	ldi	r22, 0x1E	; 30
     6c8:	71 e0       	ldi	r23, 0x01	; 1
     6ca:	8c ed       	ldi	r24, 0xDC	; 220
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(180, 286, 3, WHITE, BLACK, "B");
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f4 e6       	ldi	r31, 0x64	; 100
     6d6:	ef 2e       	mov	r14, r31
     6d8:	f2 e0       	ldi	r31, 0x02	; 2
     6da:	ff 2e       	mov	r15, r31
     6dc:	f0 2d       	mov	r31, r0
     6de:	2f ef       	ldi	r18, 0xFF	; 255
     6e0:	3f ef       	ldi	r19, 0xFF	; 255
     6e2:	43 e0       	ldi	r20, 0x03	; 3
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	6e e1       	ldi	r22, 0x1E	; 30
     6e8:	71 e0       	ldi	r23, 0x01	; 1
     6ea:	84 eb       	ldi	r24, 0xB4	; 180
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(140, 286, 3, WHITE, BLACK, "C");
     6f2:	0f 2e       	mov	r0, r31
     6f4:	f6 e7       	ldi	r31, 0x76	; 118
     6f6:	ef 2e       	mov	r14, r31
     6f8:	f2 e0       	ldi	r31, 0x02	; 2
     6fa:	ff 2e       	mov	r15, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	2f ef       	ldi	r18, 0xFF	; 255
     700:	3f ef       	ldi	r19, 0xFF	; 255
     702:	43 e0       	ldi	r20, 0x03	; 3
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	6e e1       	ldi	r22, 0x1E	; 30
     708:	71 e0       	ldi	r23, 0x01	; 1
     70a:	8c e8       	ldi	r24, 0x8C	; 140
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(100, 286, 3, WHITE, BLACK, "D");
     712:	0f 2e       	mov	r0, r31
     714:	f6 e6       	ldi	r31, 0x66	; 102
     716:	ef 2e       	mov	r14, r31
     718:	f2 e0       	ldi	r31, 0x02	; 2
     71a:	ff 2e       	mov	r15, r31
     71c:	f0 2d       	mov	r31, r0
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	3f ef       	ldi	r19, 0xFF	; 255
     722:	43 e0       	ldi	r20, 0x03	; 3
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	6e e1       	ldi	r22, 0x1E	; 30
     728:	71 e0       	ldi	r23, 0x01	; 1
     72a:	84 e6       	ldi	r24, 0x64	; 100
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(60, 286, 3, WHITE, BLACK, "E");
     732:	0f 2e       	mov	r0, r31
     734:	f8 e6       	ldi	r31, 0x68	; 104
     736:	ef 2e       	mov	r14, r31
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	ff 2e       	mov	r15, r31
     73c:	f0 2d       	mov	r31, r0
     73e:	2f ef       	ldi	r18, 0xFF	; 255
     740:	3f ef       	ldi	r19, 0xFF	; 255
     742:	43 e0       	ldi	r20, 0x03	; 3
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	6e e1       	ldi	r22, 0x1E	; 30
     748:	71 e0       	ldi	r23, 0x01	; 1
     74a:	8c e3       	ldi	r24, 0x3C	; 60
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(20, 286, 3, WHITE, BLACK, "F");
     752:	0f 2e       	mov	r0, r31
     754:	fa e6       	ldi	r31, 0x6A	; 106
     756:	ef 2e       	mov	r14, r31
     758:	f2 e0       	ldi	r31, 0x02	; 2
     75a:	ff 2e       	mov	r15, r31
     75c:	f0 2d       	mov	r31, r0
     75e:	2f ef       	ldi	r18, 0xFF	; 255
     760:	3f ef       	ldi	r19, 0xFF	; 255
     762:	43 e0       	ldi	r20, 0x03	; 3
     764:	50 e0       	ldi	r21, 0x00	; 0
     766:	6e e1       	ldi	r22, 0x1E	; 30
     768:	71 e0       	ldi	r23, 0x01	; 1
     76a:	84 e1       	ldi	r24, 0x14	; 20
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	
	print_str(195, 12, 2, WHITE, BLACK, "BIN");
     772:	0f 2e       	mov	r0, r31
     774:	fc e6       	ldi	r31, 0x6C	; 108
     776:	ef 2e       	mov	r14, r31
     778:	f2 e0       	ldi	r31, 0x02	; 2
     77a:	ff 2e       	mov	r15, r31
     77c:	f0 2d       	mov	r31, r0
     77e:	2f ef       	ldi	r18, 0xFF	; 255
     780:	3f ef       	ldi	r19, 0xFF	; 255
     782:	42 e0       	ldi	r20, 0x02	; 2
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	6c e0       	ldi	r22, 0x0C	; 12
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	83 ec       	ldi	r24, 0xC3	; 195
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(135, 12, 2, WHITE, BLACK, "OCT");
     792:	0f 2e       	mov	r0, r31
     794:	f0 e7       	ldi	r31, 0x70	; 112
     796:	ef 2e       	mov	r14, r31
     798:	f2 e0       	ldi	r31, 0x02	; 2
     79a:	ff 2e       	mov	r15, r31
     79c:	f0 2d       	mov	r31, r0
     79e:	2f ef       	ldi	r18, 0xFF	; 255
     7a0:	3f ef       	ldi	r19, 0xFF	; 255
     7a2:	42 e0       	ldi	r20, 0x02	; 2
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	6c e0       	ldi	r22, 0x0C	; 12
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	87 e8       	ldi	r24, 0x87	; 135
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(75, 12, 2, WHITE, BLACK, "DEC");
     7b2:	0f 2e       	mov	r0, r31
     7b4:	f4 e7       	ldi	r31, 0x74	; 116
     7b6:	ef 2e       	mov	r14, r31
     7b8:	f2 e0       	ldi	r31, 0x02	; 2
     7ba:	ff 2e       	mov	r15, r31
     7bc:	f0 2d       	mov	r31, r0
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	3f ef       	ldi	r19, 0xFF	; 255
     7c2:	42 e0       	ldi	r20, 0x02	; 2
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	6c e0       	ldi	r22, 0x0C	; 12
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	8b e4       	ldi	r24, 0x4B	; 75
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(15, 12, 2, WHITE, BLACK, "HEX");
     7d2:	0f 2e       	mov	r0, r31
     7d4:	f8 e7       	ldi	r31, 0x78	; 120
     7d6:	ef 2e       	mov	r14, r31
     7d8:	f2 e0       	ldi	r31, 0x02	; 2
     7da:	ff 2e       	mov	r15, r31
     7dc:	f0 2d       	mov	r31, r0
     7de:	2f ef       	ldi	r18, 0xFF	; 255
     7e0:	3f ef       	ldi	r19, 0xFF	; 255
     7e2:	42 e0       	ldi	r20, 0x02	; 2
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	6c e0       	ldi	r22, 0x0C	; 12
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	8f e0       	ldi	r24, 0x0F	; 15
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	
	print_str(200, 110, 3, WHITE, BLACK, "7");
     7f2:	0f 2e       	mov	r0, r31
     7f4:	fc e7       	ldi	r31, 0x7C	; 124
     7f6:	ef 2e       	mov	r14, r31
     7f8:	f2 e0       	ldi	r31, 0x02	; 2
     7fa:	ff 2e       	mov	r15, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	2f ef       	ldi	r18, 0xFF	; 255
     800:	3f ef       	ldi	r19, 0xFF	; 255
     802:	43 e0       	ldi	r20, 0x03	; 3
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	6e e6       	ldi	r22, 0x6E	; 110
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	88 ec       	ldi	r24, 0xC8	; 200
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(140, 110, 3, WHITE, BLACK, "8");
     812:	0f 2e       	mov	r0, r31
     814:	fe e7       	ldi	r31, 0x7E	; 126
     816:	ef 2e       	mov	r14, r31
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	ff 2e       	mov	r15, r31
     81c:	f0 2d       	mov	r31, r0
     81e:	2f ef       	ldi	r18, 0xFF	; 255
     820:	3f ef       	ldi	r19, 0xFF	; 255
     822:	43 e0       	ldi	r20, 0x03	; 3
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	6e e6       	ldi	r22, 0x6E	; 110
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	8c e8       	ldi	r24, 0x8C	; 140
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(80, 110, 3, WHITE, BLACK, "9");
     832:	0f 2e       	mov	r0, r31
     834:	f0 e8       	ldi	r31, 0x80	; 128
     836:	ef 2e       	mov	r14, r31
     838:	f2 e0       	ldi	r31, 0x02	; 2
     83a:	ff 2e       	mov	r15, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	2f ef       	ldi	r18, 0xFF	; 255
     840:	3f ef       	ldi	r19, 0xFF	; 255
     842:	43 e0       	ldi	r20, 0x03	; 3
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	6e e6       	ldi	r22, 0x6E	; 110
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e5       	ldi	r24, 0x50	; 80
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(20, 110, 3, WHITE, BLACK, "/");
     852:	0f 2e       	mov	r0, r31
     854:	f2 e8       	ldi	r31, 0x82	; 130
     856:	ef 2e       	mov	r14, r31
     858:	f2 e0       	ldi	r31, 0x02	; 2
     85a:	ff 2e       	mov	r15, r31
     85c:	f0 2d       	mov	r31, r0
     85e:	2f ef       	ldi	r18, 0xFF	; 255
     860:	3f ef       	ldi	r19, 0xFF	; 255
     862:	43 e0       	ldi	r20, 0x03	; 3
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	6e e6       	ldi	r22, 0x6E	; 110
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	84 e1       	ldi	r24, 0x14	; 20
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	
	print_str(200, 154, 3, WHITE, BLACK, "4");
     872:	0f 2e       	mov	r0, r31
     874:	f4 e8       	ldi	r31, 0x84	; 132
     876:	ef 2e       	mov	r14, r31
     878:	f2 e0       	ldi	r31, 0x02	; 2
     87a:	ff 2e       	mov	r15, r31
     87c:	f0 2d       	mov	r31, r0
     87e:	2f ef       	ldi	r18, 0xFF	; 255
     880:	3f ef       	ldi	r19, 0xFF	; 255
     882:	43 e0       	ldi	r20, 0x03	; 3
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	6a e9       	ldi	r22, 0x9A	; 154
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	88 ec       	ldi	r24, 0xC8	; 200
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(140, 154, 3, WHITE, BLACK, "5");
     892:	0f 2e       	mov	r0, r31
     894:	f6 e8       	ldi	r31, 0x86	; 134
     896:	ef 2e       	mov	r14, r31
     898:	f2 e0       	ldi	r31, 0x02	; 2
     89a:	ff 2e       	mov	r15, r31
     89c:	f0 2d       	mov	r31, r0
     89e:	2f ef       	ldi	r18, 0xFF	; 255
     8a0:	3f ef       	ldi	r19, 0xFF	; 255
     8a2:	43 e0       	ldi	r20, 0x03	; 3
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	6a e9       	ldi	r22, 0x9A	; 154
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	8c e8       	ldi	r24, 0x8C	; 140
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(80, 154, 3, WHITE, BLACK, "6");
     8b2:	0f 2e       	mov	r0, r31
     8b4:	f8 e8       	ldi	r31, 0x88	; 136
     8b6:	ef 2e       	mov	r14, r31
     8b8:	f2 e0       	ldi	r31, 0x02	; 2
     8ba:	ff 2e       	mov	r15, r31
     8bc:	f0 2d       	mov	r31, r0
     8be:	2f ef       	ldi	r18, 0xFF	; 255
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	43 e0       	ldi	r20, 0x03	; 3
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	6a e9       	ldi	r22, 0x9A	; 154
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	80 e5       	ldi	r24, 0x50	; 80
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(20, 154, 3, WHITE, BLACK, "x");
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fa e8       	ldi	r31, 0x8A	; 138
     8d6:	ef 2e       	mov	r14, r31
     8d8:	f2 e0       	ldi	r31, 0x02	; 2
     8da:	ff 2e       	mov	r15, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	2f ef       	ldi	r18, 0xFF	; 255
     8e0:	3f ef       	ldi	r19, 0xFF	; 255
     8e2:	43 e0       	ldi	r20, 0x03	; 3
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	6a e9       	ldi	r22, 0x9A	; 154
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	84 e1       	ldi	r24, 0x14	; 20
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	
	print_str(200, 198, 3, WHITE, BLACK, "1");
     8f2:	0f 2e       	mov	r0, r31
     8f4:	fc e8       	ldi	r31, 0x8C	; 140
     8f6:	ef 2e       	mov	r14, r31
     8f8:	f2 e0       	ldi	r31, 0x02	; 2
     8fa:	ff 2e       	mov	r15, r31
     8fc:	f0 2d       	mov	r31, r0
     8fe:	2f ef       	ldi	r18, 0xFF	; 255
     900:	3f ef       	ldi	r19, 0xFF	; 255
     902:	43 e0       	ldi	r20, 0x03	; 3
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	66 ec       	ldi	r22, 0xC6	; 198
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	88 ec       	ldi	r24, 0xC8	; 200
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(140, 198, 3, WHITE, BLACK, "2");
     912:	0f 2e       	mov	r0, r31
     914:	fe e8       	ldi	r31, 0x8E	; 142
     916:	ef 2e       	mov	r14, r31
     918:	f2 e0       	ldi	r31, 0x02	; 2
     91a:	ff 2e       	mov	r15, r31
     91c:	f0 2d       	mov	r31, r0
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	3f ef       	ldi	r19, 0xFF	; 255
     922:	43 e0       	ldi	r20, 0x03	; 3
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	66 ec       	ldi	r22, 0xC6	; 198
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	8c e8       	ldi	r24, 0x8C	; 140
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(80, 198, 3, WHITE, BLACK, "3");
     932:	0f 2e       	mov	r0, r31
     934:	f0 e9       	ldi	r31, 0x90	; 144
     936:	ef 2e       	mov	r14, r31
     938:	f2 e0       	ldi	r31, 0x02	; 2
     93a:	ff 2e       	mov	r15, r31
     93c:	f0 2d       	mov	r31, r0
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	3f ef       	ldi	r19, 0xFF	; 255
     942:	43 e0       	ldi	r20, 0x03	; 3
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	66 ec       	ldi	r22, 0xC6	; 198
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	80 e5       	ldi	r24, 0x50	; 80
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(20, 198, 3, WHITE, BLACK, "+");
     952:	0f 2e       	mov	r0, r31
     954:	f2 e9       	ldi	r31, 0x92	; 146
     956:	ef 2e       	mov	r14, r31
     958:	f2 e0       	ldi	r31, 0x02	; 2
     95a:	ff 2e       	mov	r15, r31
     95c:	f0 2d       	mov	r31, r0
     95e:	2f ef       	ldi	r18, 0xFF	; 255
     960:	3f ef       	ldi	r19, 0xFF	; 255
     962:	43 e0       	ldi	r20, 0x03	; 3
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	66 ec       	ldi	r22, 0xC6	; 198
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	84 e1       	ldi	r24, 0x14	; 20
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	
	print_str(200, 242, 3, WHITE, BLACK, "0");
     972:	0f 2e       	mov	r0, r31
     974:	f4 e9       	ldi	r31, 0x94	; 148
     976:	ef 2e       	mov	r14, r31
     978:	f2 e0       	ldi	r31, 0x02	; 2
     97a:	ff 2e       	mov	r15, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	2f ef       	ldi	r18, 0xFF	; 255
     980:	3f ef       	ldi	r19, 0xFF	; 255
     982:	43 e0       	ldi	r20, 0x03	; 3
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	62 ef       	ldi	r22, 0xF2	; 242
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	88 ec       	ldi	r24, 0xC8	; 200
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(140, 242, 3, WHITE, BLACK, "CLR");
     992:	0f 2e       	mov	r0, r31
     994:	f6 e9       	ldi	r31, 0x96	; 150
     996:	ef 2e       	mov	r14, r31
     998:	f2 e0       	ldi	r31, 0x02	; 2
     99a:	ff 2e       	mov	r15, r31
     99c:	f0 2d       	mov	r31, r0
     99e:	2f ef       	ldi	r18, 0xFF	; 255
     9a0:	3f ef       	ldi	r19, 0xFF	; 255
     9a2:	43 e0       	ldi	r20, 0x03	; 3
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	62 ef       	ldi	r22, 0xF2	; 242
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	8c e8       	ldi	r24, 0x8C	; 140
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(80, 242, 3, WHITE, BLACK, "=");
     9b2:	0f 2e       	mov	r0, r31
     9b4:	fa e9       	ldi	r31, 0x9A	; 154
     9b6:	ef 2e       	mov	r14, r31
     9b8:	f2 e0       	ldi	r31, 0x02	; 2
     9ba:	ff 2e       	mov	r15, r31
     9bc:	f0 2d       	mov	r31, r0
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	43 e0       	ldi	r20, 0x03	; 3
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	62 ef       	ldi	r22, 0xF2	; 242
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e5       	ldi	r24, 0x50	; 80
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	print_str(20, 242, 3, WHITE, BLACK, "-");
     9d2:	0f 2e       	mov	r0, r31
     9d4:	fc e9       	ldi	r31, 0x9C	; 156
     9d6:	ef 2e       	mov	r14, r31
     9d8:	f2 e0       	ldi	r31, 0x02	; 2
     9da:	ff 2e       	mov	r15, r31
     9dc:	f0 2d       	mov	r31, r0
     9de:	2f ef       	ldi	r18, 0xFF	; 255
     9e0:	3f ef       	ldi	r19, 0xFF	; 255
     9e2:	43 e0       	ldi	r20, 0x03	; 3
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	62 ef       	ldi	r22, 0xF2	; 242
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	84 e1       	ldi	r24, 0x14	; 20
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
	
	
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	08 95       	ret

00000a00 <init>:

void init(void)
{
	DDRA = 0xff;
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
     a04:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xff;
     a06:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xff;
     a08:	84 bb       	out	0x14, r24	; 20
	
	DDRD = ~(_BV(T_OUT) | _BV(T_IRQ));						//input pins that read data
     a0a:	86 ef       	ldi	r24, 0xF6	; 246
     a0c:	81 bb       	out	0x11, r24	; 17
		
	//LCD config setup
	PORTD |= _BV(LCD_RESET);
     a0e:	82 b3       	in	r24, 0x12	; 18
     a10:	80 68       	ori	r24, 0x80	; 128
     a12:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	93 e2       	ldi	r25, 0x23	; 35
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	f1 f7       	brne	.-4      	; 0xa18 <init+0x18>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <init+0x1e>
     a1e:	00 00       	nop
	_delay_ms(5);
	PORTD &= ~_BV(LCD_RESET);
     a20:	82 b3       	in	r24, 0x12	; 18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	82 bb       	out	0x12, r24	; 18
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	97 e4       	ldi	r25, 0x47	; 71
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	f1 f7       	brne	.-4      	; 0xa2a <init+0x2a>
     a2e:	00 c0       	rjmp	.+0      	; 0xa30 <init+0x30>
     a30:	00 00       	nop
	_delay_ms(10);
	PORTD |= _BV(LCD_RESET);
     a32:	82 b3       	in	r24, 0x12	; 18
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	82 bb       	out	0x12, r24	; 18
	PORTC |= _BV(LCD_CS);
     a38:	85 b3       	in	r24, 0x15	; 21
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	85 bb       	out	0x15, r24	; 21
	PORTC |= _BV(LCD_RD);
     a3e:	85 b3       	in	r24, 0x15	; 21
     a40:	80 64       	ori	r24, 0x40	; 64
     a42:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~_BV(LCD_WR);
     a44:	85 b3       	in	r24, 0x15	; 21
     a46:	8d 7f       	andi	r24, 0xFD	; 253
     a48:	85 bb       	out	0x15, r24	; 21
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	9f e8       	ldi	r25, 0x8F	; 143
     a4e:	01 97       	sbiw	r24, 0x01	; 1
     a50:	f1 f7       	brne	.-4      	; 0xa4e <init+0x4e>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <init+0x54>
     a54:	00 00       	nop
	_delay_ms(20);

	LCD_write_cmd_data(0x0000,0x0001);    _delay_ms(1);
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     a62:	83 e3       	ldi	r24, 0x33	; 51
     a64:	97 e0       	ldi	r25, 0x07	; 7
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <init+0x66>
	LCD_write_cmd_data(0x0003,0xA8A4);    _delay_ms(1);
     a6a:	64 ea       	ldi	r22, 0xA4	; 164
     a6c:	78 ea       	ldi	r23, 0xA8	; 168
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     a76:	83 e3       	ldi	r24, 0x33	; 51
     a78:	97 e0       	ldi	r25, 0x07	; 7
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <init+0x7a>
	LCD_write_cmd_data(0x000C,0x0000);    _delay_ms(1);
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	8c e0       	ldi	r24, 0x0C	; 12
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     a8a:	83 e3       	ldi	r24, 0x33	; 51
     a8c:	97 e0       	ldi	r25, 0x07	; 7
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <init+0x8e>
	LCD_write_cmd_data(0x000D,0x080C);    _delay_ms(1);
     a92:	6c e0       	ldi	r22, 0x0C	; 12
     a94:	78 e0       	ldi	r23, 0x08	; 8
     a96:	8d e0       	ldi	r24, 0x0D	; 13
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     a9e:	83 e3       	ldi	r24, 0x33	; 51
     aa0:	97 e0       	ldi	r25, 0x07	; 7
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <init+0xa2>
	LCD_write_cmd_data(0x000E,0x2B00);    _delay_ms(1);
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	7b e2       	ldi	r23, 0x2B	; 43
     aaa:	8e e0       	ldi	r24, 0x0E	; 14
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     ab2:	83 e3       	ldi	r24, 0x33	; 51
     ab4:	97 e0       	ldi	r25, 0x07	; 7
     ab6:	01 97       	sbiw	r24, 0x01	; 1
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <init+0xb6>
	LCD_write_cmd_data(0x001E,0x00B0);    _delay_ms(1);
     aba:	60 eb       	ldi	r22, 0xB0	; 176
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	8e e1       	ldi	r24, 0x1E	; 30
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     ac6:	83 e3       	ldi	r24, 0x33	; 51
     ac8:	97 e0       	ldi	r25, 0x07	; 7
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <init+0xca>
	LCD_write_cmd_data(0x0001,0x2B3F);    _delay_ms(1);
     ace:	6f e3       	ldi	r22, 0x3F	; 63
     ad0:	7b e2       	ldi	r23, 0x2B	; 43
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     ada:	83 e3       	ldi	r24, 0x33	; 51
     adc:	97 e0       	ldi	r25, 0x07	; 7
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <init+0xde>
	LCD_write_cmd_data(0x0002,0x0600);    _delay_ms(1);
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	76 e0       	ldi	r23, 0x06	; 6
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     aee:	83 e3       	ldi	r24, 0x33	; 51
     af0:	97 e0       	ldi	r25, 0x07	; 7
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <init+0xf2>
	LCD_write_cmd_data(0x0010,0x0000);    _delay_ms(1);
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e1       	ldi	r24, 0x10	; 16
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b02:	83 e3       	ldi	r24, 0x33	; 51
     b04:	97 e0       	ldi	r25, 0x07	; 7
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	f1 f7       	brne	.-4      	; 0xb06 <init+0x106>
	LCD_write_cmd_data(0x0011,0x6070);    _delay_ms(1);
     b0a:	60 e7       	ldi	r22, 0x70	; 112
     b0c:	70 e6       	ldi	r23, 0x60	; 96
     b0e:	81 e1       	ldi	r24, 0x11	; 17
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b16:	83 e3       	ldi	r24, 0x33	; 51
     b18:	97 e0       	ldi	r25, 0x07	; 7
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <init+0x11a>
	LCD_write_cmd_data(0x0005,0x0000);    _delay_ms(1);
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	85 e0       	ldi	r24, 0x05	; 5
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b2a:	83 e3       	ldi	r24, 0x33	; 51
     b2c:	97 e0       	ldi	r25, 0x07	; 7
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <init+0x12e>
	LCD_write_cmd_data(0x0006,0x0000);    _delay_ms(1);
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	86 e0       	ldi	r24, 0x06	; 6
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b3e:	83 e3       	ldi	r24, 0x33	; 51
     b40:	97 e0       	ldi	r25, 0x07	; 7
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <init+0x142>
	LCD_write_cmd_data(0x0016,0xEF1C);    _delay_ms(1);
     b46:	6c e1       	ldi	r22, 0x1C	; 28
     b48:	7f ee       	ldi	r23, 0xEF	; 239
     b4a:	86 e1       	ldi	r24, 0x16	; 22
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b52:	83 e3       	ldi	r24, 0x33	; 51
     b54:	97 e0       	ldi	r25, 0x07	; 7
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <init+0x156>
	LCD_write_cmd_data(0x0017,0x0003);    _delay_ms(1);
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	87 e1       	ldi	r24, 0x17	; 23
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b66:	83 e3       	ldi	r24, 0x33	; 51
     b68:	97 e0       	ldi	r25, 0x07	; 7
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <init+0x16a>
	LCD_write_cmd_data(0x0007,0x0233);    _delay_ms(1);
     b6e:	63 e3       	ldi	r22, 0x33	; 51
     b70:	72 e0       	ldi	r23, 0x02	; 2
     b72:	87 e0       	ldi	r24, 0x07	; 7
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b7a:	83 e3       	ldi	r24, 0x33	; 51
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <init+0x17e>
	LCD_write_cmd_data(0x000B,0x0000);    _delay_ms(1);
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	8b e0       	ldi	r24, 0x0B	; 11
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     b8e:	83 e3       	ldi	r24, 0x33	; 51
     b90:	97 e0       	ldi	r25, 0x07	; 7
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <init+0x192>
	LCD_write_cmd_data(0x000F,0x0000);    _delay_ms(1);
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	8f e0       	ldi	r24, 0x0F	; 15
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     ba2:	83 e3       	ldi	r24, 0x33	; 51
     ba4:	97 e0       	ldi	r25, 0x07	; 7
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	f1 f7       	brne	.-4      	; 0xba6 <init+0x1a6>
	LCD_write_cmd_data(0x0041,0x0000);    _delay_ms(1);
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	81 e4       	ldi	r24, 0x41	; 65
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     bb6:	83 e3       	ldi	r24, 0x33	; 51
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	f1 f7       	brne	.-4      	; 0xbba <init+0x1ba>
	LCD_write_cmd_data(0x0042,0x0000);    _delay_ms(1);
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	82 e4       	ldi	r24, 0x42	; 66
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     bca:	83 e3       	ldi	r24, 0x33	; 51
     bcc:	97 e0       	ldi	r25, 0x07	; 7
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	f1 f7       	brne	.-4      	; 0xbce <init+0x1ce>
	LCD_write_cmd_data(0x0048,0x0000);    _delay_ms(1);
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	88 e4       	ldi	r24, 0x48	; 72
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     bde:	83 e3       	ldi	r24, 0x33	; 51
     be0:	97 e0       	ldi	r25, 0x07	; 7
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <init+0x1e2>
	LCD_write_cmd_data(0x0049,0x013F);    _delay_ms(1);
     be6:	6f e3       	ldi	r22, 0x3F	; 63
     be8:	71 e0       	ldi	r23, 0x01	; 1
     bea:	89 e4       	ldi	r24, 0x49	; 73
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     bf2:	83 e3       	ldi	r24, 0x33	; 51
     bf4:	97 e0       	ldi	r25, 0x07	; 7
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <init+0x1f6>
	LCD_write_cmd_data(0x004A,0x0000);    _delay_ms(1);
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	8a e4       	ldi	r24, 0x4A	; 74
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c06:	83 e3       	ldi	r24, 0x33	; 51
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <init+0x20a>
	LCD_write_cmd_data(0x004B,0x0000);    _delay_ms(1);
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	8b e4       	ldi	r24, 0x4B	; 75
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c1a:	83 e3       	ldi	r24, 0x33	; 51
     c1c:	97 e0       	ldi	r25, 0x07	; 7
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <init+0x21e>
	LCD_write_cmd_data(0x0044,0xEF00);    _delay_ms(1);
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	7f ee       	ldi	r23, 0xEF	; 239
     c26:	84 e4       	ldi	r24, 0x44	; 68
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c2e:	83 e3       	ldi	r24, 0x33	; 51
     c30:	97 e0       	ldi	r25, 0x07	; 7
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <init+0x232>
	LCD_write_cmd_data(0x0045,0x0000);    _delay_ms(1);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	85 e4       	ldi	r24, 0x45	; 69
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c42:	83 e3       	ldi	r24, 0x33	; 51
     c44:	97 e0       	ldi	r25, 0x07	; 7
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <init+0x246>
	LCD_write_cmd_data(0x0046,0x013F);    _delay_ms(1);
     c4a:	6f e3       	ldi	r22, 0x3F	; 63
     c4c:	71 e0       	ldi	r23, 0x01	; 1
     c4e:	86 e4       	ldi	r24, 0x46	; 70
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c56:	83 e3       	ldi	r24, 0x33	; 51
     c58:	97 e0       	ldi	r25, 0x07	; 7
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <init+0x25a>
	LCD_write_cmd_data(0x0030,0x0707);    _delay_ms(1);
     c5e:	67 e0       	ldi	r22, 0x07	; 7
     c60:	77 e0       	ldi	r23, 0x07	; 7
     c62:	80 e3       	ldi	r24, 0x30	; 48
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c6a:	83 e3       	ldi	r24, 0x33	; 51
     c6c:	97 e0       	ldi	r25, 0x07	; 7
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <init+0x26e>
	LCD_write_cmd_data(0x0031,0x0204);    _delay_ms(1);
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	72 e0       	ldi	r23, 0x02	; 2
     c76:	81 e3       	ldi	r24, 0x31	; 49
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c7e:	83 e3       	ldi	r24, 0x33	; 51
     c80:	97 e0       	ldi	r25, 0x07	; 7
     c82:	01 97       	sbiw	r24, 0x01	; 1
     c84:	f1 f7       	brne	.-4      	; 0xc82 <init+0x282>
	LCD_write_cmd_data(0x0032,0x0204);    _delay_ms(1);
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	82 e3       	ldi	r24, 0x32	; 50
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     c92:	83 e3       	ldi	r24, 0x33	; 51
     c94:	97 e0       	ldi	r25, 0x07	; 7
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <init+0x296>
	LCD_write_cmd_data(0x0033,0x0502);    _delay_ms(1);
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	75 e0       	ldi	r23, 0x05	; 5
     c9e:	83 e3       	ldi	r24, 0x33	; 51
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     ca6:	83 e3       	ldi	r24, 0x33	; 51
     ca8:	97 e0       	ldi	r25, 0x07	; 7
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <init+0x2aa>
	LCD_write_cmd_data(0x0034,0x0507);    _delay_ms(1);
     cae:	67 e0       	ldi	r22, 0x07	; 7
     cb0:	75 e0       	ldi	r23, 0x05	; 5
     cb2:	84 e3       	ldi	r24, 0x34	; 52
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     cba:	83 e3       	ldi	r24, 0x33	; 51
     cbc:	97 e0       	ldi	r25, 0x07	; 7
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <init+0x2be>
	LCD_write_cmd_data(0x0035,0x0204);    _delay_ms(1);
     cc2:	64 e0       	ldi	r22, 0x04	; 4
     cc4:	72 e0       	ldi	r23, 0x02	; 2
     cc6:	85 e3       	ldi	r24, 0x35	; 53
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     cce:	83 e3       	ldi	r24, 0x33	; 51
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <init+0x2d2>
	LCD_write_cmd_data(0x0036,0x0204);    _delay_ms(1);
     cd6:	64 e0       	ldi	r22, 0x04	; 4
     cd8:	72 e0       	ldi	r23, 0x02	; 2
     cda:	86 e3       	ldi	r24, 0x36	; 54
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     ce2:	83 e3       	ldi	r24, 0x33	; 51
     ce4:	97 e0       	ldi	r25, 0x07	; 7
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <init+0x2e6>
	LCD_write_cmd_data(0x0037,0x0502);    _delay_ms(1);
     cea:	62 e0       	ldi	r22, 0x02	; 2
     cec:	75 e0       	ldi	r23, 0x05	; 5
     cee:	87 e3       	ldi	r24, 0x37	; 55
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     cf6:	83 e3       	ldi	r24, 0x33	; 51
     cf8:	97 e0       	ldi	r25, 0x07	; 7
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <init+0x2fa>
	LCD_write_cmd_data(0x003A,0x0302);    _delay_ms(1);
     cfe:	62 e0       	ldi	r22, 0x02	; 2
     d00:	73 e0       	ldi	r23, 0x03	; 3
     d02:	8a e3       	ldi	r24, 0x3A	; 58
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     d0a:	83 e3       	ldi	r24, 0x33	; 51
     d0c:	97 e0       	ldi	r25, 0x07	; 7
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <init+0x30e>
	LCD_write_cmd_data(0x003B,0x0302);    _delay_ms(1);
     d12:	62 e0       	ldi	r22, 0x02	; 2
     d14:	73 e0       	ldi	r23, 0x03	; 3
     d16:	8b e3       	ldi	r24, 0x3B	; 59
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     d1e:	83 e3       	ldi	r24, 0x33	; 51
     d20:	97 e0       	ldi	r25, 0x07	; 7
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <init+0x322>
	LCD_write_cmd_data(0x0023,0x0000);    _delay_ms(1);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	83 e2       	ldi	r24, 0x23	; 35
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     d32:	83 e3       	ldi	r24, 0x33	; 51
     d34:	97 e0       	ldi	r25, 0x07	; 7
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <init+0x336>
	LCD_write_cmd_data(0x0024,0x0000);    _delay_ms(1);
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	84 e2       	ldi	r24, 0x24	; 36
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
     d46:	83 e3       	ldi	r24, 0x33	; 51
     d48:	97 e0       	ldi	r25, 0x07	; 7
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <init+0x34a>
	LCD_write_cmd_data(0x004f,0);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	8f e4       	ldi	r24, 0x4F	; 79
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd_data(0x004e,0);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	8e e4       	ldi	r24, 0x4E	; 78
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_write_cmd_data>
	LCD_write_cmd(0x0022);
     d66:	82 e2       	ldi	r24, 0x22	; 34
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_write_cmd>
	
	LCD_screen_color(BLACK);
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_screen_color>
	
	draw_calc();
     d76:	0e 94 00 03 	call	0x600	; 0x600 <draw_calc>
     d7a:	08 95       	ret

00000d7c <num_to_char>:
	}
}

char num_to_char(int n)
{
	if (n < 10)
     d7c:	8a 30       	cpi	r24, 0x0A	; 10
     d7e:	91 05       	cpc	r25, r1
     d80:	14 f4       	brge	.+4      	; 0xd86 <num_to_char+0xa>
		return n + 48;
     d82:	80 5d       	subi	r24, 0xD0	; 208
     d84:	08 95       	ret
	if (n < 16)
     d86:	80 31       	cpi	r24, 0x10	; 16
     d88:	91 05       	cpc	r25, r1
     d8a:	14 f4       	brge	.+4      	; 0xd90 <num_to_char+0x14>
		return n + 'A' - 10;
     d8c:	89 5c       	subi	r24, 0xC9	; 201
     d8e:	08 95       	ret
	return 0;
     d90:	80 e0       	ldi	r24, 0x00	; 0
}
     d92:	08 95       	ret

00000d94 <char_to_num>:

int char_to_num(char c)
{
	if (c >= 'A' && c <= 'F')
     d94:	9f eb       	ldi	r25, 0xBF	; 191
     d96:	98 0f       	add	r25, r24
     d98:	96 30       	cpi	r25, 0x06	; 6
     d9a:	18 f4       	brcc	.+6      	; 0xda2 <char_to_num+0xe>
		return c - 'A' + 10;
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	c7 97       	sbiw	r24, 0x37	; 55
     da0:	08 95       	ret
	return c - '0';
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	c0 97       	sbiw	r24, 0x30	; 48
}
     da6:	08 95       	ret

00000da8 <convert>:

int convert(int system,  char *number)
{
     da8:	8f 92       	push	r8
     daa:	9f 92       	push	r9
     dac:	af 92       	push	r10
     dae:	bf 92       	push	r11
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	7c 01       	movw	r14, r24
     dc2:	4b 01       	movw	r8, r22
	int n = 0;
	int negate = -(number[0] == '-');
     dc4:	c1 e0       	ldi	r28, 0x01	; 1
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
     dc8:	fb 01       	movw	r30, r22
     dca:	80 81       	ld	r24, Z
     dcc:	8d 32       	cpi	r24, 0x2D	; 45
     dce:	11 f0       	breq	.+4      	; 0xdd4 <convert+0x2c>
     dd0:	c0 e0       	ldi	r28, 0x00	; 0
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
     dd4:	5e 01       	movw	r10, r28
     dd6:	cc 24       	eor	r12, r12
     dd8:	dd 24       	eor	r13, r13
     dda:	cc 1a       	sub	r12, r28
     ddc:	dd 0a       	sbc	r13, r29
	return c - '0';
}

int convert(int system,  char *number)
{
	int n = 0;
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
	int negate = -(number[0] == '-');
	for (int i = -negate; number[i] != '_'; i++)
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <convert+0x56>
	{
		n = n * system + char_to_num(number[i]);
     de4:	2e 9d       	mul	r18, r14
     de6:	80 01       	movw	r16, r0
     de8:	2f 9d       	mul	r18, r15
     dea:	10 0d       	add	r17, r0
     dec:	3e 9d       	mul	r19, r14
     dee:	10 0d       	add	r17, r0
     df0:	11 24       	eor	r1, r1
     df2:	0e 94 ca 06 	call	0xd94	; 0xd94 <char_to_num>
     df6:	98 01       	movw	r18, r16
     df8:	28 0f       	add	r18, r24
     dfa:	39 1f       	adc	r19, r25

int convert(int system,  char *number)
{
	int n = 0;
	int negate = -(number[0] == '-');
	for (int i = -negate; number[i] != '_'; i++)
     dfc:	21 96       	adiw	r28, 0x01	; 1
     dfe:	f4 01       	movw	r30, r8
     e00:	ec 0f       	add	r30, r28
     e02:	fd 1f       	adc	r31, r29
     e04:	80 81       	ld	r24, Z
     e06:	8f 35       	cpi	r24, 0x5F	; 95
     e08:	69 f7       	brne	.-38     	; 0xde4 <convert+0x3c>
	{
		n = n * system + char_to_num(number[i]);
	}
	
	return n + negate ^ negate;
     e0a:	c9 01       	movw	r24, r18
     e0c:	8a 19       	sub	r24, r10
     e0e:	9b 09       	sbc	r25, r11
}
     e10:	8c 25       	eor	r24, r12
     e12:	9d 25       	eor	r25, r13
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	bf 90       	pop	r11
     e26:	af 90       	pop	r10
     e28:	9f 90       	pop	r9
     e2a:	8f 90       	pop	r8
     e2c:	08 95       	ret

00000e2e <convert_system>:

void convert_system(int res, int system, char *out)
{
     e2e:	8f 92       	push	r8
     e30:	9f 92       	push	r9
     e32:	af 92       	push	r10
     e34:	bf 92       	push	r11
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	7c 01       	movw	r14, r24
     e48:	8b 01       	movw	r16, r22
     e4a:	6a 01       	movw	r12, r20
	int n = 0, i = 0;
	char negative = res < 0;
	res = abs(res);
     e4c:	99 23       	and	r25, r25
     e4e:	24 f4       	brge	.+8      	; 0xe58 <convert_system+0x2a>
     e50:	88 27       	eor	r24, r24
     e52:	99 27       	eor	r25, r25
     e54:	8e 19       	sub	r24, r14
     e56:	9f 09       	sbc	r25, r15
	return n + negate ^ negate;
}

void convert_system(int res, int system, char *out)
{
	int n = 0, i = 0;
     e58:	a1 2c       	mov	r10, r1
     e5a:	b1 2c       	mov	r11, r1
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <convert_system+0x32>
	char negative = res < 0;
	res = abs(res);
	do
	{
		n = res % system;
		out[i++] = num_to_char(n);
     e5e:	5e 01       	movw	r10, r28
	int n = 0, i = 0;
	char negative = res < 0;
	res = abs(res);
	do
	{
		n = res % system;
     e60:	b8 01       	movw	r22, r16
     e62:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divmodhi4>
     e66:	86 2e       	mov	r8, r22
     e68:	97 2e       	mov	r9, r23
		out[i++] = num_to_char(n);
     e6a:	e5 01       	movw	r28, r10
     e6c:	21 96       	adiw	r28, 0x01	; 1
     e6e:	0e 94 be 06 	call	0xd7c	; 0xd7c <num_to_char>
     e72:	f6 01       	movw	r30, r12
     e74:	ea 0d       	add	r30, r10
     e76:	fb 1d       	adc	r31, r11
     e78:	80 83       	st	Z, r24
		res /= system;
     e7a:	88 2d       	mov	r24, r8
     e7c:	99 2d       	mov	r25, r9
	}
	while (res != 0);
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	71 f7       	brne	.-36     	; 0xe5e <convert_system+0x30>
	if (negative)
     e82:	ff 20       	and	r15, r15
     e84:	34 f4       	brge	.+12     	; 0xe92 <convert_system+0x64>
		out[i++] = '-';
     e86:	cc 0d       	add	r28, r12
     e88:	dd 1d       	adc	r29, r13
     e8a:	8d e2       	ldi	r24, 0x2D	; 45
     e8c:	88 83       	st	Y, r24
     e8e:	e5 01       	movw	r28, r10
     e90:	22 96       	adiw	r28, 0x02	; 2
	out[i] = 0;
     e92:	cc 0d       	add	r28, r12
     e94:	dd 1d       	adc	r29, r13
     e96:	18 82       	st	Y, r1
	strrev(out);
     e98:	c6 01       	movw	r24, r12
     e9a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <strrev>
	out[i] = '_';
     e9e:	8f e5       	ldi	r24, 0x5F	; 95
     ea0:	88 83       	st	Y, r24
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	08 95       	ret

00000ebc <calculate>:

int calculate(int a, int b, char sign)
{
	int result = 0;
	
	if (sign == '+') result = a + b;
     ebc:	4b 32       	cpi	r20, 0x2B	; 43
     ebe:	21 f4       	brne	.+8      	; 0xec8 <calculate+0xc>
     ec0:	9c 01       	movw	r18, r24
     ec2:	26 0f       	add	r18, r22
     ec4:	37 1f       	adc	r19, r23
     ec6:	18 c0       	rjmp	.+48     	; 0xef8 <calculate+0x3c>
	else if (sign == '-') result = a - b;
     ec8:	4d 32       	cpi	r20, 0x2D	; 45
     eca:	21 f4       	brne	.+8      	; 0xed4 <calculate+0x18>
     ecc:	9c 01       	movw	r18, r24
     ece:	26 1b       	sub	r18, r22
     ed0:	37 0b       	sbc	r19, r23
     ed2:	12 c0       	rjmp	.+36     	; 0xef8 <calculate+0x3c>
	else if (sign == '/') result = a / b;
     ed4:	4f 32       	cpi	r20, 0x2F	; 47
     ed6:	21 f4       	brne	.+8      	; 0xee0 <calculate+0x24>
     ed8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__divmodhi4>
     edc:	9b 01       	movw	r18, r22
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <calculate+0x3c>
	else if (sign == 'x') result = a * b;
     ee0:	48 37       	cpi	r20, 0x78	; 120
     ee2:	41 f4       	brne	.+16     	; 0xef4 <calculate+0x38>
     ee4:	86 9f       	mul	r24, r22
     ee6:	90 01       	movw	r18, r0
     ee8:	87 9f       	mul	r24, r23
     eea:	30 0d       	add	r19, r0
     eec:	96 9f       	mul	r25, r22
     eee:	30 0d       	add	r19, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <calculate+0x3c>
}


int calculate(int a, int b, char sign)
{
	int result = 0;
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
	else if (sign == '-') result = a - b;
	else if (sign == '/') result = a / b;
	else if (sign == 'x') result = a * b;
	
	return result;
}
     ef8:	c9 01       	movw	r24, r18
     efa:	08 95       	ret

00000efc <get_clicked_number>:

char get_clicked_number(int cnt, int system)
{
	if (cnt < MAX_CHARS)
     efc:	40 97       	sbiw	r24, 0x10	; 16
     efe:	0c f0       	brlt	.+2      	; 0xf02 <get_clicked_number+0x6>
     f00:	17 c1       	rjmp	.+558    	; 0x1130 <get_clicked_number+0x234>
	{
		if (system >= 16)
     f02:	60 31       	cpi	r22, 0x10	; 16
     f04:	71 05       	cpc	r23, r1
     f06:	0c f4       	brge	.+2      	; 0xf0a <get_clicked_number+0xe>
     f08:	6c c0       	rjmp	.+216    	; 0xfe2 <get_clicked_number+0xe6>
		{
			//A
			if (T_X >= 200 && T_X < 240 && T_Y >= 276 && T_Y < 320)
     f0a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
     f0e:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
     f12:	9c 01       	movw	r18, r24
     f14:	28 5c       	subi	r18, 0xC8	; 200
     f16:	31 09       	sbc	r19, r1
     f18:	28 32       	cpi	r18, 0x28	; 40
     f1a:	31 05       	cpc	r19, r1
     f1c:	60 f4       	brcc	.+24     	; 0xf36 <get_clicked_number+0x3a>
     f1e:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
     f22:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
     f26:	24 31       	cpi	r18, 0x14	; 20
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	34 07       	cpc	r19, r20
     f2c:	20 f0       	brcs	.+8      	; 0xf36 <get_clicked_number+0x3a>
     f2e:	20 34       	cpi	r18, 0x40	; 64
     f30:	31 40       	sbci	r19, 0x01	; 1
     f32:	08 f4       	brcc	.+2      	; 0xf36 <get_clicked_number+0x3a>
     f34:	ff c0       	rjmp	.+510    	; 0x1134 <get_clicked_number+0x238>
			{
				return 'A';
			}
		
			//B
			else if (T_X >= 160 && T_X < 200 && T_Y >= 276 && T_Y < 320)
     f36:	9c 01       	movw	r18, r24
     f38:	20 5a       	subi	r18, 0xA0	; 160
     f3a:	31 09       	sbc	r19, r1
     f3c:	28 32       	cpi	r18, 0x28	; 40
     f3e:	31 05       	cpc	r19, r1
     f40:	60 f4       	brcc	.+24     	; 0xf5a <get_clicked_number+0x5e>
     f42:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
     f46:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
     f4a:	24 31       	cpi	r18, 0x14	; 20
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	34 07       	cpc	r19, r20
     f50:	20 f0       	brcs	.+8      	; 0xf5a <get_clicked_number+0x5e>
     f52:	20 34       	cpi	r18, 0x40	; 64
     f54:	31 40       	sbci	r19, 0x01	; 1
     f56:	08 f4       	brcc	.+2      	; 0xf5a <get_clicked_number+0x5e>
     f58:	ef c0       	rjmp	.+478    	; 0x1138 <get_clicked_number+0x23c>
			{
				return 'B';
			}
		
			//C
			else if (T_X >= 120 && T_X < 160 && T_Y >= 276 && T_Y < 320)
     f5a:	9c 01       	movw	r18, r24
     f5c:	28 57       	subi	r18, 0x78	; 120
     f5e:	31 09       	sbc	r19, r1
     f60:	28 32       	cpi	r18, 0x28	; 40
     f62:	31 05       	cpc	r19, r1
     f64:	60 f4       	brcc	.+24     	; 0xf7e <get_clicked_number+0x82>
     f66:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
     f6a:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
     f6e:	24 31       	cpi	r18, 0x14	; 20
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	34 07       	cpc	r19, r20
     f74:	20 f0       	brcs	.+8      	; 0xf7e <get_clicked_number+0x82>
     f76:	20 34       	cpi	r18, 0x40	; 64
     f78:	31 40       	sbci	r19, 0x01	; 1
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <get_clicked_number+0x82>
     f7c:	df c0       	rjmp	.+446    	; 0x113c <get_clicked_number+0x240>
			{
				return 'C';
			}
		
			//D
			else if (T_X >= 80 && T_X < 120 && T_Y >= 276 && T_Y < 320)
     f7e:	9c 01       	movw	r18, r24
     f80:	20 55       	subi	r18, 0x50	; 80
     f82:	31 09       	sbc	r19, r1
     f84:	28 32       	cpi	r18, 0x28	; 40
     f86:	31 05       	cpc	r19, r1
     f88:	60 f4       	brcc	.+24     	; 0xfa2 <get_clicked_number+0xa6>
     f8a:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
     f8e:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
     f92:	24 31       	cpi	r18, 0x14	; 20
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	34 07       	cpc	r19, r20
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <get_clicked_number+0xa6>
     f9a:	20 34       	cpi	r18, 0x40	; 64
     f9c:	31 40       	sbci	r19, 0x01	; 1
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <get_clicked_number+0xa6>
     fa0:	cf c0       	rjmp	.+414    	; 0x1140 <get_clicked_number+0x244>
			{
				return 'D';
			}
		
			//E
			else if (T_X >= 40 && T_X < 80 && T_Y >= 276 && T_Y < 320)
     fa2:	9c 01       	movw	r18, r24
     fa4:	28 52       	subi	r18, 0x28	; 40
     fa6:	31 09       	sbc	r19, r1
     fa8:	28 32       	cpi	r18, 0x28	; 40
     faa:	31 05       	cpc	r19, r1
     fac:	60 f4       	brcc	.+24     	; 0xfc6 <get_clicked_number+0xca>
     fae:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
     fb2:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
     fb6:	24 31       	cpi	r18, 0x14	; 20
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	34 07       	cpc	r19, r20
     fbc:	20 f0       	brcs	.+8      	; 0xfc6 <get_clicked_number+0xca>
     fbe:	20 34       	cpi	r18, 0x40	; 64
     fc0:	31 40       	sbci	r19, 0x01	; 1
     fc2:	08 f4       	brcc	.+2      	; 0xfc6 <get_clicked_number+0xca>
     fc4:	bf c0       	rjmp	.+382    	; 0x1144 <get_clicked_number+0x248>
			{
				return 'E';
			}
		
			//F
			else if (T_X < 40 && T_Y >= 276 && T_Y < 320)
     fc6:	88 97       	sbiw	r24, 0x28	; 40
     fc8:	60 f4       	brcc	.+24     	; 0xfe2 <get_clicked_number+0xe6>
     fca:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
     fce:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
     fd2:	84 31       	cpi	r24, 0x14	; 20
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	92 07       	cpc	r25, r18
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <get_clicked_number+0xe6>
     fda:	80 34       	cpi	r24, 0x40	; 64
     fdc:	91 40       	sbci	r25, 0x01	; 1
     fde:	08 f4       	brcc	.+2      	; 0xfe2 <get_clicked_number+0xe6>
     fe0:	b3 c0       	rjmp	.+358    	; 0x1148 <get_clicked_number+0x24c>
			{
				return 'F';
			}
		}
		
		if (system >= 10)
     fe2:	6a 30       	cpi	r22, 0x0A	; 10
     fe4:	71 05       	cpc	r23, r1
     fe6:	1c f1       	brlt	.+70     	; 0x102e <get_clicked_number+0x132>
		{
			//8
			if (T_X >= 120 && T_X < 180 && T_Y >= 100 && T_Y < 144)
     fe8:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
     fec:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
     ff0:	9c 01       	movw	r18, r24
     ff2:	28 57       	subi	r18, 0x78	; 120
     ff4:	31 09       	sbc	r19, r1
     ff6:	2c 33       	cpi	r18, 0x3C	; 60
     ff8:	31 05       	cpc	r19, r1
     ffa:	58 f4       	brcc	.+22     	; 0x1012 <get_clicked_number+0x116>
     ffc:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
    1000:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
    1004:	24 36       	cpi	r18, 0x64	; 100
    1006:	31 05       	cpc	r19, r1
    1008:	20 f0       	brcs	.+8      	; 0x1012 <get_clicked_number+0x116>
    100a:	20 39       	cpi	r18, 0x90	; 144
    100c:	31 05       	cpc	r19, r1
    100e:	08 f4       	brcc	.+2      	; 0x1012 <get_clicked_number+0x116>
    1010:	9d c0       	rjmp	.+314    	; 0x114c <get_clicked_number+0x250>
			{
				return '8';
			}
			
			//9
			else if (T_X >= 60 && T_X < 120 && T_Y >= 100 && T_Y < 144)
    1012:	cc 97       	sbiw	r24, 0x3c	; 60
    1014:	cc 97       	sbiw	r24, 0x3c	; 60
    1016:	58 f4       	brcc	.+22     	; 0x102e <get_clicked_number+0x132>
    1018:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    101c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    1020:	84 36       	cpi	r24, 0x64	; 100
    1022:	91 05       	cpc	r25, r1
    1024:	20 f0       	brcs	.+8      	; 0x102e <get_clicked_number+0x132>
    1026:	80 39       	cpi	r24, 0x90	; 144
    1028:	91 05       	cpc	r25, r1
    102a:	08 f4       	brcc	.+2      	; 0x102e <get_clicked_number+0x132>
    102c:	91 c0       	rjmp	.+290    	; 0x1150 <get_clicked_number+0x254>
			{
				return '9';
			}
		}
		
		if (system >= 8)
    102e:	68 30       	cpi	r22, 0x08	; 8
    1030:	71 05       	cpc	r23, r1
    1032:	0c f4       	brge	.+2      	; 0x1036 <get_clicked_number+0x13a>
    1034:	5d c0       	rjmp	.+186    	; 0x10f0 <get_clicked_number+0x1f4>
		{
			//2
			if (T_X >= 120 && T_X < 180 && T_Y >= 188 && T_Y < 232)
    1036:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    103a:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    103e:	9c 01       	movw	r18, r24
    1040:	28 57       	subi	r18, 0x78	; 120
    1042:	31 09       	sbc	r19, r1
    1044:	2c 33       	cpi	r18, 0x3C	; 60
    1046:	31 05       	cpc	r19, r1
    1048:	58 f4       	brcc	.+22     	; 0x1060 <get_clicked_number+0x164>
    104a:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <T_Y>
    104e:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <T_Y+0x1>
    1052:	4c 3b       	cpi	r20, 0xBC	; 188
    1054:	51 05       	cpc	r21, r1
    1056:	20 f0       	brcs	.+8      	; 0x1060 <get_clicked_number+0x164>
    1058:	48 3e       	cpi	r20, 0xE8	; 232
    105a:	51 05       	cpc	r21, r1
    105c:	08 f4       	brcc	.+2      	; 0x1060 <get_clicked_number+0x164>
    105e:	7a c0       	rjmp	.+244    	; 0x1154 <get_clicked_number+0x258>
			{
				return '2';
			}
		
			//3
			else if (T_X >= 60 && T_X < 120 && T_Y >= 188 && T_Y < 232)
    1060:	ac 01       	movw	r20, r24
    1062:	4c 53       	subi	r20, 0x3C	; 60
    1064:	51 09       	sbc	r21, r1
    1066:	4c 33       	cpi	r20, 0x3C	; 60
    1068:	51 05       	cpc	r21, r1
    106a:	58 f4       	brcc	.+22     	; 0x1082 <get_clicked_number+0x186>
    106c:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <T_Y>
    1070:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <T_Y+0x1>
    1074:	6c 3b       	cpi	r22, 0xBC	; 188
    1076:	71 05       	cpc	r23, r1
    1078:	20 f0       	brcs	.+8      	; 0x1082 <get_clicked_number+0x186>
    107a:	68 3e       	cpi	r22, 0xE8	; 232
    107c:	71 05       	cpc	r23, r1
    107e:	08 f4       	brcc	.+2      	; 0x1082 <get_clicked_number+0x186>
    1080:	6b c0       	rjmp	.+214    	; 0x1158 <get_clicked_number+0x25c>
			{
				return '3';
			}
	
			//4
			else if (T_X >= 180 && T_Y >= 144 && T_Y < 188)
    1082:	84 3b       	cpi	r24, 0xB4	; 180
    1084:	91 05       	cpc	r25, r1
    1086:	58 f0       	brcs	.+22     	; 0x109e <get_clicked_number+0x1a2>
    1088:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <T_Y>
    108c:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <T_Y+0x1>
    1090:	60 39       	cpi	r22, 0x90	; 144
    1092:	71 05       	cpc	r23, r1
    1094:	20 f0       	brcs	.+8      	; 0x109e <get_clicked_number+0x1a2>
    1096:	6c 3b       	cpi	r22, 0xBC	; 188
    1098:	71 05       	cpc	r23, r1
    109a:	08 f4       	brcc	.+2      	; 0x109e <get_clicked_number+0x1a2>
    109c:	5f c0       	rjmp	.+190    	; 0x115c <get_clicked_number+0x260>
			{
				return '4';
			}
		
			//5
			else if (T_X >= 120 && T_X < 180 && T_Y >= 144 && T_Y < 188)
    109e:	2c 33       	cpi	r18, 0x3C	; 60
    10a0:	31 05       	cpc	r19, r1
    10a2:	58 f4       	brcc	.+22     	; 0x10ba <get_clicked_number+0x1be>
    10a4:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
    10a8:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
    10ac:	20 39       	cpi	r18, 0x90	; 144
    10ae:	31 05       	cpc	r19, r1
    10b0:	20 f0       	brcs	.+8      	; 0x10ba <get_clicked_number+0x1be>
    10b2:	2c 3b       	cpi	r18, 0xBC	; 188
    10b4:	31 05       	cpc	r19, r1
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <get_clicked_number+0x1be>
    10b8:	53 c0       	rjmp	.+166    	; 0x1160 <get_clicked_number+0x264>
			{
				return '5';
			}
		
			//6
			else if (T_X >= 60 && T_X < 120 && T_Y >= 144 && T_Y < 188)
    10ba:	4c 33       	cpi	r20, 0x3C	; 60
    10bc:	51 05       	cpc	r21, r1
    10be:	58 f4       	brcc	.+22     	; 0x10d6 <get_clicked_number+0x1da>
    10c0:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
    10c4:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
    10c8:	20 39       	cpi	r18, 0x90	; 144
    10ca:	31 05       	cpc	r19, r1
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <get_clicked_number+0x1da>
    10ce:	2c 3b       	cpi	r18, 0xBC	; 188
    10d0:	31 05       	cpc	r19, r1
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <get_clicked_number+0x1da>
    10d4:	47 c0       	rjmp	.+142    	; 0x1164 <get_clicked_number+0x268>
			{
				return '6';
			}
		
			//7
			else if (T_X >= 180 && T_Y >= 100 && T_Y < 144)
    10d6:	84 3b       	cpi	r24, 0xB4	; 180
    10d8:	91 05       	cpc	r25, r1
    10da:	50 f0       	brcs	.+20     	; 0x10f0 <get_clicked_number+0x1f4>
    10dc:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    10e0:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    10e4:	84 36       	cpi	r24, 0x64	; 100
    10e6:	91 05       	cpc	r25, r1
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <get_clicked_number+0x1f4>
    10ea:	80 39       	cpi	r24, 0x90	; 144
    10ec:	91 05       	cpc	r25, r1
    10ee:	e0 f1       	brcs	.+120    	; 0x1168 <get_clicked_number+0x26c>
			}
		}
	
		
		//0
		if (T_X >= 180 && T_Y >= 232 && T_Y < 276)
    10f0:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    10f4:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    10f8:	84 3b       	cpi	r24, 0xB4	; 180
    10fa:	91 05       	cpc	r25, r1
    10fc:	50 f0       	brcs	.+20     	; 0x1112 <get_clicked_number+0x216>
    10fe:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
    1102:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
    1106:	28 3e       	cpi	r18, 0xE8	; 232
    1108:	31 05       	cpc	r19, r1
    110a:	18 f0       	brcs	.+6      	; 0x1112 <get_clicked_number+0x216>
    110c:	24 31       	cpi	r18, 0x14	; 20
    110e:	31 40       	sbci	r19, 0x01	; 1
    1110:	68 f1       	brcs	.+90     	; 0x116c <get_clicked_number+0x270>
		{
			return '0';
		}
	
		//1
		else if (T_X >= 180 && T_Y >= 188 && T_Y < 232)
    1112:	84 3b       	cpi	r24, 0xB4	; 180
    1114:	91 05       	cpc	r25, r1
    1116:	60 f1       	brcs	.+88     	; 0x1170 <get_clicked_number+0x274>
    1118:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    111c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    1120:	8c 3b       	cpi	r24, 0xBC	; 188
    1122:	91 05       	cpc	r25, r1
    1124:	38 f1       	brcs	.+78     	; 0x1174 <get_clicked_number+0x278>
    1126:	88 3e       	cpi	r24, 0xE8	; 232
    1128:	91 05       	cpc	r25, r1
    112a:	30 f1       	brcs	.+76     	; 0x1178 <get_clicked_number+0x27c>
		{
			return '1';
		}
	}
	return 0;
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	08 95       	ret
		if (system >= 16)
		{
			//A
			if (T_X >= 200 && T_X < 240 && T_Y >= 276 && T_Y < 320)
			{
				return 'A';
    1134:	81 e4       	ldi	r24, 0x41	; 65
    1136:	08 95       	ret
			}
		
			//B
			else if (T_X >= 160 && T_X < 200 && T_Y >= 276 && T_Y < 320)
			{
				return 'B';
    1138:	82 e4       	ldi	r24, 0x42	; 66
    113a:	08 95       	ret
			}
		
			//C
			else if (T_X >= 120 && T_X < 160 && T_Y >= 276 && T_Y < 320)
			{
				return 'C';
    113c:	83 e4       	ldi	r24, 0x43	; 67
    113e:	08 95       	ret
			}
		
			//D
			else if (T_X >= 80 && T_X < 120 && T_Y >= 276 && T_Y < 320)
			{
				return 'D';
    1140:	84 e4       	ldi	r24, 0x44	; 68
    1142:	08 95       	ret
			}
		
			//E
			else if (T_X >= 40 && T_X < 80 && T_Y >= 276 && T_Y < 320)
			{
				return 'E';
    1144:	85 e4       	ldi	r24, 0x45	; 69
    1146:	08 95       	ret
			}
		
			//F
			else if (T_X < 40 && T_Y >= 276 && T_Y < 320)
			{
				return 'F';
    1148:	86 e4       	ldi	r24, 0x46	; 70
    114a:	08 95       	ret
		if (system >= 10)
		{
			//8
			if (T_X >= 120 && T_X < 180 && T_Y >= 100 && T_Y < 144)
			{
				return '8';
    114c:	88 e3       	ldi	r24, 0x38	; 56
    114e:	08 95       	ret
			}
			
			//9
			else if (T_X >= 60 && T_X < 120 && T_Y >= 100 && T_Y < 144)
			{
				return '9';
    1150:	89 e3       	ldi	r24, 0x39	; 57
    1152:	08 95       	ret
		if (system >= 8)
		{
			//2
			if (T_X >= 120 && T_X < 180 && T_Y >= 188 && T_Y < 232)
			{
				return '2';
    1154:	82 e3       	ldi	r24, 0x32	; 50
    1156:	08 95       	ret
			}
		
			//3
			else if (T_X >= 60 && T_X < 120 && T_Y >= 188 && T_Y < 232)
			{
				return '3';
    1158:	83 e3       	ldi	r24, 0x33	; 51
    115a:	08 95       	ret
			}
	
			//4
			else if (T_X >= 180 && T_Y >= 144 && T_Y < 188)
			{
				return '4';
    115c:	84 e3       	ldi	r24, 0x34	; 52
    115e:	08 95       	ret
			}
		
			//5
			else if (T_X >= 120 && T_X < 180 && T_Y >= 144 && T_Y < 188)
			{
				return '5';
    1160:	85 e3       	ldi	r24, 0x35	; 53
    1162:	08 95       	ret
			}
		
			//6
			else if (T_X >= 60 && T_X < 120 && T_Y >= 144 && T_Y < 188)
			{
				return '6';
    1164:	86 e3       	ldi	r24, 0x36	; 54
    1166:	08 95       	ret
			}
		
			//7
			else if (T_X >= 180 && T_Y >= 100 && T_Y < 144)
			{
				return '7';
    1168:	87 e3       	ldi	r24, 0x37	; 55
    116a:	08 95       	ret
	
		
		//0
		if (T_X >= 180 && T_Y >= 232 && T_Y < 276)
		{
			return '0';
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	08 95       	ret
		else if (T_X >= 180 && T_Y >= 188 && T_Y < 232)
		{
			return '1';
		}
	}
	return 0;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret
		}
	
		//1
		else if (T_X >= 180 && T_Y >= 188 && T_Y < 232)
		{
			return '1';
    1178:	81 e3       	ldi	r24, 0x31	; 49
		}
	}
	return 0;
}
    117a:	08 95       	ret

0000117c <main>:

int main(void)
{
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	60 97       	sbiw	r28, 0x10	; 16
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
	init();
    1190:	0e 94 00 05 	call	0xa00	; 0xa00 <init>
	int cnt = 0;
	int calc = 0;
	char sign = '_';
	char res_print[MAX_CHARS];
	int print_calculated = 0;
	int remember_ans = 0;
    1194:	61 2c       	mov	r6, r1
    1196:	71 2c       	mov	r7, r1
	int res = 0, system = 10;
	int cnt = 0;
	int calc = 0;
	char sign = '_';
	char res_print[MAX_CHARS];
	int print_calculated = 0;
    1198:	81 2c       	mov	r8, r1
    119a:	91 2c       	mov	r9, r1
	init();
	
	int res = 0, system = 10;
	int cnt = 0;
	int calc = 0;
	char sign = '_';
    119c:	0f 2e       	mov	r0, r31
    119e:	ff e5       	ldi	r31, 0x5F	; 95
    11a0:	3f 2e       	mov	r3, r31
    11a2:	f0 2d       	mov	r31, r0
{
	init();
	
	int res = 0, system = 10;
	int cnt = 0;
	int calc = 0;
    11a4:	41 2c       	mov	r4, r1
    11a6:	51 2c       	mov	r5, r1
int main(void)
{
	init();
	
	int res = 0, system = 10;
	int cnt = 0;
    11a8:	c1 2c       	mov	r12, r1
    11aa:	d1 2c       	mov	r13, r1

int main(void)
{
	init();
	
	int res = 0, system = 10;
    11ac:	0f 2e       	mov	r0, r31
    11ae:	fa e0       	ldi	r31, 0x0A	; 10
    11b0:	af 2e       	mov	r10, r31
    11b2:	b1 2c       	mov	r11, r1
    11b4:	f0 2d       	mov	r31, r0
	int remember_ans = 0;
	
    while (1) 
    {
		
		if (getBit(PIND, T_IRQ) == 0)
    11b6:	80 b3       	in	r24, 0x10	; 16
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 49 00 	call	0x92	; 0x92 <getBit>
    11c2:	81 11       	cpse	r24, r1
    11c4:	f8 cf       	rjmp	.-16     	; 0x11b6 <main+0x3a>
		{
			touch_read_xy();
    11c6:	0e 94 99 00 	call	0x132	; 0x132 <touch_read_xy>
			
			T_X = (T_X - 80) / 8;
    11ca:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    11ce:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    11d2:	80 55       	subi	r24, 0x50	; 80
    11d4:	91 09       	sbc	r25, r1
    11d6:	96 95       	lsr	r25
    11d8:	87 95       	ror	r24
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <T_X+0x1>
    11e6:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <T_X>
			T_Y = (T_Y - 80) / 6;
    11ea:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
    11ee:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
    11f2:	20 55       	subi	r18, 0x50	; 80
    11f4:	31 09       	sbc	r19, r1
    11f6:	ab ea       	ldi	r26, 0xAB	; 171
    11f8:	ba ea       	ldi	r27, 0xAA	; 170
    11fa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__umulhisi3>
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <T_Y+0x1>
    120a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <T_Y>
    120e:	2f ef       	ldi	r18, 0xFF	; 255
    1210:	4f e3       	ldi	r20, 0x3F	; 63
    1212:	8b e0       	ldi	r24, 0x0B	; 11
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	40 40       	sbci	r20, 0x00	; 0
    1218:	80 40       	sbci	r24, 0x00	; 0
    121a:	e1 f7       	brne	.-8      	; 0x1214 <main+0x98>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <main+0xa2>
    121e:	00 00       	nop
			
			_delay_ms(500);
			
			//HEX
			if (T_X <= 60 && T_X > 0 && T_Y <= 40 && T_Y > 0)
    1220:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    1224:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	cc 97       	sbiw	r24, 0x3c	; 60
    122c:	c0 f4       	brcc	.+48     	; 0x125e <main+0xe2>
    122e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    1232:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    1236:	89 32       	cpi	r24, 0x29	; 41
    1238:	91 05       	cpc	r25, r1
    123a:	88 f4       	brcc	.+34     	; 0x125e <main+0xe2>
    123c:	89 2b       	or	r24, r25
    123e:	79 f0       	breq	.+30     	; 0x125e <main+0xe2>
			{
				int number = convert(system, number_1);
    1240:	61 e7       	ldi	r22, 0x71	; 113
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	c5 01       	movw	r24, r10
    1246:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
				system = 16;
				convert_system(number, system, number_1);
    124a:	41 e7       	ldi	r20, 0x71	; 113
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	60 e1       	ldi	r22, 0x10	; 16
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	0e 94 17 07 	call	0xe2e	; 0xe2e <convert_system>
			
			//HEX
			if (T_X <= 60 && T_X > 0 && T_Y <= 40 && T_Y > 0)
			{
				int number = convert(system, number_1);
				system = 16;
    1256:	68 94       	set
    1258:	aa 24       	eor	r10, r10
    125a:	a4 f8       	bld	r10, 4
    125c:	b1 2c       	mov	r11, r1
				convert_system(number, system, number_1);
				
			}
			
			//DEC
			if (T_X >= 60 && T_X < 120 && T_Y <= 40 && T_Y > 0)
    125e:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    1262:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    1266:	cc 97       	sbiw	r24, 0x3c	; 60
    1268:	cc 97       	sbiw	r24, 0x3c	; 60
    126a:	c8 f4       	brcc	.+50     	; 0x129e <main+0x122>
    126c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    1270:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    1274:	89 32       	cpi	r24, 0x29	; 41
    1276:	91 05       	cpc	r25, r1
    1278:	90 f4       	brcc	.+36     	; 0x129e <main+0x122>
    127a:	89 2b       	or	r24, r25
    127c:	81 f0       	breq	.+32     	; 0x129e <main+0x122>
			{
				int number = convert(system, number_1);
    127e:	61 e7       	ldi	r22, 0x71	; 113
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	c5 01       	movw	r24, r10
    1284:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
				system = 10;
				convert_system(number, system, number_1);
    1288:	41 e7       	ldi	r20, 0x71	; 113
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	6a e0       	ldi	r22, 0x0A	; 10
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	0e 94 17 07 	call	0xe2e	; 0xe2e <convert_system>
			
			//DEC
			if (T_X >= 60 && T_X < 120 && T_Y <= 40 && T_Y > 0)
			{
				int number = convert(system, number_1);
				system = 10;
    1294:	0f 2e       	mov	r0, r31
    1296:	fa e0       	ldi	r31, 0x0A	; 10
    1298:	af 2e       	mov	r10, r31
    129a:	b1 2c       	mov	r11, r1
    129c:	f0 2d       	mov	r31, r0
				convert_system(number, system, number_1);
			}
			
			//OCT
			if (T_X >= 120 && T_X < 180 && T_Y <= 40 && T_Y > 0)
    129e:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    12a2:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    12a6:	88 57       	subi	r24, 0x78	; 120
    12a8:	91 09       	sbc	r25, r1
    12aa:	cc 97       	sbiw	r24, 0x3c	; 60
    12ac:	c0 f4       	brcc	.+48     	; 0x12de <main+0x162>
    12ae:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    12b2:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    12b6:	89 32       	cpi	r24, 0x29	; 41
    12b8:	91 05       	cpc	r25, r1
    12ba:	88 f4       	brcc	.+34     	; 0x12de <main+0x162>
    12bc:	89 2b       	or	r24, r25
    12be:	79 f0       	breq	.+30     	; 0x12de <main+0x162>
			{
				int number = convert(system, number_1);
    12c0:	61 e7       	ldi	r22, 0x71	; 113
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	c5 01       	movw	r24, r10
    12c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
				system = 8;
				convert_system(number, system, number_1);
    12ca:	41 e7       	ldi	r20, 0x71	; 113
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	68 e0       	ldi	r22, 0x08	; 8
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	0e 94 17 07 	call	0xe2e	; 0xe2e <convert_system>
			
			//OCT
			if (T_X >= 120 && T_X < 180 && T_Y <= 40 && T_Y > 0)
			{
				int number = convert(system, number_1);
				system = 8;
    12d6:	68 94       	set
    12d8:	aa 24       	eor	r10, r10
    12da:	a3 f8       	bld	r10, 3
    12dc:	b1 2c       	mov	r11, r1
				convert_system(number, system, number_1);
			}
			
			//BIN
			if (T_X >= 180 && T_X < 240 && T_Y <= 40 && T_Y > 0)
    12de:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    12e2:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    12e6:	84 5b       	subi	r24, 0xB4	; 180
    12e8:	91 09       	sbc	r25, r1
    12ea:	cc 97       	sbiw	r24, 0x3c	; 60
    12ec:	c0 f4       	brcc	.+48     	; 0x131e <main+0x1a2>
    12ee:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    12f2:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    12f6:	89 32       	cpi	r24, 0x29	; 41
    12f8:	91 05       	cpc	r25, r1
    12fa:	88 f4       	brcc	.+34     	; 0x131e <main+0x1a2>
    12fc:	89 2b       	or	r24, r25
    12fe:	79 f0       	breq	.+30     	; 0x131e <main+0x1a2>
			{
				int number = convert(system, number_1);
    1300:	61 e7       	ldi	r22, 0x71	; 113
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	c5 01       	movw	r24, r10
    1306:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
				system = 2;
				convert_system(number, system, number_1);
    130a:	41 e7       	ldi	r20, 0x71	; 113
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	62 e0       	ldi	r22, 0x02	; 2
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	0e 94 17 07 	call	0xe2e	; 0xe2e <convert_system>
			
			//BIN
			if (T_X >= 180 && T_X < 240 && T_Y <= 40 && T_Y > 0)
			{
				int number = convert(system, number_1);
				system = 2;
    1316:	68 94       	set
    1318:	aa 24       	eor	r10, r10
    131a:	a1 f8       	bld	r10, 1
    131c:	b1 2c       	mov	r11, r1
				convert_system(number, system, number_1);
			}
			
			char cur_num = get_clicked_number(cnt, system);
    131e:	b5 01       	movw	r22, r10
    1320:	c6 01       	movw	r24, r12
    1322:	0e 94 7e 07 	call	0xefc	; 0xefc <get_clicked_number>
			if (cur_num)
    1326:	88 23       	and	r24, r24
    1328:	a9 f0       	breq	.+42     	; 0x1354 <main+0x1d8>
			{
				if (remember_ans)
    132a:	61 14       	cp	r6, r1
    132c:	71 04       	cpc	r7, r1
    132e:	59 f0       	breq	.+22     	; 0x1346 <main+0x1ca>
				{
					strcpy(number_1, BLANK);
    1330:	98 e0       	ldi	r25, 0x08	; 8
    1332:	ee e9       	ldi	r30, 0x9E	; 158
    1334:	f2 e0       	ldi	r31, 0x02	; 2
    1336:	a1 e7       	ldi	r26, 0x71	; 113
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	01 90       	ld	r0, Z+
    133c:	0d 92       	st	X+, r0
    133e:	9a 95       	dec	r25
    1340:	e1 f7       	brne	.-8      	; 0x133a <main+0x1be>
					remember_ans = 0;
    1342:	61 2c       	mov	r6, r1
    1344:	71 2c       	mov	r7, r1
				}
				number_1[cnt++] = cur_num;
    1346:	f6 01       	movw	r30, r12
    1348:	ef 58       	subi	r30, 0x8F	; 143
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 83       	st	Z, r24
    134e:	c6 01       	movw	r24, r12
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	6c 01       	movw	r12, r24
			}
			
			

			if (T_X < 60 && T_Y >= 100 && T_Y < 276)
    1354:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    1358:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    135c:	8c 33       	cpi	r24, 0x3C	; 60
    135e:	91 05       	cpc	r25, r1
    1360:	08 f0       	brcs	.+2      	; 0x1364 <main+0x1e8>
    1362:	7a c0       	rjmp	.+244    	; 0x1458 <main+0x2dc>
    1364:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <T_Y>
    1368:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <T_Y+0x1>
    136c:	24 36       	cpi	r18, 0x64	; 100
    136e:	31 05       	cpc	r19, r1
    1370:	08 f4       	brcc	.+2      	; 0x1374 <main+0x1f8>
    1372:	72 c0       	rjmp	.+228    	; 0x1458 <main+0x2dc>
    1374:	24 31       	cpi	r18, 0x14	; 20
    1376:	41 e0       	ldi	r20, 0x01	; 1
    1378:	34 07       	cpc	r19, r20
    137a:	08 f0       	brcs	.+2      	; 0x137e <main+0x202>
    137c:	6d c0       	rjmp	.+218    	; 0x1458 <main+0x2dc>
			{
				char sign_mem = sign;
					
				// /
				if (T_X < 60 && T_Y >= 100 && T_Y < 144)
    137e:	8c 33       	cpi	r24, 0x3C	; 60
    1380:	91 05       	cpc	r25, r1
    1382:	30 f4       	brcc	.+12     	; 0x1390 <main+0x214>
    1384:	24 36       	cpi	r18, 0x64	; 100
    1386:	31 05       	cpc	r19, r1
    1388:	18 f0       	brcs	.+6      	; 0x1390 <main+0x214>
    138a:	20 39       	cpi	r18, 0x90	; 144
    138c:	31 05       	cpc	r19, r1
    138e:	e0 f0       	brcs	.+56     	; 0x13c8 <main+0x24c>
				{
					sign = '/';
				}
					
				//x
				else if (T_X < 60 && T_Y >= 144 && T_Y < 188)
    1390:	8c 33       	cpi	r24, 0x3C	; 60
    1392:	91 05       	cpc	r25, r1
    1394:	30 f4       	brcc	.+12     	; 0x13a2 <main+0x226>
    1396:	20 39       	cpi	r18, 0x90	; 144
    1398:	31 05       	cpc	r19, r1
    139a:	18 f0       	brcs	.+6      	; 0x13a2 <main+0x226>
    139c:	2c 3b       	cpi	r18, 0xBC	; 188
    139e:	31 05       	cpc	r19, r1
    13a0:	a8 f0       	brcs	.+42     	; 0x13cc <main+0x250>
				{
					sign = 'x';
				}
					
				//+
				else if (T_X < 60 && T_Y >= 188 && T_Y < 232)
    13a2:	8c 33       	cpi	r24, 0x3C	; 60
    13a4:	91 05       	cpc	r25, r1
    13a6:	30 f4       	brcc	.+12     	; 0x13b4 <main+0x238>
    13a8:	2c 3b       	cpi	r18, 0xBC	; 188
    13aa:	31 05       	cpc	r19, r1
    13ac:	18 f0       	brcs	.+6      	; 0x13b4 <main+0x238>
    13ae:	28 3e       	cpi	r18, 0xE8	; 232
    13b0:	31 05       	cpc	r19, r1
    13b2:	70 f0       	brcs	.+28     	; 0x13d0 <main+0x254>
				{
					sign = '+';
				}
					
				//-
				else if (T_X < 60 && T_Y >= 232 && T_Y < 276)
    13b4:	cc 97       	sbiw	r24, 0x3c	; 60
    13b6:	70 f4       	brcc	.+28     	; 0x13d4 <main+0x258>
    13b8:	28 3e       	cpi	r18, 0xE8	; 232
    13ba:	31 05       	cpc	r19, r1
    13bc:	68 f0       	brcs	.+26     	; 0x13d8 <main+0x25c>
    13be:	24 31       	cpi	r18, 0x14	; 20
    13c0:	31 40       	sbci	r19, 0x01	; 1
    13c2:	60 f0       	brcs	.+24     	; 0x13dc <main+0x260>
    13c4:	13 2d       	mov	r17, r3
    13c6:	0b c0       	rjmp	.+22     	; 0x13de <main+0x262>
				char sign_mem = sign;
					
				// /
				if (T_X < 60 && T_Y >= 100 && T_Y < 144)
				{
					sign = '/';
    13c8:	1f e2       	ldi	r17, 0x2F	; 47
    13ca:	09 c0       	rjmp	.+18     	; 0x13de <main+0x262>
				}
					
				//x
				else if (T_X < 60 && T_Y >= 144 && T_Y < 188)
				{
					sign = 'x';
    13cc:	18 e7       	ldi	r17, 0x78	; 120
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <main+0x262>
				}
					
				//+
				else if (T_X < 60 && T_Y >= 188 && T_Y < 232)
				{
					sign = '+';
    13d0:	1b e2       	ldi	r17, 0x2B	; 43
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <main+0x262>
    13d4:	13 2d       	mov	r17, r3
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <main+0x262>
    13d8:	13 2d       	mov	r17, r3
    13da:	01 c0       	rjmp	.+2      	; 0x13de <main+0x262>
				}
					
				//-
				else if (T_X < 60 && T_Y >= 232 && T_Y < 276)
				{
					sign = '-';
    13dc:	1d e2       	ldi	r17, 0x2D	; 45
				}
					
				if (calc)
    13de:	41 14       	cp	r4, r1
    13e0:	51 04       	cpc	r5, r1
    13e2:	21 f1       	breq	.+72     	; 0x142c <main+0x2b0>
				{
					if (sign_mem == '_') sign_mem = sign;
    13e4:	9f e5       	ldi	r25, 0x5F	; 95
    13e6:	39 12       	cpse	r3, r25
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <main+0x270>
    13ea:	31 2e       	mov	r3, r17
						
					int a;
					a = convert(system, number_1);
    13ec:	61 e7       	ldi	r22, 0x71	; 113
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	c5 01       	movw	r24, r10
    13f2:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
						
					res = calculate(number_1_mem, a, sign_mem);
    13f6:	43 2d       	mov	r20, r3
    13f8:	bc 01       	movw	r22, r24
    13fa:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
    13fe:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__data_end+0x1>
    1402:	0e 94 5e 07 	call	0xebc	; 0xebc <calculate>
					number_1_mem = res;
    1406:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__data_end+0x1>
    140a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
					convert_system(res, system, number_1);
    140e:	41 e7       	ldi	r20, 0x71	; 113
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	b5 01       	movw	r22, r10
    1414:	0e 94 17 07 	call	0xe2e	; 0xe2e <convert_system>
    1418:	31 2e       	mov	r3, r17
				{
					number_1_mem = convert(system, number_1);
					calc = 1;
				}
					
				remember_ans = 1;
    141a:	66 24       	eor	r6, r6
    141c:	63 94       	inc	r6
    141e:	71 2c       	mov	r7, r1
				print_calculated = 1;
    1420:	88 24       	eor	r8, r8
    1422:	83 94       	inc	r8
    1424:	91 2c       	mov	r9, r1
				cnt = 0;
    1426:	c1 2c       	mov	r12, r1
    1428:	d1 2c       	mov	r13, r1
    142a:	42 c0       	rjmp	.+132    	; 0x14b0 <main+0x334>
					number_1_mem = res;
					convert_system(res, system, number_1);
				}
				else 
				{
					number_1_mem = convert(system, number_1);
    142c:	61 e7       	ldi	r22, 0x71	; 113
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	c5 01       	movw	r24, r10
    1432:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
    1436:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__data_end+0x1>
    143a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
    143e:	31 2e       	mov	r3, r17
					calc = 1;
				}
					
				remember_ans = 1;
    1440:	66 24       	eor	r6, r6
    1442:	63 94       	inc	r6
    1444:	71 2c       	mov	r7, r1
				print_calculated = 1;
    1446:	88 24       	eor	r8, r8
    1448:	83 94       	inc	r8
    144a:	91 2c       	mov	r9, r1
					convert_system(res, system, number_1);
				}
				else 
				{
					number_1_mem = convert(system, number_1);
					calc = 1;
    144c:	44 24       	eor	r4, r4
    144e:	43 94       	inc	r4
    1450:	51 2c       	mov	r5, r1
				}
					
				remember_ans = 1;
				print_calculated = 1;
				cnt = 0;
    1452:	c1 2c       	mov	r12, r1
    1454:	d1 2c       	mov	r13, r1
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <main+0x334>
				//strcpy(number_1, BLANK);
			}
			//=
			else if (T_X >= 60 && T_X < 120 && T_Y >= 232 && T_Y < 276)
    1458:	cc 97       	sbiw	r24, 0x3c	; 60
    145a:	cc 97       	sbiw	r24, 0x3c	; 60
    145c:	48 f5       	brcc	.+82     	; 0x14b0 <main+0x334>
    145e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    1462:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    1466:	88 3e       	cpi	r24, 0xE8	; 232
    1468:	91 05       	cpc	r25, r1
    146a:	10 f1       	brcs	.+68     	; 0x14b0 <main+0x334>
    146c:	84 31       	cpi	r24, 0x14	; 20
    146e:	91 40       	sbci	r25, 0x01	; 1
    1470:	f8 f4       	brcc	.+62     	; 0x14b0 <main+0x334>
			{
				cnt = 0;
				print_calculated = 1;
					
				int a;
				a = convert(system, number_1);
    1472:	61 e7       	ldi	r22, 0x71	; 113
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	c5 01       	movw	r24, r10
    1478:	0e 94 d4 06 	call	0xda8	; 0xda8 <convert>
					
				res = calculate(number_1_mem, a, sign);
    147c:	43 2d       	mov	r20, r3
    147e:	bc 01       	movw	r22, r24
    1480:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
    1484:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <__data_end+0x1>
    1488:	0e 94 5e 07 	call	0xebc	; 0xebc <calculate>
				number_1_mem = res;
    148c:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <__data_end+0x1>
    1490:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
				//strcpy(number_1, BLANK);
				convert_system(res, system, number_1);
    1494:	41 e7       	ldi	r20, 0x71	; 113
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	b5 01       	movw	r22, r10
    149a:	0e 94 17 07 	call	0xe2e	; 0xe2e <convert_system>
			}
			//=
			else if (T_X >= 60 && T_X < 120 && T_Y >= 232 && T_Y < 276)
			{
				cnt = 0;
				print_calculated = 1;
    149e:	88 24       	eor	r8, r8
    14a0:	83 94       	inc	r8
    14a2:	91 2c       	mov	r9, r1
				res = calculate(number_1_mem, a, sign);
				number_1_mem = res;
				//strcpy(number_1, BLANK);
				convert_system(res, system, number_1);
					
				sign = '_';
    14a4:	0f 2e       	mov	r0, r31
    14a6:	ff e5       	ldi	r31, 0x5F	; 95
    14a8:	3f 2e       	mov	r3, r31
    14aa:	f0 2d       	mov	r31, r0
				//strcpy(number_1, BLANK);
			}
			//=
			else if (T_X >= 60 && T_X < 120 && T_Y >= 232 && T_Y < 276)
			{
				cnt = 0;
    14ac:	c1 2c       	mov	r12, r1
    14ae:	d1 2c       	mov	r13, r1
					
				sign = '_';
			}
						
			//CLR
			if (T_X >= 120 && T_X < 180 && T_Y >= 232 && T_Y < 276)
    14b0:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <T_X>
    14b4:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <T_X+0x1>
    14b8:	88 57       	subi	r24, 0x78	; 120
    14ba:	91 09       	sbc	r25, r1
    14bc:	cc 97       	sbiw	r24, 0x3c	; 60
    14be:	98 f5       	brcc	.+102    	; 0x1526 <main+0x3aa>
    14c0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <T_Y>
    14c4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <T_Y+0x1>
    14c8:	88 3e       	cpi	r24, 0xE8	; 232
    14ca:	91 05       	cpc	r25, r1
    14cc:	60 f1       	brcs	.+88     	; 0x1526 <main+0x3aa>
    14ce:	84 31       	cpi	r24, 0x14	; 20
    14d0:	91 40       	sbci	r25, 0x01	; 1
    14d2:	48 f5       	brcc	.+82     	; 0x1526 <main+0x3aa>
			{
				print_str(20, 60, 3, WHITE, BLACK, "                ");
    14d4:	0f 2e       	mov	r0, r31
    14d6:	f6 ea       	ldi	r31, 0xA6	; 166
    14d8:	ef 2e       	mov	r14, r31
    14da:	f2 e0       	ldi	r31, 0x02	; 2
    14dc:	ff 2e       	mov	r15, r31
    14de:	f0 2d       	mov	r31, r0
    14e0:	00 e0       	ldi	r16, 0x00	; 0
    14e2:	10 e0       	ldi	r17, 0x00	; 0
    14e4:	2f ef       	ldi	r18, 0xFF	; 255
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	43 e0       	ldi	r20, 0x03	; 3
    14ea:	6c e3       	ldi	r22, 0x3C	; 60
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	84 e1       	ldi	r24, 0x14	; 20
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
				
				strcpy(number_1, BLANK);
    14f6:	88 e0       	ldi	r24, 0x08	; 8
    14f8:	ee e9       	ldi	r30, 0x9E	; 158
    14fa:	f2 e0       	ldi	r31, 0x02	; 2
    14fc:	a1 e7       	ldi	r26, 0x71	; 113
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	01 90       	ld	r0, Z+
    1502:	0d 92       	st	X+, r0
    1504:	8a 95       	dec	r24
    1506:	e1 f7       	brne	.-8      	; 0x1500 <main+0x384>
				sign = '_';
				res = 0;
				number_1_mem = 0;
    1508:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <__data_end+0x1>
    150c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <__data_end>
				cnt = 0;
				calc = 0;
				print_calculated = 0;
    1510:	81 2c       	mov	r8, r1
    1512:	91 2c       	mov	r9, r1
			if (T_X >= 120 && T_X < 180 && T_Y >= 232 && T_Y < 276)
			{
				print_str(20, 60, 3, WHITE, BLACK, "                ");
				
				strcpy(number_1, BLANK);
				sign = '_';
    1514:	0f 2e       	mov	r0, r31
    1516:	ff e5       	ldi	r31, 0x5F	; 95
    1518:	3f 2e       	mov	r3, r31
    151a:	f0 2d       	mov	r31, r0
				res = 0;
				number_1_mem = 0;
				cnt = 0;
				calc = 0;
    151c:	41 2c       	mov	r4, r1
    151e:	51 2c       	mov	r5, r1
				
				strcpy(number_1, BLANK);
				sign = '_';
				res = 0;
				number_1_mem = 0;
				cnt = 0;
    1520:	c1 2c       	mov	r12, r1
    1522:	d1 2c       	mov	r13, r1
				calc = 0;
				print_calculated = 0;
				continue;
    1524:	48 ce       	rjmp	.-880    	; 0x11b6 <main+0x3a>
			}
			
			if (!print_calculated)
    1526:	81 14       	cp	r8, r1
    1528:	91 04       	cpc	r9, r1
    152a:	91 f4       	brne	.+36     	; 0x1550 <main+0x3d4>
			{
				print_str(20, 60, 3, WHITE, BLACK, "                ");
    152c:	0f 2e       	mov	r0, r31
    152e:	f6 ea       	ldi	r31, 0xA6	; 166
    1530:	ef 2e       	mov	r14, r31
    1532:	f2 e0       	ldi	r31, 0x02	; 2
    1534:	ff 2e       	mov	r15, r31
    1536:	f0 2d       	mov	r31, r0
    1538:	00 e0       	ldi	r16, 0x00	; 0
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	2f ef       	ldi	r18, 0xFF	; 255
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	43 e0       	ldi	r20, 0x03	; 3
    1542:	6c e3       	ldi	r22, 0x3C	; 60
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	84 e1       	ldi	r24, 0x14	; 20
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <main+0x3d8>
					
				res = convert(system, number_1);
			}
			else
			{	
				print_calculated = 0;
    1550:	81 2c       	mov	r8, r1
    1552:	91 2c       	mov	r9, r1
				res = convert_system(res, system);
				system = 10;
			}*/
			
//			sprintf(res_print, "%d", res);
			for (uint8_t i = 0; i < MAX_CHARS; i++)
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	18 c0       	rjmp	.+48     	; 0x1588 <main+0x40c>
			{
				if (number_1[i] == '_')
    1558:	82 2f       	mov	r24, r18
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	ef 58       	subi	r30, 0x8F	; 143
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	30 81       	ld	r19, Z
    1564:	3f 35       	cpi	r19, 0x5F	; 95
    1566:	41 f4       	brne	.+16     	; 0x1578 <main+0x3fc>
				{
					res_print[i] = 0;
    1568:	e1 e0       	ldi	r30, 0x01	; 1
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	ec 0f       	add	r30, r28
    156e:	fd 1f       	adc	r31, r29
    1570:	e8 0f       	add	r30, r24
    1572:	f9 1f       	adc	r31, r25
    1574:	10 82       	st	Z, r1
					break;
    1576:	0a c0       	rjmp	.+20     	; 0x158c <main+0x410>
				}
				res_print[i] = number_1[i];
    1578:	e1 e0       	ldi	r30, 0x01	; 1
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	ec 0f       	add	r30, r28
    157e:	fd 1f       	adc	r31, r29
    1580:	e8 0f       	add	r30, r24
    1582:	f9 1f       	adc	r31, r25
    1584:	30 83       	st	Z, r19
				res = convert_system(res, system);
				system = 10;
			}*/
			
//			sprintf(res_print, "%d", res);
			for (uint8_t i = 0; i < MAX_CHARS; i++)
    1586:	2f 5f       	subi	r18, 0xFF	; 255
    1588:	20 31       	cpi	r18, 0x10	; 16
    158a:	30 f3       	brcs	.-52     	; 0x1558 <main+0x3dc>
				}
				res_print[i] = number_1[i];
				
			}
			//strcpy(res_print, number_1);
			print_str(20, 60, 3, WHITE, BLACK, res_print);
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	7c 01       	movw	r14, r24
    1592:	00 e0       	ldi	r16, 0x00	; 0
    1594:	10 e0       	ldi	r17, 0x00	; 0
    1596:	2f ef       	ldi	r18, 0xFF	; 255
    1598:	3f ef       	ldi	r19, 0xFF	; 255
    159a:	43 e0       	ldi	r20, 0x03	; 3
    159c:	6c e3       	ldi	r22, 0x3C	; 60
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	84 e1       	ldi	r24, 0x14	; 20
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 af 02 	call	0x55e	; 0x55e <print_str>
    15a8:	06 ce       	rjmp	.-1012   	; 0x11b6 <main+0x3a>

000015aa <__divmodhi4>:
    15aa:	97 fb       	bst	r25, 7
    15ac:	07 2e       	mov	r0, r23
    15ae:	16 f4       	brtc	.+4      	; 0x15b4 <__divmodhi4+0xa>
    15b0:	00 94       	com	r0
    15b2:	07 d0       	rcall	.+14     	; 0x15c2 <__divmodhi4_neg1>
    15b4:	77 fd       	sbrc	r23, 7
    15b6:	09 d0       	rcall	.+18     	; 0x15ca <__divmodhi4_neg2>
    15b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__udivmodhi4>
    15bc:	07 fc       	sbrc	r0, 7
    15be:	05 d0       	rcall	.+10     	; 0x15ca <__divmodhi4_neg2>
    15c0:	3e f4       	brtc	.+14     	; 0x15d0 <__divmodhi4_exit>

000015c2 <__divmodhi4_neg1>:
    15c2:	90 95       	com	r25
    15c4:	81 95       	neg	r24
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	08 95       	ret

000015ca <__divmodhi4_neg2>:
    15ca:	70 95       	com	r23
    15cc:	61 95       	neg	r22
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255

000015d0 <__divmodhi4_exit>:
    15d0:	08 95       	ret

000015d2 <__umulhisi3>:
    15d2:	a2 9f       	mul	r26, r18
    15d4:	b0 01       	movw	r22, r0
    15d6:	b3 9f       	mul	r27, r19
    15d8:	c0 01       	movw	r24, r0
    15da:	a3 9f       	mul	r26, r19
    15dc:	70 0d       	add	r23, r0
    15de:	81 1d       	adc	r24, r1
    15e0:	11 24       	eor	r1, r1
    15e2:	91 1d       	adc	r25, r1
    15e4:	b2 9f       	mul	r27, r18
    15e6:	70 0d       	add	r23, r0
    15e8:	81 1d       	adc	r24, r1
    15ea:	11 24       	eor	r1, r1
    15ec:	91 1d       	adc	r25, r1
    15ee:	08 95       	ret

000015f0 <__udivmodhi4>:
    15f0:	aa 1b       	sub	r26, r26
    15f2:	bb 1b       	sub	r27, r27
    15f4:	51 e1       	ldi	r21, 0x11	; 17
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <__udivmodhi4_ep>

000015f8 <__udivmodhi4_loop>:
    15f8:	aa 1f       	adc	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	a6 17       	cp	r26, r22
    15fe:	b7 07       	cpc	r27, r23
    1600:	10 f0       	brcs	.+4      	; 0x1606 <__udivmodhi4_ep>
    1602:	a6 1b       	sub	r26, r22
    1604:	b7 0b       	sbc	r27, r23

00001606 <__udivmodhi4_ep>:
    1606:	88 1f       	adc	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	5a 95       	dec	r21
    160c:	a9 f7       	brne	.-22     	; 0x15f8 <__udivmodhi4_loop>
    160e:	80 95       	com	r24
    1610:	90 95       	com	r25
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	08 95       	ret

00001618 <strrev>:
    1618:	dc 01       	movw	r26, r24
    161a:	fc 01       	movw	r30, r24
    161c:	67 2f       	mov	r22, r23
    161e:	71 91       	ld	r23, Z+
    1620:	77 23       	and	r23, r23
    1622:	e1 f7       	brne	.-8      	; 0x161c <strrev+0x4>
    1624:	32 97       	sbiw	r30, 0x02	; 2
    1626:	04 c0       	rjmp	.+8      	; 0x1630 <strrev+0x18>
    1628:	7c 91       	ld	r23, X
    162a:	6d 93       	st	X+, r22
    162c:	70 83       	st	Z, r23
    162e:	62 91       	ld	r22, -Z
    1630:	ae 17       	cp	r26, r30
    1632:	bf 07       	cpc	r27, r31
    1634:	c8 f3       	brcs	.-14     	; 0x1628 <strrev+0x10>
    1636:	08 95       	ret

00001638 <_exit>:
    1638:	f8 94       	cli

0000163a <__stop_program>:
    163a:	ff cf       	rjmp	.-2      	; 0x163a <__stop_program>
