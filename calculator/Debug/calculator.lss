
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000025c  00800060  000015a0  00001634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008002bc  008002bc  00001890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000327b  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082f  00000000  00000000  00004c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d3  00000000  00000000  000054b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  0000658c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050e  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e5f  00000000  00000000  00006e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00008cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 57 06 	call	0xcae	; 0xcae <main>
      8a:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <calculator>:

int calculator(char base, char operation, int a, int b)
{
	int n = dec_add(1, 1233);
	return n;
      92:	82 ed       	ldi	r24, 0xD2	; 210
      94:	94 e0       	ldi	r25, 0x04	; 4
      96:	08 95       	ret

00000098 <touch_write>:
	while(x2 > (x1 - 1))
	{
		draw_pixel(x2, y1, colour);
		x2--;
	}
}
      98:	93 98       	cbi	0x12, 3	; 18
      9a:	27 e0       	ldi	r18, 0x07	; 7
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	ac 01       	movw	r20, r24
      a2:	02 2e       	mov	r0, r18
      a4:	02 c0       	rjmp	.+4      	; 0xaa <touch_write+0x12>
      a6:	55 95       	asr	r21
      a8:	47 95       	ror	r20
      aa:	0a 94       	dec	r0
      ac:	e2 f7       	brpl	.-8      	; 0xa6 <touch_write+0xe>
      ae:	40 ff       	sbrs	r20, 0
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <touch_write+0x1e>
      b2:	92 9a       	sbi	0x12, 2	; 18
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <touch_write+0x20>
      b6:	92 98       	cbi	0x12, 2	; 18
      b8:	93 98       	cbi	0x12, 3	; 18
      ba:	93 9a       	sbi	0x12, 3	; 18
      bc:	21 50       	subi	r18, 0x01	; 1
      be:	31 09       	sbc	r19, r1
      c0:	78 f7       	brcc	.-34     	; 0xa0 <touch_write+0x8>
      c2:	08 95       	ret

000000c4 <touch_read_char>:
      c4:	2c e0       	ldi	r18, 0x0C	; 12
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	88 0f       	add	r24, r24
      cc:	99 1f       	adc	r25, r25
      ce:	93 9a       	sbi	0x12, 3	; 18
      d0:	93 98       	cbi	0x12, 3	; 18
      d2:	30 b3       	in	r19, 0x10	; 16
      d4:	31 fb       	bst	r19, 1
      d6:	44 27       	eor	r20, r20
      d8:	40 f9       	bld	r20, 0
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	84 0f       	add	r24, r20
      de:	95 1f       	adc	r25, r21
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	99 f7       	brne	.-26     	; 0xca <touch_read_char+0x6>
      e4:	08 95       	ret

000000e6 <touch_read_xy>:
      e6:	83 e3       	ldi	r24, 0x33	; 51
      e8:	97 e0       	ldi	r25, 0x07	; 7
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <touch_read_xy+0x4>
      ee:	94 98       	cbi	0x12, 4	; 18
      f0:	80 e9       	ldi	r24, 0x90	; 144
      f2:	0e 94 4c 00 	call	0x98	; 0x98 <touch_write>
      f6:	83 e3       	ldi	r24, 0x33	; 51
      f8:	97 e0       	ldi	r25, 0x07	; 7
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <touch_read_xy+0x14>
      fe:	93 9a       	sbi	0x12, 3	; 18
	...
     108:	93 98       	cbi	0x12, 3	; 18
	...
     112:	0e 94 62 00 	call	0xc4	; 0xc4 <touch_read_char>
     116:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <T_Y+0x1>
     11a:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <T_Y>
     11e:	80 ed       	ldi	r24, 0xD0	; 208
     120:	0e 94 4c 00 	call	0x98	; 0x98 <touch_write>
     124:	93 9a       	sbi	0x12, 3	; 18
	...
     12e:	93 98       	cbi	0x12, 3	; 18
	...
     138:	0e 94 62 00 	call	0xc4	; 0xc4 <touch_read_char>
     13c:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <__data_end+0x1>
     140:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
     144:	94 9a       	sbi	0x12, 4	; 18
     146:	08 95       	ret

00000148 <LCD_write_cmd>:
     148:	a8 98       	cbi	0x15, 0	; 21
     14a:	a9 98       	cbi	0x15, 1	; 21
     14c:	98 bb       	out	0x18, r25	; 24
     14e:	8b bb       	out	0x1b, r24	; 27
     150:	af 9a       	sbi	0x15, 7	; 21
     152:	af 98       	cbi	0x15, 7	; 21
     154:	a9 9a       	sbi	0x15, 1	; 21
     156:	08 95       	ret

00000158 <LCD_write_data>:
     158:	a8 9a       	sbi	0x15, 0	; 21
     15a:	a9 98       	cbi	0x15, 1	; 21
     15c:	98 bb       	out	0x18, r25	; 24
     15e:	8b bb       	out	0x1b, r24	; 27
     160:	af 9a       	sbi	0x15, 7	; 21
     162:	af 98       	cbi	0x15, 7	; 21
     164:	a9 9a       	sbi	0x15, 1	; 21
     166:	08 95       	ret

00000168 <LCD_write_cmd_data>:
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	eb 01       	movw	r28, r22
     16e:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_cmd>
     172:	ce 01       	movw	r24, r28
     174:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_data>
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <address_set>:
     17e:	ef 92       	push	r14
     180:	ff 92       	push	r15
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	8c 01       	movw	r16, r24
     18c:	eb 01       	movw	r28, r22
     18e:	79 01       	movw	r14, r18
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	74 2f       	mov	r23, r20
     196:	68 0f       	add	r22, r24
     198:	79 1f       	adc	r23, r25
     19a:	84 e4       	ldi	r24, 0x44	; 68
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     1a2:	be 01       	movw	r22, r28
     1a4:	85 e4       	ldi	r24, 0x45	; 69
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     1ac:	b7 01       	movw	r22, r14
     1ae:	86 e4       	ldi	r24, 0x46	; 70
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     1b6:	b8 01       	movw	r22, r16
     1b8:	8e e4       	ldi	r24, 0x4E	; 78
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     1c0:	be 01       	movw	r22, r28
     1c2:	8f e4       	ldi	r24, 0x4F	; 79
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     1ca:	82 e2       	ldi	r24, 0x22	; 34
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_cmd>
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	0f 91       	pop	r16
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	08 95       	ret

000001e0 <init>:
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	8a bb       	out	0x1a, r24	; 26
     1e4:	87 bb       	out	0x17, r24	; 23
     1e6:	81 bb       	out	0x11, r24	; 17
     1e8:	84 bb       	out	0x14, r24	; 20
     1ea:	8c ef       	ldi	r24, 0xFC	; 252
     1ec:	81 bb       	out	0x11, r24	; 17
     1ee:	82 ea       	ldi	r24, 0xA2	; 162
     1f0:	8f bd       	out	0x2f, r24	; 47
     1f2:	8a e1       	ldi	r24, 0x1A	; 26
     1f4:	8e bd       	out	0x2e, r24	; 46
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	97 e4       	ldi	r25, 0x47	; 71
     1fa:	97 bd       	out	0x27, r25	; 39
     1fc:	86 bd       	out	0x26, r24	; 38
     1fe:	8c ed       	ldi	r24, 0xDC	; 220
     200:	95 e0       	ldi	r25, 0x05	; 5
     202:	9b bd       	out	0x2b, r25	; 43
     204:	8a bd       	out	0x2a, r24	; 42
     206:	99 bd       	out	0x29, r25	; 41
     208:	88 bd       	out	0x28, r24	; 40
     20a:	81 b3       	in	r24, 0x11	; 17
     20c:	80 66       	ori	r24, 0x60	; 96
     20e:	81 bb       	out	0x11, r24	; 17
     210:	97 9a       	sbi	0x12, 7	; 18
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	93 e2       	ldi	r25, 0x23	; 35
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	f1 f7       	brne	.-4      	; 0x216 <init+0x36>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <init+0x3c>
     21c:	00 00       	nop
     21e:	97 98       	cbi	0x12, 7	; 18
     220:	8f ef       	ldi	r24, 0xFF	; 255
     222:	97 e4       	ldi	r25, 0x47	; 71
     224:	01 97       	sbiw	r24, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <init+0x44>
     228:	00 c0       	rjmp	.+0      	; 0x22a <init+0x4a>
     22a:	00 00       	nop
     22c:	97 9a       	sbi	0x12, 7	; 18
     22e:	a9 9a       	sbi	0x15, 1	; 21
     230:	ae 9a       	sbi	0x15, 6	; 21
     232:	af 98       	cbi	0x15, 7	; 21
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	9f e8       	ldi	r25, 0x8F	; 143
     238:	01 97       	sbiw	r24, 0x01	; 1
     23a:	f1 f7       	brne	.-4      	; 0x238 <init+0x58>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <init+0x5e>
     23e:	00 00       	nop
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     24c:	83 e3       	ldi	r24, 0x33	; 51
     24e:	97 e0       	ldi	r25, 0x07	; 7
     250:	01 97       	sbiw	r24, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <init+0x70>
     254:	64 ea       	ldi	r22, 0xA4	; 164
     256:	78 ea       	ldi	r23, 0xA8	; 168
     258:	83 e0       	ldi	r24, 0x03	; 3
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     260:	83 e3       	ldi	r24, 0x33	; 51
     262:	97 e0       	ldi	r25, 0x07	; 7
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <init+0x84>
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	8c e0       	ldi	r24, 0x0C	; 12
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     274:	83 e3       	ldi	r24, 0x33	; 51
     276:	97 e0       	ldi	r25, 0x07	; 7
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <init+0x98>
     27c:	6c e0       	ldi	r22, 0x0C	; 12
     27e:	78 e0       	ldi	r23, 0x08	; 8
     280:	8d e0       	ldi	r24, 0x0D	; 13
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     288:	83 e3       	ldi	r24, 0x33	; 51
     28a:	97 e0       	ldi	r25, 0x07	; 7
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <init+0xac>
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	7b e2       	ldi	r23, 0x2B	; 43
     294:	8e e0       	ldi	r24, 0x0E	; 14
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     29c:	83 e3       	ldi	r24, 0x33	; 51
     29e:	97 e0       	ldi	r25, 0x07	; 7
     2a0:	01 97       	sbiw	r24, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <init+0xc0>
     2a4:	60 eb       	ldi	r22, 0xB0	; 176
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	8e e1       	ldi	r24, 0x1E	; 30
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     2b0:	83 e3       	ldi	r24, 0x33	; 51
     2b2:	97 e0       	ldi	r25, 0x07	; 7
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <init+0xd4>
     2b8:	6f e3       	ldi	r22, 0x3F	; 63
     2ba:	7b e2       	ldi	r23, 0x2B	; 43
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     2c4:	83 e3       	ldi	r24, 0x33	; 51
     2c6:	97 e0       	ldi	r25, 0x07	; 7
     2c8:	01 97       	sbiw	r24, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <init+0xe8>
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	76 e0       	ldi	r23, 0x06	; 6
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     2d8:	83 e3       	ldi	r24, 0x33	; 51
     2da:	97 e0       	ldi	r25, 0x07	; 7
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <init+0xfc>
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	80 e1       	ldi	r24, 0x10	; 16
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     2ec:	83 e3       	ldi	r24, 0x33	; 51
     2ee:	97 e0       	ldi	r25, 0x07	; 7
     2f0:	01 97       	sbiw	r24, 0x01	; 1
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <init+0x110>
     2f4:	60 e7       	ldi	r22, 0x70	; 112
     2f6:	70 e6       	ldi	r23, 0x60	; 96
     2f8:	81 e1       	ldi	r24, 0x11	; 17
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     300:	83 e3       	ldi	r24, 0x33	; 51
     302:	97 e0       	ldi	r25, 0x07	; 7
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <init+0x124>
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     314:	83 e3       	ldi	r24, 0x33	; 51
     316:	97 e0       	ldi	r25, 0x07	; 7
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <init+0x138>
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	86 e0       	ldi	r24, 0x06	; 6
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     328:	83 e3       	ldi	r24, 0x33	; 51
     32a:	97 e0       	ldi	r25, 0x07	; 7
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <init+0x14c>
     330:	6c e1       	ldi	r22, 0x1C	; 28
     332:	7f ee       	ldi	r23, 0xEF	; 239
     334:	86 e1       	ldi	r24, 0x16	; 22
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     33c:	83 e3       	ldi	r24, 0x33	; 51
     33e:	97 e0       	ldi	r25, 0x07	; 7
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <init+0x160>
     344:	63 e0       	ldi	r22, 0x03	; 3
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	87 e1       	ldi	r24, 0x17	; 23
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     350:	83 e3       	ldi	r24, 0x33	; 51
     352:	97 e0       	ldi	r25, 0x07	; 7
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <init+0x174>
     358:	63 e3       	ldi	r22, 0x33	; 51
     35a:	72 e0       	ldi	r23, 0x02	; 2
     35c:	87 e0       	ldi	r24, 0x07	; 7
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     364:	83 e3       	ldi	r24, 0x33	; 51
     366:	97 e0       	ldi	r25, 0x07	; 7
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <init+0x188>
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	8b e0       	ldi	r24, 0x0B	; 11
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     378:	83 e3       	ldi	r24, 0x33	; 51
     37a:	97 e0       	ldi	r25, 0x07	; 7
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <init+0x19c>
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	8f e0       	ldi	r24, 0x0F	; 15
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     38c:	83 e3       	ldi	r24, 0x33	; 51
     38e:	97 e0       	ldi	r25, 0x07	; 7
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <init+0x1b0>
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	81 e4       	ldi	r24, 0x41	; 65
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     3a0:	83 e3       	ldi	r24, 0x33	; 51
     3a2:	97 e0       	ldi	r25, 0x07	; 7
     3a4:	01 97       	sbiw	r24, 0x01	; 1
     3a6:	f1 f7       	brne	.-4      	; 0x3a4 <init+0x1c4>
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	82 e4       	ldi	r24, 0x42	; 66
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     3b4:	83 e3       	ldi	r24, 0x33	; 51
     3b6:	97 e0       	ldi	r25, 0x07	; 7
     3b8:	01 97       	sbiw	r24, 0x01	; 1
     3ba:	f1 f7       	brne	.-4      	; 0x3b8 <init+0x1d8>
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	88 e4       	ldi	r24, 0x48	; 72
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     3c8:	83 e3       	ldi	r24, 0x33	; 51
     3ca:	97 e0       	ldi	r25, 0x07	; 7
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <init+0x1ec>
     3d0:	6f e3       	ldi	r22, 0x3F	; 63
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	89 e4       	ldi	r24, 0x49	; 73
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <init+0x200>
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	8a e4       	ldi	r24, 0x4A	; 74
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     3f0:	83 e3       	ldi	r24, 0x33	; 51
     3f2:	97 e0       	ldi	r25, 0x07	; 7
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <init+0x214>
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	8b e4       	ldi	r24, 0x4B	; 75
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     404:	83 e3       	ldi	r24, 0x33	; 51
     406:	97 e0       	ldi	r25, 0x07	; 7
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	7f ee       	ldi	r23, 0xEF	; 239
     410:	84 e4       	ldi	r24, 0x44	; 68
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     418:	83 e3       	ldi	r24, 0x33	; 51
     41a:	97 e0       	ldi	r25, 0x07	; 7
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	85 e4       	ldi	r24, 0x45	; 69
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     42c:	83 e3       	ldi	r24, 0x33	; 51
     42e:	97 e0       	ldi	r25, 0x07	; 7
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     434:	6f e3       	ldi	r22, 0x3F	; 63
     436:	71 e0       	ldi	r23, 0x01	; 1
     438:	86 e4       	ldi	r24, 0x46	; 70
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     440:	83 e3       	ldi	r24, 0x33	; 51
     442:	97 e0       	ldi	r25, 0x07	; 7
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     448:	67 e0       	ldi	r22, 0x07	; 7
     44a:	77 e0       	ldi	r23, 0x07	; 7
     44c:	80 e3       	ldi	r24, 0x30	; 48
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     454:	83 e3       	ldi	r24, 0x33	; 51
     456:	97 e0       	ldi	r25, 0x07	; 7
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     45c:	64 e0       	ldi	r22, 0x04	; 4
     45e:	72 e0       	ldi	r23, 0x02	; 2
     460:	81 e3       	ldi	r24, 0x31	; 49
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     468:	83 e3       	ldi	r24, 0x33	; 51
     46a:	97 e0       	ldi	r25, 0x07	; 7
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     470:	64 e0       	ldi	r22, 0x04	; 4
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	82 e3       	ldi	r24, 0x32	; 50
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     47c:	83 e3       	ldi	r24, 0x33	; 51
     47e:	97 e0       	ldi	r25, 0x07	; 7
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	75 e0       	ldi	r23, 0x05	; 5
     488:	83 e3       	ldi	r24, 0x33	; 51
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     490:	83 e3       	ldi	r24, 0x33	; 51
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     498:	67 e0       	ldi	r22, 0x07	; 7
     49a:	75 e0       	ldi	r23, 0x05	; 5
     49c:	84 e3       	ldi	r24, 0x34	; 52
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     4a4:	83 e3       	ldi	r24, 0x33	; 51
     4a6:	97 e0       	ldi	r25, 0x07	; 7
     4a8:	01 97       	sbiw	r24, 0x01	; 1
     4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4ac:	64 e0       	ldi	r22, 0x04	; 4
     4ae:	72 e0       	ldi	r23, 0x02	; 2
     4b0:	85 e3       	ldi	r24, 0x35	; 53
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     4b8:	83 e3       	ldi	r24, 0x33	; 51
     4ba:	97 e0       	ldi	r25, 0x07	; 7
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4c0:	64 e0       	ldi	r22, 0x04	; 4
     4c2:	72 e0       	ldi	r23, 0x02	; 2
     4c4:	86 e3       	ldi	r24, 0x36	; 54
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     4cc:	83 e3       	ldi	r24, 0x33	; 51
     4ce:	97 e0       	ldi	r25, 0x07	; 7
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4d4:	62 e0       	ldi	r22, 0x02	; 2
     4d6:	75 e0       	ldi	r23, 0x05	; 5
     4d8:	87 e3       	ldi	r24, 0x37	; 55
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     4e0:	83 e3       	ldi	r24, 0x33	; 51
     4e2:	97 e0       	ldi	r25, 0x07	; 7
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	73 e0       	ldi	r23, 0x03	; 3
     4ec:	8a e3       	ldi	r24, 0x3A	; 58
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     4f4:	83 e3       	ldi	r24, 0x33	; 51
     4f6:	97 e0       	ldi	r25, 0x07	; 7
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4fc:	62 e0       	ldi	r22, 0x02	; 2
     4fe:	73 e0       	ldi	r23, 0x03	; 3
     500:	8b e3       	ldi	r24, 0x3B	; 59
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     508:	83 e3       	ldi	r24, 0x33	; 51
     50a:	97 e0       	ldi	r25, 0x07	; 7
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	83 e2       	ldi	r24, 0x23	; 35
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     51c:	83 e3       	ldi	r24, 0x33	; 51
     51e:	97 e0       	ldi	r25, 0x07	; 7
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	84 e2       	ldi	r24, 0x24	; 36
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     530:	83 e3       	ldi	r24, 0x33	; 51
     532:	97 e0       	ldi	r25, 0x07	; 7
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	8f e4       	ldi	r24, 0x4F	; 79
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	8e e4       	ldi	r24, 0x4E	; 78
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     550:	82 e2       	ldi	r24, 0x22	; 34
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_cmd>
     558:	08 95       	ret

0000055a <LCD_screen_color>:
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	8c 01       	movw	r16, r24
     568:	2f e3       	ldi	r18, 0x3F	; 63
     56a:	31 e0       	ldi	r19, 0x01	; 1
     56c:	4f ee       	ldi	r20, 0xEF	; 239
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 bf 00 	call	0x17e	; 0x17e <address_set>
     57c:	68 94       	set
     57e:	ee 24       	eor	r14, r14
     580:	e6 f8       	bld	r14, 6
     582:	ff 24       	eor	r15, r15
     584:	f3 94       	inc	r15
     586:	09 c0       	rjmp	.+18     	; 0x59a <LCD_screen_color+0x40>
     588:	c8 01       	movw	r24, r16
     58a:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_data>
     58e:	21 97       	sbiw	r28, 0x01	; 1
     590:	d9 f7       	brne	.-10     	; 0x588 <LCD_screen_color+0x2e>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	e8 1a       	sub	r14, r24
     596:	f1 08       	sbc	r15, r1
     598:	19 f0       	breq	.+6      	; 0x5a0 <LCD_screen_color+0x46>
     59a:	c0 ef       	ldi	r28, 0xF0	; 240
     59c:	d0 e0       	ldi	r29, 0x00	; 0
     59e:	f4 cf       	rjmp	.-24     	; 0x588 <LCD_screen_color+0x2e>
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	08 95       	ret

000005ae <TFT_set_cursor>:
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	eb 01       	movw	r28, r22
     5b4:	bc 01       	movw	r22, r24
     5b6:	8e e4       	ldi	r24, 0x4E	; 78
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     5be:	6f e3       	ldi	r22, 0x3F	; 63
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	6c 1b       	sub	r22, r28
     5c4:	7d 0b       	sbc	r23, r29
     5c6:	8f e4       	ldi	r24, 0x4F	; 79
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 b4 00 	call	0x168	; 0x168 <LCD_write_cmd_data>
     5ce:	82 e2       	ldi	r24, 0x22	; 34
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_write_cmd>
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <draw_pixel>:
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	80 3f       	cpi	r24, 0xF0	; 240
     5e2:	91 05       	cpc	r25, r1
     5e4:	60 f4       	brcc	.+24     	; 0x5fe <draw_pixel+0x22>
     5e6:	60 34       	cpi	r22, 0x40	; 64
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	72 07       	cpc	r23, r18
     5ec:	40 f4       	brcc	.+16     	; 0x5fe <draw_pixel+0x22>
     5ee:	ea 01       	movw	r28, r20
     5f0:	a9 98       	cbi	0x15, 1	; 21
     5f2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TFT_set_cursor>
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_data>
     5fc:	a9 9a       	sbi	0x15, 1	; 21
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <draw_line>:
     604:	2f 92       	push	r2
     606:	3f 92       	push	r3
     608:	4f 92       	push	r4
     60a:	5f 92       	push	r5
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	7c 01       	movw	r14, r24
     62a:	eb 01       	movw	r28, r22
     62c:	3a 01       	movw	r6, r20
     62e:	29 01       	movw	r4, r18
     630:	18 01       	movw	r2, r16
     632:	89 01       	movw	r16, r18
     634:	06 1b       	sub	r16, r22
     636:	17 0b       	sbc	r17, r23
     638:	4a 01       	movw	r8, r20
     63a:	88 1a       	sub	r8, r24
     63c:	99 0a       	sbc	r9, r25
     63e:	11 23       	and	r17, r17
     640:	3c f4       	brge	.+14     	; 0x650 <draw_line+0x4c>
     642:	11 95       	neg	r17
     644:	01 95       	neg	r16
     646:	11 09       	sbc	r17, r1
     648:	aa 24       	eor	r10, r10
     64a:	aa 94       	dec	r10
     64c:	ba 2c       	mov	r11, r10
     64e:	03 c0       	rjmp	.+6      	; 0x656 <draw_line+0x52>
     650:	aa 24       	eor	r10, r10
     652:	a3 94       	inc	r10
     654:	b1 2c       	mov	r11, r1
     656:	99 20       	and	r9, r9
     658:	3c f4       	brge	.+14     	; 0x668 <draw_line+0x64>
     65a:	91 94       	neg	r9
     65c:	81 94       	neg	r8
     65e:	91 08       	sbc	r9, r1
     660:	cc 24       	eor	r12, r12
     662:	ca 94       	dec	r12
     664:	dc 2c       	mov	r13, r12
     666:	03 c0       	rjmp	.+6      	; 0x66e <draw_line+0x6a>
     668:	cc 24       	eor	r12, r12
     66a:	c3 94       	inc	r12
     66c:	d1 2c       	mov	r13, r1
     66e:	88 0c       	add	r8, r8
     670:	99 1c       	adc	r9, r9
     672:	00 0f       	add	r16, r16
     674:	11 1f       	adc	r17, r17
     676:	a1 01       	movw	r20, r2
     678:	be 01       	movw	r22, r28
     67a:	c7 01       	movw	r24, r14
     67c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <draw_pixel>
     680:	08 15       	cp	r16, r8
     682:	19 05       	cpc	r17, r9
     684:	e4 f4       	brge	.+56     	; 0x6be <draw_line+0xba>
     686:	c4 01       	movw	r24, r8
     688:	95 95       	asr	r25
     68a:	87 95       	ror	r24
     68c:	28 01       	movw	r4, r16
     68e:	48 1a       	sub	r4, r24
     690:	59 0a       	sbc	r5, r25
     692:	6e 14       	cp	r6, r14
     694:	7f 04       	cpc	r7, r15
     696:	71 f1       	breq	.+92     	; 0x6f4 <draw_line+0xf0>
     698:	55 20       	and	r5, r5
     69a:	24 f0       	brlt	.+8      	; 0x6a4 <draw_line+0xa0>
     69c:	ca 0d       	add	r28, r10
     69e:	db 1d       	adc	r29, r11
     6a0:	48 18       	sub	r4, r8
     6a2:	59 08       	sbc	r5, r9
     6a4:	ec 0c       	add	r14, r12
     6a6:	fd 1c       	adc	r15, r13
     6a8:	40 0e       	add	r4, r16
     6aa:	51 1e       	adc	r5, r17
     6ac:	a1 01       	movw	r20, r2
     6ae:	be 01       	movw	r22, r28
     6b0:	c7 01       	movw	r24, r14
     6b2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <draw_pixel>
     6b6:	6e 14       	cp	r6, r14
     6b8:	7f 04       	cpc	r7, r15
     6ba:	71 f7       	brne	.-36     	; 0x698 <draw_line+0x94>
     6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <draw_line+0xf0>
     6be:	c8 01       	movw	r24, r16
     6c0:	95 95       	asr	r25
     6c2:	87 95       	ror	r24
     6c4:	34 01       	movw	r6, r8
     6c6:	68 1a       	sub	r6, r24
     6c8:	79 0a       	sbc	r7, r25
     6ca:	4c 16       	cp	r4, r28
     6cc:	5d 06       	cpc	r5, r29
     6ce:	91 f0       	breq	.+36     	; 0x6f4 <draw_line+0xf0>
     6d0:	77 20       	and	r7, r7
     6d2:	24 f0       	brlt	.+8      	; 0x6dc <draw_line+0xd8>
     6d4:	ec 0c       	add	r14, r12
     6d6:	fd 1c       	adc	r15, r13
     6d8:	60 1a       	sub	r6, r16
     6da:	71 0a       	sbc	r7, r17
     6dc:	ca 0d       	add	r28, r10
     6de:	db 1d       	adc	r29, r11
     6e0:	68 0c       	add	r6, r8
     6e2:	79 1c       	adc	r7, r9
     6e4:	a1 01       	movw	r20, r2
     6e6:	be 01       	movw	r22, r28
     6e8:	c7 01       	movw	r24, r14
     6ea:	0e 94 ee 02 	call	0x5dc	; 0x5dc <draw_pixel>
     6ee:	4c 16       	cp	r4, r28
     6f0:	5d 06       	cpc	r5, r29
     6f2:	71 f7       	brne	.-36     	; 0x6d0 <draw_line+0xcc>
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	bf 90       	pop	r11
     706:	af 90       	pop	r10
     708:	9f 90       	pop	r9
     70a:	8f 90       	pop	r8
     70c:	7f 90       	pop	r7
     70e:	6f 90       	pop	r6
     710:	5f 90       	pop	r5
     712:	4f 90       	pop	r4
     714:	3f 90       	pop	r3
     716:	2f 90       	pop	r2
     718:	08 95       	ret

0000071a <draw_font_pixel>:

void draw_font_pixel(unsigned int x_pos, unsigned int y_pos, unsigned int colour, unsigned char pixel_size)
{
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	7a 01       	movw	r14, r20
     728:	02 2f       	mov	r16, r18
	int i = 0x0000;

	PORTC &= ~_BV(LCD_CS);
     72a:	a9 98       	cbi	0x15, 1	; 21
	
	TFT_set_cursor(x_pos, y_pos);
     72c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <TFT_set_cursor>
	
	for(i = 0x0000; i < (pixel_size * pixel_size); i++)
     730:	00 9f       	mul	r16, r16
     732:	80 01       	movw	r16, r0
     734:	11 24       	eor	r1, r1
     736:	10 16       	cp	r1, r16
     738:	11 06       	cpc	r1, r17
     73a:	4c f4       	brge	.+18     	; 0x74e <draw_font_pixel+0x34>
     73c:	c0 e0       	ldi	r28, 0x00	; 0
     73e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_write_data(colour);
     740:	c7 01       	movw	r24, r14
     742:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write_data>

	PORTC &= ~_BV(LCD_CS);
	
	TFT_set_cursor(x_pos, y_pos);
	
	for(i = 0x0000; i < (pixel_size * pixel_size); i++)
     746:	21 96       	adiw	r28, 0x01	; 1
     748:	c0 17       	cp	r28, r16
     74a:	d1 07       	cpc	r29, r17
     74c:	c9 f7       	brne	.-14     	; 0x740 <draw_font_pixel+0x26>
	{
		LCD_write_data(colour);
	}
	
	PORTC |= _BV(LCD_CS);
     74e:	a9 9a       	sbi	0x15, 1	; 21
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	08 95       	ret

0000075e <print_char>:

void print_char(unsigned int x_pos, unsigned int y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char ch)
{
     75e:	2f 92       	push	r2
     760:	3f 92       	push	r3
     762:	5f 92       	push	r5
     764:	6f 92       	push	r6
     766:	7f 92       	push	r7
     768:	8f 92       	push	r8
     76a:	9f 92       	push	r9
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <print_char+0x24>
     782:	00 d0       	rcall	.+0      	; 0x784 <print_char+0x26>
     784:	00 d0       	rcall	.+0      	; 0x786 <print_char+0x28>
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	5b 01       	movw	r10, r22
     78c:	54 2e       	mov	r5, r20
     78e:	3a 83       	std	Y+2, r19	; 0x02
     790:	29 83       	std	Y+1, r18	; 0x01
     792:	1c 83       	std	Y+4, r17	; 0x04
     794:	0b 83       	std	Y+3, r16	; 0x03
	signed char i = 0x00;
	unsigned char j = 0x00;

	unsigned int value = 0x0000;

	if(font_size <= 0)
     796:	41 11       	cpse	r20, r1
     798:	02 c0       	rjmp	.+4      	; 0x79e <print_char+0x40>
	{
		font_size = 1;
     79a:	55 24       	eor	r5, r5
     79c:	53 94       	inc	r5
	}

	if(x_pos < font_size)
     79e:	85 2c       	mov	r8, r5
     7a0:	91 2c       	mov	r9, r1
     7a2:	64 01       	movw	r12, r8
     7a4:	88 16       	cp	r8, r24
     7a6:	99 06       	cpc	r9, r25
     7a8:	08 f4       	brcc	.+2      	; 0x7ac <print_char+0x4e>
     7aa:	6c 01       	movw	r12, r24
     7ac:	f1 2c       	mov	r15, r1
     7ae:	c7 01       	movw	r24, r14
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	8e 0d       	add	r24, r14
     7ba:	9f 1d       	adc	r25, r15
     7bc:	9c 01       	movw	r18, r24
     7be:	20 5c       	subi	r18, 0xC0	; 192
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	79 01       	movw	r14, r18
     7c4:	16 01       	movw	r2, r12
     7c6:	35 e0       	ldi	r19, 0x05	; 5
     7c8:	23 0e       	add	r2, r19
     7ca:	31 1c       	adc	r3, r1
     7cc:	c4 01       	movw	r24, r8
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	88 0f       	add	r24, r24
     7d4:	99 1f       	adc	r25, r25
     7d6:	88 0f       	add	r24, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	3c 01       	movw	r6, r24
     7dc:	e8 e0       	ldi	r30, 0x08	; 8
     7de:	5e 9e       	mul	r5, r30
     7e0:	60 18       	sub	r6, r0
     7e2:	71 08       	sbc	r7, r1
     7e4:	11 24       	eor	r1, r1
     7e6:	30 c0       	rjmp	.+96     	; 0x848 <print_char+0xea>
		for(j = 0x00; j < 0x08; j++)
		{
			value = 0x0000;
			value = ( (font[ ( (unsigned char)ch ) - 0x20 ][i]) );

			if(((value >> j) & 0x01) != 0x00)
     7e8:	f7 01       	movw	r30, r14
     7ea:	80 81       	ld	r24, Z
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0d 80       	ldd	r0, Y+5	; 0x05
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <print_char+0x98>
     7f2:	96 95       	lsr	r25
     7f4:	87 95       	ror	r24
     7f6:	0a 94       	dec	r0
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <print_char+0x94>
     7fa:	80 ff       	sbrs	r24, 0
     7fc:	08 c0       	rjmp	.+16     	; 0x80e <print_char+0xb0>
			{
				draw_font_pixel(x_pos, y_pos, colour, font_size);
     7fe:	25 2d       	mov	r18, r5
     800:	49 81       	ldd	r20, Y+1	; 0x01
     802:	5a 81       	ldd	r21, Y+2	; 0x02
     804:	b8 01       	movw	r22, r16
     806:	c6 01       	movw	r24, r12
     808:	0e 94 8d 03 	call	0x71a	; 0x71a <draw_font_pixel>
     80c:	07 c0       	rjmp	.+14     	; 0x81c <print_char+0xbe>
			}
			else
			{
				draw_font_pixel(x_pos, y_pos, back_colour, font_size);
     80e:	25 2d       	mov	r18, r5
     810:	4b 81       	ldd	r20, Y+3	; 0x03
     812:	5c 81       	ldd	r21, Y+4	; 0x04
     814:	b8 01       	movw	r22, r16
     816:	c6 01       	movw	r24, r12
     818:	0e 94 8d 03 	call	0x71a	; 0x71a <draw_font_pixel>
			}

			y_pos += font_size;
     81c:	08 0d       	add	r16, r8
     81e:	19 1d       	adc	r17, r9
     820:	2d 81       	ldd	r18, Y+5	; 0x05
     822:	3e 81       	ldd	r19, Y+6	; 0x06
     824:	2f 5f       	subi	r18, 0xFF	; 255
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	3e 83       	std	Y+6, r19	; 0x06
     82a:	2d 83       	std	Y+5, r18	; 0x05
		x_pos = font_size;
	}

	for(i = 0x04; i >= 0x00; i--)
	{
		for(j = 0x00; j < 0x08; j++)
     82c:	28 30       	cpi	r18, 0x08	; 8
     82e:	31 05       	cpc	r19, r1
     830:	d9 f6       	brne	.-74     	; 0x7e8 <print_char+0x8a>
     832:	a6 0c       	add	r10, r6
     834:	b7 1c       	adc	r11, r7
			}

			y_pos += font_size;
		}
		y_pos -= (font_size << 0x03);
		x_pos++;
     836:	3f ef       	ldi	r19, 0xFF	; 255
     838:	c3 1a       	sub	r12, r19
     83a:	d3 0a       	sbc	r13, r19
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	e8 1a       	sub	r14, r24
     840:	f1 08       	sbc	r15, r1
	if(x_pos < font_size)
	{
		x_pos = font_size;
	}

	for(i = 0x04; i >= 0x00; i--)
     842:	2c 14       	cp	r2, r12
     844:	3d 04       	cpc	r3, r13
     846:	21 f0       	breq	.+8      	; 0x850 <print_char+0xf2>

	unsigned int value = 0x0000;

	if(font_size <= 0)
	{
		font_size = 1;
     848:	85 01       	movw	r16, r10
     84a:	1e 82       	std	Y+6, r1	; 0x06
     84c:	1d 82       	std	Y+5, r1	; 0x05
     84e:	cc cf       	rjmp	.-104    	; 0x7e8 <print_char+0x8a>
			y_pos += font_size;
		}
		y_pos -= (font_size << 0x03);
		x_pos++;
	}
}
     850:	26 96       	adiw	r28, 0x06	; 6
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	9f 90       	pop	r9
     872:	8f 90       	pop	r8
     874:	7f 90       	pop	r7
     876:	6f 90       	pop	r6
     878:	5f 90       	pop	r5
     87a:	3f 90       	pop	r3
     87c:	2f 90       	pop	r2
     87e:	08 95       	ret

00000880 <print_str>:

void print_str(unsigned int x_pos, unsigned int y_pos, unsigned char font_size, unsigned int colour, unsigned int back_colour, char *ch)
{
     880:	5f 92       	push	r5
     882:	6f 92       	push	r6
     884:	7f 92       	push	r7
     886:	8f 92       	push	r8
     888:	9f 92       	push	r9
     88a:	af 92       	push	r10
     88c:	bf 92       	push	r11
     88e:	cf 92       	push	r12
     890:	df 92       	push	r13
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24
     8a0:	4b 01       	movw	r8, r22
     8a2:	54 2e       	mov	r5, r20
     8a4:	59 01       	movw	r10, r18
     8a6:	68 01       	movw	r12, r16
     8a8:	37 01       	movw	r6, r14
	int cnt = 0;
	
	do
	{
		print_char(x_pos, y_pos, font_size, colour, back_colour, ch[cnt++]);
     8aa:	f3 01       	movw	r30, r6
     8ac:	e1 90       	ld	r14, Z+
     8ae:	3f 01       	movw	r6, r30
     8b0:	86 01       	movw	r16, r12
     8b2:	95 01       	movw	r18, r10
     8b4:	45 2d       	mov	r20, r5
     8b6:	b4 01       	movw	r22, r8
     8b8:	ce 01       	movw	r24, r28
     8ba:	0e 94 af 03 	call	0x75e	; 0x75e <print_char>
		x_pos += 0x06;
     8be:	26 96       	adiw	r28, 0x06	; 6
	} while( (ch[cnt] >= 0x20) && (ch[cnt] <= 0x7F) );
     8c0:	f3 01       	movw	r30, r6
     8c2:	80 81       	ld	r24, Z
     8c4:	80 52       	subi	r24, 0x20	; 32
     8c6:	80 36       	cpi	r24, 0x60	; 96
     8c8:	80 f3       	brcs	.-32     	; 0x8aa <print_str+0x2a>
}
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	1f 91       	pop	r17
     8d0:	0f 91       	pop	r16
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	bf 90       	pop	r11
     8dc:	af 90       	pop	r10
     8de:	9f 90       	pop	r9
     8e0:	8f 90       	pop	r8
     8e2:	7f 90       	pop	r7
     8e4:	6f 90       	pop	r6
     8e6:	5f 90       	pop	r5
     8e8:	08 95       	ret

000008ea <draw_calc>:


void draw_calc()
{
     8ea:	ef 92       	push	r14
     8ec:	ff 92       	push	r15
     8ee:	0f 93       	push	r16
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
	//draw top menu for choosing decimal system
	draw_line(0, 20, MAX_X, 20, WHITE);
     8f6:	0f ef       	ldi	r16, 0xFF	; 255
     8f8:	1f ef       	ldi	r17, 0xFF	; 255
     8fa:	24 e1       	ldi	r18, 0x14	; 20
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 ef       	ldi	r20, 0xF0	; 240
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	64 e1       	ldi	r22, 0x14	; 20
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 02 03 	call	0x604	; 0x604 <draw_line>
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
     90e:	cc e3       	ldi	r28, 0x3C	; 60
     910:	d0 e0       	ldi	r29, 0x00	; 0
	{
		draw_line(i, 0, i, 20, WHITE);
     912:	0f ef       	ldi	r16, 0xFF	; 255
     914:	1f ef       	ldi	r17, 0xFF	; 255
     916:	24 e1       	ldi	r18, 0x14	; 20
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	ae 01       	movw	r20, r28
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	0e 94 02 03 	call	0x604	; 0x604 <draw_line>

void draw_calc()
{
	//draw top menu for choosing decimal system
	draw_line(0, 20, MAX_X, 20, WHITE);
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
     926:	ec 96       	adiw	r28, 0x3c	; 60
     928:	c0 3f       	cpi	r28, 0xF0	; 240
     92a:	d1 05       	cpc	r29, r1
     92c:	91 f7       	brne	.-28     	; 0x912 <draw_calc+0x28>
     92e:	c4 e6       	ldi	r28, 0x64	; 100
     930:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	//draw actual calculator lines
	for (int j = 100; j < MAX_Y; j = j + (MAX_Y - 100) / 5)
	{
		draw_line(0, j, MAX_X, j, WHITE);
     932:	0f ef       	ldi	r16, 0xFF	; 255
     934:	1f ef       	ldi	r17, 0xFF	; 255
     936:	9e 01       	movw	r18, r28
     938:	40 ef       	ldi	r20, 0xF0	; 240
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	be 01       	movw	r22, r28
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 02 03 	call	0x604	; 0x604 <draw_line>
	{
		draw_line(i, 0, i, 20, WHITE);
	}
	
	//draw actual calculator lines
	for (int j = 100; j < MAX_Y; j = j + (MAX_Y - 100) / 5)
     946:	ac 96       	adiw	r28, 0x2c	; 44
     948:	c0 34       	cpi	r28, 0x40	; 64
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	d8 07       	cpc	r29, r24
     94e:	89 f7       	brne	.-30     	; 0x932 <draw_calc+0x48>
     950:	cc e3       	ldi	r28, 0x3C	; 60
     952:	d0 e0       	ldi	r29, 0x00	; 0
		draw_line(0, j, MAX_X, j, WHITE);
	}
	
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
	{
		draw_line(i, 100, i, MAX_Y - (MAX_Y - 100) / 5, WHITE);
     954:	0f ef       	ldi	r16, 0xFF	; 255
     956:	1f ef       	ldi	r17, 0xFF	; 255
     958:	24 e1       	ldi	r18, 0x14	; 20
     95a:	31 e0       	ldi	r19, 0x01	; 1
     95c:	ae 01       	movw	r20, r28
     95e:	64 e6       	ldi	r22, 0x64	; 100
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	ce 01       	movw	r24, r28
     964:	0e 94 02 03 	call	0x604	; 0x604 <draw_line>
	for (int j = 100; j < MAX_Y; j = j + (MAX_Y - 100) / 5)
	{
		draw_line(0, j, MAX_X, j, WHITE);
	}
	
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
     968:	ec 96       	adiw	r28, 0x3c	; 60
     96a:	c0 3f       	cpi	r28, 0xF0	; 240
     96c:	d1 05       	cpc	r29, r1
     96e:	91 f7       	brne	.-28     	; 0x954 <draw_calc+0x6a>
     970:	c0 e3       	ldi	r28, 0x30	; 48
     972:	d0 e0       	ldi	r29, 0x00	; 0
		draw_line(i, 100, i, MAX_Y - (MAX_Y - 100) / 5, WHITE);
	}
	
	for (int i = MAX_X / 5; i < MAX_X; i = i + MAX_X / 6)
	{
		draw_line(i, MAX_Y - (MAX_Y - 100) / 6, i, MAX_Y, WHITE);
     974:	0f ef       	ldi	r16, 0xFF	; 255
     976:	1f ef       	ldi	r17, 0xFF	; 255
     978:	20 e4       	ldi	r18, 0x40	; 64
     97a:	31 e0       	ldi	r19, 0x01	; 1
     97c:	ae 01       	movw	r20, r28
     97e:	6c e1       	ldi	r22, 0x1C	; 28
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	ce 01       	movw	r24, r28
     984:	0e 94 02 03 	call	0x604	; 0x604 <draw_line>
	for (int i = MAX_X / 4; i < MAX_X; i = i + MAX_X / 4)
	{
		draw_line(i, 100, i, MAX_Y - (MAX_Y - 100) / 5, WHITE);
	}
	
	for (int i = MAX_X / 5; i < MAX_X; i = i + MAX_X / 6)
     988:	a8 96       	adiw	r28, 0x28	; 40
     98a:	c8 3f       	cpi	r28, 0xF8	; 248
     98c:	d1 05       	cpc	r29, r1
     98e:	91 f7       	brne	.-28     	; 0x974 <draw_calc+0x8a>
	{
		draw_line(i, MAX_Y - (MAX_Y - 100) / 6, i, MAX_Y, WHITE);
	}
	
	//draw characters
	print_str(200, 5, 2, WHITE, BLACK, "N I B \0");
     990:	0f 2e       	mov	r0, r31
     992:	f0 e6       	ldi	r31, 0x60	; 96
     994:	ef 2e       	mov	r14, r31
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	ff 2e       	mov	r15, r31
     99a:	f0 2d       	mov	r31, r0
     99c:	00 e0       	ldi	r16, 0x00	; 0
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	2f ef       	ldi	r18, 0xFF	; 255
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	42 e0       	ldi	r20, 0x02	; 2
     9a6:	65 e0       	ldi	r22, 0x05	; 5
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	88 ec       	ldi	r24, 0xC8	; 200
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(140, 5, 2, WHITE, BLACK, "T C O \0");
     9b2:	0f 2e       	mov	r0, r31
     9b4:	f8 e6       	ldi	r31, 0x68	; 104
     9b6:	ef 2e       	mov	r14, r31
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	ff 2e       	mov	r15, r31
     9bc:	f0 2d       	mov	r31, r0
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	42 e0       	ldi	r20, 0x02	; 2
     9c4:	65 e0       	ldi	r22, 0x05	; 5
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	8c e8       	ldi	r24, 0x8C	; 140
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(80, 5, 2, WHITE, BLACK, "C E D \0");
     9d0:	0f 2e       	mov	r0, r31
     9d2:	f0 e7       	ldi	r31, 0x70	; 112
     9d4:	ef 2e       	mov	r14, r31
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	ff 2e       	mov	r15, r31
     9da:	f0 2d       	mov	r31, r0
     9dc:	2f ef       	ldi	r18, 0xFF	; 255
     9de:	3f ef       	ldi	r19, 0xFF	; 255
     9e0:	42 e0       	ldi	r20, 0x02	; 2
     9e2:	65 e0       	ldi	r22, 0x05	; 5
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	80 e5       	ldi	r24, 0x50	; 80
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(20, 5, 2, WHITE, BLACK, "X E H \0");
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f8 e7       	ldi	r31, 0x78	; 120
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	ff 2e       	mov	r15, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	3f ef       	ldi	r19, 0xFF	; 255
     9fe:	42 e0       	ldi	r20, 0x02	; 2
     a00:	65 e0       	ldi	r22, 0x05	; 5
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	84 e1       	ldi	r24, 0x14	; 20
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	
	print_str(200, 110, 3, WHITE, BLACK, "7 \0");
     a0c:	0f 2e       	mov	r0, r31
     a0e:	f0 e8       	ldi	r31, 0x80	; 128
     a10:	ef 2e       	mov	r14, r31
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	ff 2e       	mov	r15, r31
     a16:	f0 2d       	mov	r31, r0
     a18:	2f ef       	ldi	r18, 0xFF	; 255
     a1a:	3f ef       	ldi	r19, 0xFF	; 255
     a1c:	43 e0       	ldi	r20, 0x03	; 3
     a1e:	6e e6       	ldi	r22, 0x6E	; 110
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	88 ec       	ldi	r24, 0xC8	; 200
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(140, 110, 3, WHITE, BLACK, "8 \0");
     a2a:	0f 2e       	mov	r0, r31
     a2c:	f4 e8       	ldi	r31, 0x84	; 132
     a2e:	ef 2e       	mov	r14, r31
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	ff 2e       	mov	r15, r31
     a34:	f0 2d       	mov	r31, r0
     a36:	2f ef       	ldi	r18, 0xFF	; 255
     a38:	3f ef       	ldi	r19, 0xFF	; 255
     a3a:	43 e0       	ldi	r20, 0x03	; 3
     a3c:	6e e6       	ldi	r22, 0x6E	; 110
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	8c e8       	ldi	r24, 0x8C	; 140
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(80, 110, 3, WHITE, BLACK, "9 \0");
     a48:	0f 2e       	mov	r0, r31
     a4a:	f8 e8       	ldi	r31, 0x88	; 136
     a4c:	ef 2e       	mov	r14, r31
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	ff 2e       	mov	r15, r31
     a52:	f0 2d       	mov	r31, r0
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	3f ef       	ldi	r19, 0xFF	; 255
     a58:	43 e0       	ldi	r20, 0x03	; 3
     a5a:	6e e6       	ldi	r22, 0x6E	; 110
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	80 e5       	ldi	r24, 0x50	; 80
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(20, 110, 3, WHITE, BLACK, "/ \0");
     a66:	0f 2e       	mov	r0, r31
     a68:	fc e8       	ldi	r31, 0x8C	; 140
     a6a:	ef 2e       	mov	r14, r31
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	ff 2e       	mov	r15, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	2f ef       	ldi	r18, 0xFF	; 255
     a74:	3f ef       	ldi	r19, 0xFF	; 255
     a76:	43 e0       	ldi	r20, 0x03	; 3
     a78:	6e e6       	ldi	r22, 0x6E	; 110
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	84 e1       	ldi	r24, 0x14	; 20
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	
	print_str(200, 154, 3, WHITE, BLACK, "4 \0");
     a84:	0f 2e       	mov	r0, r31
     a86:	f0 e9       	ldi	r31, 0x90	; 144
     a88:	ef 2e       	mov	r14, r31
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	ff 2e       	mov	r15, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	3f ef       	ldi	r19, 0xFF	; 255
     a94:	43 e0       	ldi	r20, 0x03	; 3
     a96:	6a e9       	ldi	r22, 0x9A	; 154
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	88 ec       	ldi	r24, 0xC8	; 200
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(140, 154, 3, WHITE, BLACK, "5 \0");
     aa2:	0f 2e       	mov	r0, r31
     aa4:	f4 e9       	ldi	r31, 0x94	; 148
     aa6:	ef 2e       	mov	r14, r31
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	ff 2e       	mov	r15, r31
     aac:	f0 2d       	mov	r31, r0
     aae:	2f ef       	ldi	r18, 0xFF	; 255
     ab0:	3f ef       	ldi	r19, 0xFF	; 255
     ab2:	43 e0       	ldi	r20, 0x03	; 3
     ab4:	6a e9       	ldi	r22, 0x9A	; 154
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	8c e8       	ldi	r24, 0x8C	; 140
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(80, 154, 3, WHITE, BLACK, "6 \0");
     ac0:	0f 2e       	mov	r0, r31
     ac2:	f8 e9       	ldi	r31, 0x98	; 152
     ac4:	ef 2e       	mov	r14, r31
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ff 2e       	mov	r15, r31
     aca:	f0 2d       	mov	r31, r0
     acc:	2f ef       	ldi	r18, 0xFF	; 255
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	43 e0       	ldi	r20, 0x03	; 3
     ad2:	6a e9       	ldi	r22, 0x9A	; 154
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e5       	ldi	r24, 0x50	; 80
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(20, 154, 3, WHITE, BLACK, "x \0");
     ade:	0f 2e       	mov	r0, r31
     ae0:	fc e9       	ldi	r31, 0x9C	; 156
     ae2:	ef 2e       	mov	r14, r31
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ff 2e       	mov	r15, r31
     ae8:	f0 2d       	mov	r31, r0
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	43 e0       	ldi	r20, 0x03	; 3
     af0:	6a e9       	ldi	r22, 0x9A	; 154
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	84 e1       	ldi	r24, 0x14	; 20
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	
	print_str(200, 198, 3, WHITE, BLACK, "1 \0");
     afc:	0f 2e       	mov	r0, r31
     afe:	f0 ea       	ldi	r31, 0xA0	; 160
     b00:	ef 2e       	mov	r14, r31
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ff 2e       	mov	r15, r31
     b06:	f0 2d       	mov	r31, r0
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	3f ef       	ldi	r19, 0xFF	; 255
     b0c:	43 e0       	ldi	r20, 0x03	; 3
     b0e:	66 ec       	ldi	r22, 0xC6	; 198
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	88 ec       	ldi	r24, 0xC8	; 200
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(140, 198, 3, WHITE, BLACK, "2 \0");
     b1a:	0f 2e       	mov	r0, r31
     b1c:	f4 ea       	ldi	r31, 0xA4	; 164
     b1e:	ef 2e       	mov	r14, r31
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ff 2e       	mov	r15, r31
     b24:	f0 2d       	mov	r31, r0
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	3f ef       	ldi	r19, 0xFF	; 255
     b2a:	43 e0       	ldi	r20, 0x03	; 3
     b2c:	66 ec       	ldi	r22, 0xC6	; 198
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	8c e8       	ldi	r24, 0x8C	; 140
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(80, 198, 3, WHITE, BLACK, "3 \0");
     b38:	0f 2e       	mov	r0, r31
     b3a:	f8 ea       	ldi	r31, 0xA8	; 168
     b3c:	ef 2e       	mov	r14, r31
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	ff 2e       	mov	r15, r31
     b42:	f0 2d       	mov	r31, r0
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	3f ef       	ldi	r19, 0xFF	; 255
     b48:	43 e0       	ldi	r20, 0x03	; 3
     b4a:	66 ec       	ldi	r22, 0xC6	; 198
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	80 e5       	ldi	r24, 0x50	; 80
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(20, 198, 3, WHITE, BLACK, "+ \0");
     b56:	0f 2e       	mov	r0, r31
     b58:	fc ea       	ldi	r31, 0xAC	; 172
     b5a:	ef 2e       	mov	r14, r31
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ff 2e       	mov	r15, r31
     b60:	f0 2d       	mov	r31, r0
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	3f ef       	ldi	r19, 0xFF	; 255
     b66:	43 e0       	ldi	r20, 0x03	; 3
     b68:	66 ec       	ldi	r22, 0xC6	; 198
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	84 e1       	ldi	r24, 0x14	; 20
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	
	print_str(200, 242, 3, WHITE, BLACK, "0 \0");
     b74:	0f 2e       	mov	r0, r31
     b76:	f0 eb       	ldi	r31, 0xB0	; 176
     b78:	ef 2e       	mov	r14, r31
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	ff 2e       	mov	r15, r31
     b7e:	f0 2d       	mov	r31, r0
     b80:	2f ef       	ldi	r18, 0xFF	; 255
     b82:	3f ef       	ldi	r19, 0xFF	; 255
     b84:	43 e0       	ldi	r20, 0x03	; 3
     b86:	62 ef       	ldi	r22, 0xF2	; 242
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	88 ec       	ldi	r24, 0xC8	; 200
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(140, 242, 3, WHITE, BLACK, "R L C \0");
     b92:	0f 2e       	mov	r0, r31
     b94:	f4 eb       	ldi	r31, 0xB4	; 180
     b96:	ef 2e       	mov	r14, r31
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ff 2e       	mov	r15, r31
     b9c:	f0 2d       	mov	r31, r0
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	3f ef       	ldi	r19, 0xFF	; 255
     ba2:	43 e0       	ldi	r20, 0x03	; 3
     ba4:	62 ef       	ldi	r22, 0xF2	; 242
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	8c e8       	ldi	r24, 0x8C	; 140
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(80, 242, 3, WHITE, BLACK, "= \0");
     bb0:	0f 2e       	mov	r0, r31
     bb2:	fc eb       	ldi	r31, 0xBC	; 188
     bb4:	ef 2e       	mov	r14, r31
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ff 2e       	mov	r15, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	3f ef       	ldi	r19, 0xFF	; 255
     bc0:	43 e0       	ldi	r20, 0x03	; 3
     bc2:	62 ef       	ldi	r22, 0xF2	; 242
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	80 e5       	ldi	r24, 0x50	; 80
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(20, 242, 3, WHITE, BLACK, "- \0");
     bce:	0f 2e       	mov	r0, r31
     bd0:	f0 ec       	ldi	r31, 0xC0	; 192
     bd2:	ef 2e       	mov	r14, r31
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	ff 2e       	mov	r15, r31
     bd8:	f0 2d       	mov	r31, r0
     bda:	2f ef       	ldi	r18, 0xFF	; 255
     bdc:	3f ef       	ldi	r19, 0xFF	; 255
     bde:	43 e0       	ldi	r20, 0x03	; 3
     be0:	62 ef       	ldi	r22, 0xF2	; 242
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	84 e1       	ldi	r24, 0x14	; 20
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	
	print_str(220, 286, 3, WHITE, BLACK, "A \0");
     bec:	0f 2e       	mov	r0, r31
     bee:	f4 ec       	ldi	r31, 0xC4	; 196
     bf0:	ef 2e       	mov	r14, r31
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	ff 2e       	mov	r15, r31
     bf6:	f0 2d       	mov	r31, r0
     bf8:	2f ef       	ldi	r18, 0xFF	; 255
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	43 e0       	ldi	r20, 0x03	; 3
     bfe:	6e e1       	ldi	r22, 0x1E	; 30
     c00:	71 e0       	ldi	r23, 0x01	; 1
     c02:	8c ed       	ldi	r24, 0xDC	; 220
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(180, 286, 3, WHITE, BLACK, "B \0");
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f8 ec       	ldi	r31, 0xC8	; 200
     c0e:	ef 2e       	mov	r14, r31
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ff 2e       	mov	r15, r31
     c14:	f0 2d       	mov	r31, r0
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	3f ef       	ldi	r19, 0xFF	; 255
     c1a:	43 e0       	ldi	r20, 0x03	; 3
     c1c:	6e e1       	ldi	r22, 0x1E	; 30
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	84 eb       	ldi	r24, 0xB4	; 180
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(150, 286, 3, WHITE, BLACK, "C \0");
     c28:	0f 2e       	mov	r0, r31
     c2a:	fc ec       	ldi	r31, 0xCC	; 204
     c2c:	ef 2e       	mov	r14, r31
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ff 2e       	mov	r15, r31
     c32:	f0 2d       	mov	r31, r0
     c34:	2f ef       	ldi	r18, 0xFF	; 255
     c36:	3f ef       	ldi	r19, 0xFF	; 255
     c38:	43 e0       	ldi	r20, 0x03	; 3
     c3a:	6e e1       	ldi	r22, 0x1E	; 30
     c3c:	71 e0       	ldi	r23, 0x01	; 1
     c3e:	86 e9       	ldi	r24, 0x96	; 150
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(100, 286, 3, WHITE, BLACK, "D \0");
     c46:	0f 2e       	mov	r0, r31
     c48:	f0 ed       	ldi	r31, 0xD0	; 208
     c4a:	ef 2e       	mov	r14, r31
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ff 2e       	mov	r15, r31
     c50:	f0 2d       	mov	r31, r0
     c52:	2f ef       	ldi	r18, 0xFF	; 255
     c54:	3f ef       	ldi	r19, 0xFF	; 255
     c56:	43 e0       	ldi	r20, 0x03	; 3
     c58:	6e e1       	ldi	r22, 0x1E	; 30
     c5a:	71 e0       	ldi	r23, 0x01	; 1
     c5c:	84 e6       	ldi	r24, 0x64	; 100
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(60, 286, 3, WHITE, BLACK, "E \0");
     c64:	0f 2e       	mov	r0, r31
     c66:	f4 ed       	ldi	r31, 0xD4	; 212
     c68:	ef 2e       	mov	r14, r31
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	3f ef       	ldi	r19, 0xFF	; 255
     c74:	43 e0       	ldi	r20, 0x03	; 3
     c76:	6e e1       	ldi	r22, 0x1E	; 30
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	8c e3       	ldi	r24, 0x3C	; 60
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
	print_str(20, 286, 3, WHITE, BLACK, "F \0");
     c82:	0f 2e       	mov	r0, r31
     c84:	f8 ed       	ldi	r31, 0xD8	; 216
     c86:	ef 2e       	mov	r14, r31
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	ff 2e       	mov	r15, r31
     c8c:	f0 2d       	mov	r31, r0
     c8e:	2f ef       	ldi	r18, 0xFF	; 255
     c90:	3f ef       	ldi	r19, 0xFF	; 255
     c92:	43 e0       	ldi	r20, 0x03	; 3
     c94:	6e e1       	ldi	r22, 0x1E	; 30
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	84 e1       	ldi	r24, 0x14	; 20
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	08 95       	ret

00000cae <main>:

int main(void)
{
	init();
     cae:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <init>
	
	LCD_screen_color(BLACK);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 ad 02 	call	0x55a	; 0x55a <LCD_screen_color>
	
	draw_calc();
     cba:	0e 94 75 04 	call	0x8ea	; 0x8ea <draw_calc>
	
	int n = calculator(0, 0, 0, 0);
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 49 00 	call	0x92	; 0x92 <calculator>
			
			//DEC
			if (T_X >= 60 && T_X < 120 && T_Y <= 20 && T_Y > 0)
			{
				print_str(50, 50, 3, WHITE, BLACK, "C E D \0");
				OCR1A = 1500;
     cce:	cc ed       	ldi	r28, 0xDC	; 220
     cd0:	d5 e0       	ldi	r29, 0x05	; 5
	
	int n = calculator(0, 0, 0, 0);
	
    while (1) 
    {
		if (getBit(PIND, T_IRQ) == 0)
     cd2:	80 99       	sbic	0x10, 0	; 16
     cd4:	fe cf       	rjmp	.-4      	; 0xcd2 <main+0x24>
		{
			touch_read_xy();
     cd6:	0e 94 73 00 	call	0xe6	; 0xe6 <touch_read_xy>
			
			T_X = (T_X - 80) / 8;
     cda:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <__data_end>
     cde:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <__data_end+0x1>
     ce2:	40 55       	subi	r20, 0x50	; 80
     ce4:	51 09       	sbc	r21, r1
     ce6:	56 95       	lsr	r21
     ce8:	47 95       	ror	r20
     cea:	56 95       	lsr	r21
     cec:	47 95       	ror	r20
     cee:	56 95       	lsr	r21
     cf0:	47 95       	ror	r20
     cf2:	50 93 bd 02 	sts	0x02BD, r21	; 0x8002bd <__data_end+0x1>
     cf6:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <__data_end>
			T_Y = (T_Y - 80) / 6;
     cfa:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <T_Y>
     cfe:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <T_Y+0x1>
     d02:	20 55       	subi	r18, 0x50	; 80
     d04:	31 09       	sbc	r19, r1
     d06:	ab ea       	ldi	r26, 0xAB	; 171
     d08:	ba ea       	ldi	r27, 0xAA	; 170
     d0a:	0e 94 bf 0a 	call	0x157e	; 0x157e <__umulhisi3>
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <T_Y+0x1>
     d1a:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <T_Y>
			
			
			//HEX
			if (T_X <= 60 && T_X > 0 && T_Y <= 20 && T_Y > 0)
     d1e:	41 50       	subi	r20, 0x01	; 1
     d20:	51 09       	sbc	r21, r1
     d22:	4c 33       	cpi	r20, 0x3C	; 60
     d24:	51 05       	cpc	r21, r1
     d26:	c0 f4       	brcc	.+48     	; 0xd58 <main+0xaa>
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	44 97       	sbiw	r24, 0x14	; 20
     d2c:	c0 f5       	brcc	.+112    	; 0xd9e <main+0xf0>
			{
				print_str(50, 50, 3, WHITE, BLACK, "X E H \0");
     d2e:	0f 2e       	mov	r0, r31
     d30:	f8 e7       	ldi	r31, 0x78	; 120
     d32:	ef 2e       	mov	r14, r31
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	ff 2e       	mov	r15, r31
     d38:	f0 2d       	mov	r31, r0
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	2f ef       	ldi	r18, 0xFF	; 255
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	43 e0       	ldi	r20, 0x03	; 3
     d44:	62 e3       	ldi	r22, 0x32	; 50
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	82 e3       	ldi	r24, 0x32	; 50
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     d50:	db bd       	out	0x2b, r29	; 43
     d52:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     d54:	d9 bd       	out	0x29, r29	; 41
     d56:	c8 bd       	out	0x28, r28	; 40
			}
			
			//DEC
			if (T_X >= 60 && T_X < 120 && T_Y <= 20 && T_Y > 0)
     d58:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     d5c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     d60:	cc 97       	sbiw	r24, 0x3c	; 60
     d62:	cc 97       	sbiw	r24, 0x3c	; 60
     d64:	e0 f4       	brcc	.+56     	; 0xd9e <main+0xf0>
     d66:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     d6a:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	44 97       	sbiw	r24, 0x14	; 20
     d72:	a8 f4       	brcc	.+42     	; 0xd9e <main+0xf0>
			{
				print_str(50, 50, 3, WHITE, BLACK, "C E D \0");
     d74:	0f 2e       	mov	r0, r31
     d76:	f0 e7       	ldi	r31, 0x70	; 112
     d78:	ef 2e       	mov	r14, r31
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ff 2e       	mov	r15, r31
     d7e:	f0 2d       	mov	r31, r0
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	3f ef       	ldi	r19, 0xFF	; 255
     d88:	43 e0       	ldi	r20, 0x03	; 3
     d8a:	62 e3       	ldi	r22, 0x32	; 50
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	82 e3       	ldi	r24, 0x32	; 50
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     d96:	db bd       	out	0x2b, r29	; 43
     d98:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     d9a:	d9 bd       	out	0x29, r29	; 41
     d9c:	c8 bd       	out	0x28, r28	; 40
			}
			
			//OCT
			if (T_X >= 120 && T_X < 180 && T_Y <= 20 && T_Y > 0)
     d9e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     da2:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     da6:	88 57       	subi	r24, 0x78	; 120
     da8:	91 09       	sbc	r25, r1
     daa:	cc 97       	sbiw	r24, 0x3c	; 60
     dac:	f8 f4       	brcc	.+62     	; 0xdec <main+0x13e>
     dae:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     db2:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     db6:	85 31       	cpi	r24, 0x15	; 21
     db8:	91 05       	cpc	r25, r1
     dba:	08 f0       	brcs	.+2      	; 0xdbe <main+0x110>
     dbc:	9a c3       	rjmp	.+1844   	; 0x14f2 <main+0x844>
     dbe:	89 2b       	or	r24, r25
     dc0:	c9 f1       	breq	.+114    	; 0xe34 <main+0x186>
			{
				print_str(50, 50, 3, WHITE, BLACK, "T C O \0");
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f8 e6       	ldi	r31, 0x68	; 104
     dc6:	ef 2e       	mov	r14, r31
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	ff 2e       	mov	r15, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	10 e0       	ldi	r17, 0x00	; 0
     dd2:	2f ef       	ldi	r18, 0xFF	; 255
     dd4:	3f ef       	ldi	r19, 0xFF	; 255
     dd6:	43 e0       	ldi	r20, 0x03	; 3
     dd8:	62 e3       	ldi	r22, 0x32	; 50
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	82 e3       	ldi	r24, 0x32	; 50
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     de4:	db bd       	out	0x2b, r29	; 43
     de6:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     de8:	d9 bd       	out	0x29, r29	; 41
     dea:	c8 bd       	out	0x28, r28	; 40
			}
			
			//BIN
			if (T_X >= 180 && T_X < 240 && T_Y <= 20 && T_Y > 0)
     dec:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     df0:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     df4:	84 5b       	subi	r24, 0xB4	; 180
     df6:	91 09       	sbc	r25, r1
     df8:	cc 97       	sbiw	r24, 0x3c	; 60
     dfa:	e0 f4       	brcc	.+56     	; 0xe34 <main+0x186>
     dfc:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     e00:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	44 97       	sbiw	r24, 0x14	; 20
     e08:	a8 f4       	brcc	.+42     	; 0xe34 <main+0x186>
			{
				print_str(50, 50, 3, WHITE, BLACK, "N I B \0");
     e0a:	0f 2e       	mov	r0, r31
     e0c:	f0 e6       	ldi	r31, 0x60	; 96
     e0e:	ef 2e       	mov	r14, r31
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	ff 2e       	mov	r15, r31
     e14:	f0 2d       	mov	r31, r0
     e16:	00 e0       	ldi	r16, 0x00	; 0
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	2f ef       	ldi	r18, 0xFF	; 255
     e1c:	3f ef       	ldi	r19, 0xFF	; 255
     e1e:	43 e0       	ldi	r20, 0x03	; 3
     e20:	62 e3       	ldi	r22, 0x32	; 50
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	82 e3       	ldi	r24, 0x32	; 50
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     e2c:	db bd       	out	0x2b, r29	; 43
     e2e:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     e30:	d9 bd       	out	0x29, r29	; 41
     e32:	c8 bd       	out	0x28, r28	; 40
			}
			
			//7
			if (T_X >= 180 && T_Y >= 100 && T_Y < 144)
     e34:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     e38:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     e3c:	84 3b       	cpi	r24, 0xB4	; 180
     e3e:	91 05       	cpc	r25, r1
     e40:	e8 f0       	brcs	.+58     	; 0xe7c <main+0x1ce>
     e42:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     e46:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     e4a:	84 56       	subi	r24, 0x64	; 100
     e4c:	91 09       	sbc	r25, r1
     e4e:	8c 97       	sbiw	r24, 0x2c	; 44
     e50:	d0 f5       	brcc	.+116    	; 0xec6 <main+0x218>
			{
				print_str(50, 50, 3, WHITE, BLACK, "7 \0");
     e52:	0f 2e       	mov	r0, r31
     e54:	f0 e8       	ldi	r31, 0x80	; 128
     e56:	ef 2e       	mov	r14, r31
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ff 2e       	mov	r15, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	00 e0       	ldi	r16, 0x00	; 0
     e60:	10 e0       	ldi	r17, 0x00	; 0
     e62:	2f ef       	ldi	r18, 0xFF	; 255
     e64:	3f ef       	ldi	r19, 0xFF	; 255
     e66:	43 e0       	ldi	r20, 0x03	; 3
     e68:	62 e3       	ldi	r22, 0x32	; 50
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	82 e3       	ldi	r24, 0x32	; 50
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     e74:	db bd       	out	0x2b, r29	; 43
     e76:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     e78:	d9 bd       	out	0x29, r29	; 41
     e7a:	c8 bd       	out	0x28, r28	; 40
			}
			
			//8
			if (T_X >= 120 && T_X < 180 && T_Y >= 100 && T_Y < 144)
     e7c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     e80:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     e84:	88 57       	subi	r24, 0x78	; 120
     e86:	91 09       	sbc	r25, r1
     e88:	cc 97       	sbiw	r24, 0x3c	; 60
     e8a:	e8 f4       	brcc	.+58     	; 0xec6 <main+0x218>
     e8c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     e90:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     e94:	84 56       	subi	r24, 0x64	; 100
     e96:	91 09       	sbc	r25, r1
     e98:	8c 97       	sbiw	r24, 0x2c	; 44
     e9a:	a8 f4       	brcc	.+42     	; 0xec6 <main+0x218>
			{
				print_str(50, 50, 3, WHITE, BLACK, "8 \0");
     e9c:	0f 2e       	mov	r0, r31
     e9e:	f4 e8       	ldi	r31, 0x84	; 132
     ea0:	ef 2e       	mov	r14, r31
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	ff 2e       	mov	r15, r31
     ea6:	f0 2d       	mov	r31, r0
     ea8:	00 e0       	ldi	r16, 0x00	; 0
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	2f ef       	ldi	r18, 0xFF	; 255
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	43 e0       	ldi	r20, 0x03	; 3
     eb2:	62 e3       	ldi	r22, 0x32	; 50
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	82 e3       	ldi	r24, 0x32	; 50
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     ebe:	db bd       	out	0x2b, r29	; 43
     ec0:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     ec2:	d9 bd       	out	0x29, r29	; 41
     ec4:	c8 bd       	out	0x28, r28	; 40
			}
			
			//9
			if (T_X >= 60 && T_X < 120 && T_Y >= 100 && T_Y < 144)
     ec6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     eca:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     ece:	cc 97       	sbiw	r24, 0x3c	; 60
     ed0:	cc 97       	sbiw	r24, 0x3c	; 60
     ed2:	08 f5       	brcc	.+66     	; 0xf16 <main+0x268>
     ed4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     ed8:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     edc:	84 36       	cpi	r24, 0x64	; 100
     ede:	91 05       	cpc	r25, r1
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <main+0x236>
     ee2:	40 c0       	rjmp	.+128    	; 0xf64 <main+0x2b6>
     ee4:	80 39       	cpi	r24, 0x90	; 144
     ee6:	91 05       	cpc	r25, r1
     ee8:	08 f0       	brcs	.+2      	; 0xeec <main+0x23e>
     eea:	11 c3       	rjmp	.+1570   	; 0x150e <main+0x860>
			{
				print_str(50, 50, 3, WHITE, BLACK, "9 \0");
     eec:	0f 2e       	mov	r0, r31
     eee:	f8 e8       	ldi	r31, 0x88	; 136
     ef0:	ef 2e       	mov	r14, r31
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	ff 2e       	mov	r15, r31
     ef6:	f0 2d       	mov	r31, r0
     ef8:	00 e0       	ldi	r16, 0x00	; 0
     efa:	10 e0       	ldi	r17, 0x00	; 0
     efc:	2f ef       	ldi	r18, 0xFF	; 255
     efe:	3f ef       	ldi	r19, 0xFF	; 255
     f00:	43 e0       	ldi	r20, 0x03	; 3
     f02:	62 e3       	ldi	r22, 0x32	; 50
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	82 e3       	ldi	r24, 0x32	; 50
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     f0e:	db bd       	out	0x2b, r29	; 43
     f10:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     f12:	d9 bd       	out	0x29, r29	; 41
     f14:	c8 bd       	out	0x28, r28	; 40
			}
			
			// /
			if (T_X < 60 && T_Y >= 100 && T_Y < 144)
     f16:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
     f1a:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
     f1e:	2c 33       	cpi	r18, 0x3C	; 60
     f20:	31 05       	cpc	r19, r1
     f22:	00 f5       	brcc	.+64     	; 0xf64 <main+0x2b6>
     f24:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     f28:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     f2c:	84 36       	cpi	r24, 0x64	; 100
     f2e:	91 05       	cpc	r25, r1
     f30:	c8 f0       	brcs	.+50     	; 0xf64 <main+0x2b6>
     f32:	80 39       	cpi	r24, 0x90	; 144
     f34:	91 05       	cpc	r25, r1
     f36:	08 f0       	brcs	.+2      	; 0xf3a <main+0x28c>
     f38:	c7 c2       	rjmp	.+1422   	; 0x14c8 <main+0x81a>
			{
				print_str(50, 50, 3, WHITE, BLACK, "/ \0");
     f3a:	0f 2e       	mov	r0, r31
     f3c:	fc e8       	ldi	r31, 0x8C	; 140
     f3e:	ef 2e       	mov	r14, r31
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	ff 2e       	mov	r15, r31
     f44:	f0 2d       	mov	r31, r0
     f46:	00 e0       	ldi	r16, 0x00	; 0
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	2f ef       	ldi	r18, 0xFF	; 255
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	43 e0       	ldi	r20, 0x03	; 3
     f50:	62 e3       	ldi	r22, 0x32	; 50
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	82 e3       	ldi	r24, 0x32	; 50
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     f5c:	db bd       	out	0x2b, r29	; 43
     f5e:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     f60:	d9 bd       	out	0x29, r29	; 41
     f62:	c8 bd       	out	0x28, r28	; 40
			}
			
			//4
			if (T_X >= 180 && T_Y >= 144 && T_Y < 188)
     f64:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     f68:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     f6c:	84 3b       	cpi	r24, 0xB4	; 180
     f6e:	91 05       	cpc	r25, r1
     f70:	f8 f0       	brcs	.+62     	; 0xfb0 <main+0x302>
     f72:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     f76:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     f7a:	80 39       	cpi	r24, 0x90	; 144
     f7c:	91 05       	cpc	r25, r1
     f7e:	c0 f0       	brcs	.+48     	; 0xfb0 <main+0x302>
     f80:	8c 3b       	cpi	r24, 0xBC	; 188
     f82:	91 05       	cpc	r25, r1
     f84:	a8 f4       	brcc	.+42     	; 0xfb0 <main+0x302>
			{
				print_str(50, 50, 3, WHITE, BLACK, "4 \0");
     f86:	0f 2e       	mov	r0, r31
     f88:	f0 e9       	ldi	r31, 0x90	; 144
     f8a:	ef 2e       	mov	r14, r31
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	ff 2e       	mov	r15, r31
     f90:	f0 2d       	mov	r31, r0
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	43 e0       	ldi	r20, 0x03	; 3
     f9c:	62 e3       	ldi	r22, 0x32	; 50
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	82 e3       	ldi	r24, 0x32	; 50
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     fa8:	db bd       	out	0x2b, r29	; 43
     faa:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     fac:	d9 bd       	out	0x29, r29	; 41
     fae:	c8 bd       	out	0x28, r28	; 40
			}
			
			//5
			if (T_X >= 120 && T_X < 180 && T_Y >= 144 && T_Y < 188)
     fb0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     fb4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
     fb8:	88 57       	subi	r24, 0x78	; 120
     fba:	91 09       	sbc	r25, r1
     fbc:	cc 97       	sbiw	r24, 0x3c	; 60
     fbe:	e8 f4       	brcc	.+58     	; 0xffa <main+0x34c>
     fc0:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
     fc4:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
     fc8:	80 59       	subi	r24, 0x90	; 144
     fca:	91 09       	sbc	r25, r1
     fcc:	8c 97       	sbiw	r24, 0x2c	; 44
     fce:	a8 f4       	brcc	.+42     	; 0xffa <main+0x34c>
			{
				print_str(50, 50, 3, WHITE, BLACK, "5 \0");
     fd0:	0f 2e       	mov	r0, r31
     fd2:	f4 e9       	ldi	r31, 0x94	; 148
     fd4:	ef 2e       	mov	r14, r31
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	ff 2e       	mov	r15, r31
     fda:	f0 2d       	mov	r31, r0
     fdc:	00 e0       	ldi	r16, 0x00	; 0
     fde:	10 e0       	ldi	r17, 0x00	; 0
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	3f ef       	ldi	r19, 0xFF	; 255
     fe4:	43 e0       	ldi	r20, 0x03	; 3
     fe6:	62 e3       	ldi	r22, 0x32	; 50
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	82 e3       	ldi	r24, 0x32	; 50
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
     ff2:	db bd       	out	0x2b, r29	; 43
     ff4:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
     ff6:	d9 bd       	out	0x29, r29	; 41
     ff8:	c8 bd       	out	0x28, r28	; 40
			}
			
			//6
			if (T_X >= 60 && T_X < 120 && T_Y >= 144 && T_Y < 188)
     ffa:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
     ffe:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    1002:	cc 97       	sbiw	r24, 0x3c	; 60
    1004:	cc 97       	sbiw	r24, 0x3c	; 60
    1006:	08 f5       	brcc	.+66     	; 0x104a <main+0x39c>
    1008:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    100c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1010:	80 39       	cpi	r24, 0x90	; 144
    1012:	91 05       	cpc	r25, r1
    1014:	08 f4       	brcc	.+2      	; 0x1018 <main+0x36a>
    1016:	40 c0       	rjmp	.+128    	; 0x1098 <main+0x3ea>
    1018:	8c 3b       	cpi	r24, 0xBC	; 188
    101a:	91 05       	cpc	r25, r1
    101c:	08 f0       	brcs	.+2      	; 0x1020 <main+0x372>
    101e:	84 c2       	rjmp	.+1288   	; 0x1528 <main+0x87a>
			{
				print_str(50, 50, 3, WHITE, BLACK, "6 \0");
    1020:	0f 2e       	mov	r0, r31
    1022:	f8 e9       	ldi	r31, 0x98	; 152
    1024:	ef 2e       	mov	r14, r31
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ff 2e       	mov	r15, r31
    102a:	f0 2d       	mov	r31, r0
    102c:	00 e0       	ldi	r16, 0x00	; 0
    102e:	10 e0       	ldi	r17, 0x00	; 0
    1030:	2f ef       	ldi	r18, 0xFF	; 255
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	43 e0       	ldi	r20, 0x03	; 3
    1036:	62 e3       	ldi	r22, 0x32	; 50
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	82 e3       	ldi	r24, 0x32	; 50
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1042:	db bd       	out	0x2b, r29	; 43
    1044:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    1046:	d9 bd       	out	0x29, r29	; 41
    1048:	c8 bd       	out	0x28, r28	; 40
			}
			
			//x
			if (T_X < 60 && T_Y >= 144 && T_Y < 188)
    104a:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
    104e:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
    1052:	2c 33       	cpi	r18, 0x3C	; 60
    1054:	31 05       	cpc	r19, r1
    1056:	00 f5       	brcc	.+64     	; 0x1098 <main+0x3ea>
    1058:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    105c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1060:	80 39       	cpi	r24, 0x90	; 144
    1062:	91 05       	cpc	r25, r1
    1064:	c8 f0       	brcs	.+50     	; 0x1098 <main+0x3ea>
    1066:	8c 3b       	cpi	r24, 0xBC	; 188
    1068:	91 05       	cpc	r25, r1
    106a:	08 f0       	brcs	.+2      	; 0x106e <main+0x3c0>
    106c:	32 c2       	rjmp	.+1124   	; 0x14d2 <main+0x824>
			{
				print_str(50, 50, 3, WHITE, BLACK, "x \0");
    106e:	0f 2e       	mov	r0, r31
    1070:	fc e9       	ldi	r31, 0x9C	; 156
    1072:	ef 2e       	mov	r14, r31
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	ff 2e       	mov	r15, r31
    1078:	f0 2d       	mov	r31, r0
    107a:	00 e0       	ldi	r16, 0x00	; 0
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	2f ef       	ldi	r18, 0xFF	; 255
    1080:	3f ef       	ldi	r19, 0xFF	; 255
    1082:	43 e0       	ldi	r20, 0x03	; 3
    1084:	62 e3       	ldi	r22, 0x32	; 50
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	82 e3       	ldi	r24, 0x32	; 50
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1090:	db bd       	out	0x2b, r29	; 43
    1092:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    1094:	d9 bd       	out	0x29, r29	; 41
    1096:	c8 bd       	out	0x28, r28	; 40
			}
			
			//1
			if (T_X >= 180 && T_Y >= 188 && T_Y < 232)
    1098:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    109c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    10a0:	84 3b       	cpi	r24, 0xB4	; 180
    10a2:	91 05       	cpc	r25, r1
    10a4:	f8 f0       	brcs	.+62     	; 0x10e4 <main+0x436>
    10a6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    10aa:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    10ae:	8c 3b       	cpi	r24, 0xBC	; 188
    10b0:	91 05       	cpc	r25, r1
    10b2:	c0 f0       	brcs	.+48     	; 0x10e4 <main+0x436>
    10b4:	88 3e       	cpi	r24, 0xE8	; 232
    10b6:	91 05       	cpc	r25, r1
    10b8:	a8 f4       	brcc	.+42     	; 0x10e4 <main+0x436>
			{
				print_str(50, 50, 3, WHITE, BLACK, "1 \0");
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f0 ea       	ldi	r31, 0xA0	; 160
    10be:	ef 2e       	mov	r14, r31
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	ff 2e       	mov	r15, r31
    10c4:	f0 2d       	mov	r31, r0
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	2f ef       	ldi	r18, 0xFF	; 255
    10cc:	3f ef       	ldi	r19, 0xFF	; 255
    10ce:	43 e0       	ldi	r20, 0x03	; 3
    10d0:	62 e3       	ldi	r22, 0x32	; 50
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	82 e3       	ldi	r24, 0x32	; 50
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    10dc:	db bd       	out	0x2b, r29	; 43
    10de:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    10e0:	d9 bd       	out	0x29, r29	; 41
    10e2:	c8 bd       	out	0x28, r28	; 40
			}
			
			//2
			if (T_X >= 120 && T_X < 180 && T_Y >= 188 && T_Y < 232)
    10e4:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    10e8:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    10ec:	88 57       	subi	r24, 0x78	; 120
    10ee:	91 09       	sbc	r25, r1
    10f0:	cc 97       	sbiw	r24, 0x3c	; 60
    10f2:	e8 f4       	brcc	.+58     	; 0x112e <main+0x480>
    10f4:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    10f8:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    10fc:	8c 5b       	subi	r24, 0xBC	; 188
    10fe:	91 09       	sbc	r25, r1
    1100:	8c 97       	sbiw	r24, 0x2c	; 44
    1102:	a8 f4       	brcc	.+42     	; 0x112e <main+0x480>
			{
				print_str(50, 50, 3, WHITE, BLACK, "2 \0");
    1104:	0f 2e       	mov	r0, r31
    1106:	f4 ea       	ldi	r31, 0xA4	; 164
    1108:	ef 2e       	mov	r14, r31
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	ff 2e       	mov	r15, r31
    110e:	f0 2d       	mov	r31, r0
    1110:	00 e0       	ldi	r16, 0x00	; 0
    1112:	10 e0       	ldi	r17, 0x00	; 0
    1114:	2f ef       	ldi	r18, 0xFF	; 255
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	43 e0       	ldi	r20, 0x03	; 3
    111a:	62 e3       	ldi	r22, 0x32	; 50
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	82 e3       	ldi	r24, 0x32	; 50
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1126:	db bd       	out	0x2b, r29	; 43
    1128:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    112a:	d9 bd       	out	0x29, r29	; 41
    112c:	c8 bd       	out	0x28, r28	; 40
			}
			
			//3
			if (T_X >= 60 && T_X < 120 && T_Y >= 188 && T_Y < 232)
    112e:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1132:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    1136:	cc 97       	sbiw	r24, 0x3c	; 60
    1138:	cc 97       	sbiw	r24, 0x3c	; 60
    113a:	08 f5       	brcc	.+66     	; 0x117e <main+0x4d0>
    113c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1140:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1144:	8c 3b       	cpi	r24, 0xBC	; 188
    1146:	91 05       	cpc	r25, r1
    1148:	08 f4       	brcc	.+2      	; 0x114c <main+0x49e>
    114a:	40 c0       	rjmp	.+128    	; 0x11cc <main+0x51e>
    114c:	88 3e       	cpi	r24, 0xE8	; 232
    114e:	91 05       	cpc	r25, r1
    1150:	08 f0       	brcs	.+2      	; 0x1154 <main+0x4a6>
    1152:	f7 c1       	rjmp	.+1006   	; 0x1542 <main+0x894>
			{
				print_str(50, 50, 3, WHITE, BLACK, "3 \0");
    1154:	0f 2e       	mov	r0, r31
    1156:	f8 ea       	ldi	r31, 0xA8	; 168
    1158:	ef 2e       	mov	r14, r31
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	ff 2e       	mov	r15, r31
    115e:	f0 2d       	mov	r31, r0
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	10 e0       	ldi	r17, 0x00	; 0
    1164:	2f ef       	ldi	r18, 0xFF	; 255
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	43 e0       	ldi	r20, 0x03	; 3
    116a:	62 e3       	ldi	r22, 0x32	; 50
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	82 e3       	ldi	r24, 0x32	; 50
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1176:	db bd       	out	0x2b, r29	; 43
    1178:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    117a:	d9 bd       	out	0x29, r29	; 41
    117c:	c8 bd       	out	0x28, r28	; 40
			}
			
			//x
			if (T_X < 60 && T_Y >= 188 && T_Y < 232)
    117e:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
    1182:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
    1186:	2c 33       	cpi	r18, 0x3C	; 60
    1188:	31 05       	cpc	r19, r1
    118a:	00 f5       	brcc	.+64     	; 0x11cc <main+0x51e>
    118c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1190:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1194:	8c 3b       	cpi	r24, 0xBC	; 188
    1196:	91 05       	cpc	r25, r1
    1198:	c8 f0       	brcs	.+50     	; 0x11cc <main+0x51e>
    119a:	88 3e       	cpi	r24, 0xE8	; 232
    119c:	91 05       	cpc	r25, r1
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <main+0x4f4>
    11a0:	9d c1       	rjmp	.+826    	; 0x14dc <main+0x82e>
			{
				print_str(50, 50, 3, WHITE, BLACK, "+ \0");
    11a2:	0f 2e       	mov	r0, r31
    11a4:	fc ea       	ldi	r31, 0xAC	; 172
    11a6:	ef 2e       	mov	r14, r31
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	ff 2e       	mov	r15, r31
    11ac:	f0 2d       	mov	r31, r0
    11ae:	00 e0       	ldi	r16, 0x00	; 0
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	2f ef       	ldi	r18, 0xFF	; 255
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	43 e0       	ldi	r20, 0x03	; 3
    11b8:	62 e3       	ldi	r22, 0x32	; 50
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	82 e3       	ldi	r24, 0x32	; 50
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    11c4:	db bd       	out	0x2b, r29	; 43
    11c6:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    11c8:	d9 bd       	out	0x29, r29	; 41
    11ca:	c8 bd       	out	0x28, r28	; 40
			}
			
			//0
			if (T_X >= 180 && T_Y >= 232 && T_Y < 276)
    11cc:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    11d0:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    11d4:	84 3b       	cpi	r24, 0xB4	; 180
    11d6:	91 05       	cpc	r25, r1
    11d8:	f8 f0       	brcs	.+62     	; 0x1218 <main+0x56a>
    11da:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    11de:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    11e2:	88 3e       	cpi	r24, 0xE8	; 232
    11e4:	91 05       	cpc	r25, r1
    11e6:	c0 f0       	brcs	.+48     	; 0x1218 <main+0x56a>
    11e8:	84 31       	cpi	r24, 0x14	; 20
    11ea:	91 40       	sbci	r25, 0x01	; 1
    11ec:	a8 f4       	brcc	.+42     	; 0x1218 <main+0x56a>
			{
				print_str(50, 50, 3, WHITE, BLACK, "0 \0");
    11ee:	0f 2e       	mov	r0, r31
    11f0:	f0 eb       	ldi	r31, 0xB0	; 176
    11f2:	ef 2e       	mov	r14, r31
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	ff 2e       	mov	r15, r31
    11f8:	f0 2d       	mov	r31, r0
    11fa:	00 e0       	ldi	r16, 0x00	; 0
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	2f ef       	ldi	r18, 0xFF	; 255
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	43 e0       	ldi	r20, 0x03	; 3
    1204:	62 e3       	ldi	r22, 0x32	; 50
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	82 e3       	ldi	r24, 0x32	; 50
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1210:	db bd       	out	0x2b, r29	; 43
    1212:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    1214:	d9 bd       	out	0x29, r29	; 41
    1216:	c8 bd       	out	0x28, r28	; 40
			}
			
			//CLR
			if (T_X >= 120 && T_X < 180 && T_Y >= 232 && T_Y < 276)
    1218:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    121c:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    1220:	88 57       	subi	r24, 0x78	; 120
    1222:	91 09       	sbc	r25, r1
    1224:	cc 97       	sbiw	r24, 0x3c	; 60
    1226:	e8 f4       	brcc	.+58     	; 0x1262 <main+0x5b4>
    1228:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    122c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1230:	88 5e       	subi	r24, 0xE8	; 232
    1232:	91 09       	sbc	r25, r1
    1234:	8c 97       	sbiw	r24, 0x2c	; 44
    1236:	a8 f4       	brcc	.+42     	; 0x1262 <main+0x5b4>
			{
				print_str(50, 50, 3, WHITE, BLACK, "R L C \0");
    1238:	0f 2e       	mov	r0, r31
    123a:	f4 eb       	ldi	r31, 0xB4	; 180
    123c:	ef 2e       	mov	r14, r31
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	ff 2e       	mov	r15, r31
    1242:	f0 2d       	mov	r31, r0
    1244:	00 e0       	ldi	r16, 0x00	; 0
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	2f ef       	ldi	r18, 0xFF	; 255
    124a:	3f ef       	ldi	r19, 0xFF	; 255
    124c:	43 e0       	ldi	r20, 0x03	; 3
    124e:	62 e3       	ldi	r22, 0x32	; 50
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	82 e3       	ldi	r24, 0x32	; 50
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    125a:	db bd       	out	0x2b, r29	; 43
    125c:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    125e:	d9 bd       	out	0x29, r29	; 41
    1260:	c8 bd       	out	0x28, r28	; 40
			}
			
			//=
			if (T_X >= 60 && T_X < 120 && T_Y >= 232 && T_Y < 276)
    1262:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1266:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    126a:	cc 97       	sbiw	r24, 0x3c	; 60
    126c:	cc 97       	sbiw	r24, 0x3c	; 60
    126e:	08 f5       	brcc	.+66     	; 0x12b2 <main+0x604>
    1270:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1274:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1278:	88 3e       	cpi	r24, 0xE8	; 232
    127a:	91 05       	cpc	r25, r1
    127c:	08 f4       	brcc	.+2      	; 0x1280 <main+0x5d2>
    127e:	41 c0       	rjmp	.+130    	; 0x1302 <main+0x654>
    1280:	84 31       	cpi	r24, 0x14	; 20
    1282:	91 40       	sbci	r25, 0x01	; 1
    1284:	08 f0       	brcs	.+2      	; 0x1288 <main+0x5da>
    1286:	6a c1       	rjmp	.+724    	; 0x155c <main+0x8ae>
			{
				print_str(50, 50, 3, WHITE, BLACK, "= \0");
    1288:	0f 2e       	mov	r0, r31
    128a:	fc eb       	ldi	r31, 0xBC	; 188
    128c:	ef 2e       	mov	r14, r31
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	ff 2e       	mov	r15, r31
    1292:	f0 2d       	mov	r31, r0
    1294:	00 e0       	ldi	r16, 0x00	; 0
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	2f ef       	ldi	r18, 0xFF	; 255
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	43 e0       	ldi	r20, 0x03	; 3
    129e:	62 e3       	ldi	r22, 0x32	; 50
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	82 e3       	ldi	r24, 0x32	; 50
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    12aa:	db bd       	out	0x2b, r29	; 43
    12ac:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    12ae:	d9 bd       	out	0x29, r29	; 41
    12b0:	c8 bd       	out	0x28, r28	; 40
			}
			
			//-
			if (T_X < 60 && T_Y >= 232 && T_Y < 276)
    12b2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    12b6:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    12ba:	8c 33       	cpi	r24, 0x3C	; 60
    12bc:	91 05       	cpc	r25, r1
    12be:	08 f5       	brcc	.+66     	; 0x1302 <main+0x654>
    12c0:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <T_Y>
    12c4:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <T_Y+0x1>
    12c8:	28 3e       	cpi	r18, 0xE8	; 232
    12ca:	31 05       	cpc	r19, r1
    12cc:	d0 f0       	brcs	.+52     	; 0x1302 <main+0x654>
    12ce:	24 31       	cpi	r18, 0x14	; 20
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	34 07       	cpc	r19, r20
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <main+0x62a>
    12d6:	07 c1       	rjmp	.+526    	; 0x14e6 <main+0x838>
			{
				print_str(50, 50, 3, WHITE, BLACK, "- \0");
    12d8:	0f 2e       	mov	r0, r31
    12da:	f0 ec       	ldi	r31, 0xC0	; 192
    12dc:	ef 2e       	mov	r14, r31
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	ff 2e       	mov	r15, r31
    12e2:	f0 2d       	mov	r31, r0
    12e4:	00 e0       	ldi	r16, 0x00	; 0
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	2f ef       	ldi	r18, 0xFF	; 255
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	43 e0       	ldi	r20, 0x03	; 3
    12ee:	62 e3       	ldi	r22, 0x32	; 50
    12f0:	70 e0       	ldi	r23, 0x00	; 0
    12f2:	82 e3       	ldi	r24, 0x32	; 50
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    12fa:	db bd       	out	0x2b, r29	; 43
    12fc:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    12fe:	d9 bd       	out	0x29, r29	; 41
    1300:	c8 bd       	out	0x28, r28	; 40
			}
			
			//A
			if (T_X >= 200 && T_X < 240 && T_Y >= 276 && T_Y < 320)
    1302:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1306:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    130a:	88 5c       	subi	r24, 0xC8	; 200
    130c:	91 09       	sbc	r25, r1
    130e:	88 97       	sbiw	r24, 0x28	; 40
    1310:	00 f5       	brcc	.+64     	; 0x1352 <main+0x6a4>
    1312:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <T_Y>
    1316:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <T_Y+0x1>
    131a:	24 31       	cpi	r18, 0x14	; 20
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	38 07       	cpc	r19, r24
    1320:	c0 f0       	brcs	.+48     	; 0x1352 <main+0x6a4>
    1322:	20 34       	cpi	r18, 0x40	; 64
    1324:	31 40       	sbci	r19, 0x01	; 1
    1326:	a8 f4       	brcc	.+42     	; 0x1352 <main+0x6a4>
			{
				print_str(50, 50, 3, WHITE, BLACK, "A \0");
    1328:	0f 2e       	mov	r0, r31
    132a:	f4 ec       	ldi	r31, 0xC4	; 196
    132c:	ef 2e       	mov	r14, r31
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	ff 2e       	mov	r15, r31
    1332:	f0 2d       	mov	r31, r0
    1334:	00 e0       	ldi	r16, 0x00	; 0
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	2f ef       	ldi	r18, 0xFF	; 255
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	43 e0       	ldi	r20, 0x03	; 3
    133e:	62 e3       	ldi	r22, 0x32	; 50
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	82 e3       	ldi	r24, 0x32	; 50
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    134a:	db bd       	out	0x2b, r29	; 43
    134c:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    134e:	d9 bd       	out	0x29, r29	; 41
    1350:	c8 bd       	out	0x28, r28	; 40
			}
			
			//B
			if (T_X >= 160 && T_X < 200 && T_Y >= 276 && T_Y < 320)
    1352:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1356:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    135a:	80 5a       	subi	r24, 0xA0	; 160
    135c:	91 09       	sbc	r25, r1
    135e:	88 97       	sbiw	r24, 0x28	; 40
    1360:	e8 f4       	brcc	.+58     	; 0x139c <main+0x6ee>
    1362:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1366:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    136a:	84 51       	subi	r24, 0x14	; 20
    136c:	91 40       	sbci	r25, 0x01	; 1
    136e:	8c 97       	sbiw	r24, 0x2c	; 44
    1370:	a8 f4       	brcc	.+42     	; 0x139c <main+0x6ee>
			{
				print_str(50, 50, 3, WHITE, BLACK, "B \0");
    1372:	0f 2e       	mov	r0, r31
    1374:	f8 ec       	ldi	r31, 0xC8	; 200
    1376:	ef 2e       	mov	r14, r31
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	ff 2e       	mov	r15, r31
    137c:	f0 2d       	mov	r31, r0
    137e:	00 e0       	ldi	r16, 0x00	; 0
    1380:	10 e0       	ldi	r17, 0x00	; 0
    1382:	2f ef       	ldi	r18, 0xFF	; 255
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	43 e0       	ldi	r20, 0x03	; 3
    1388:	62 e3       	ldi	r22, 0x32	; 50
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	82 e3       	ldi	r24, 0x32	; 50
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1394:	db bd       	out	0x2b, r29	; 43
    1396:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    1398:	d9 bd       	out	0x29, r29	; 41
    139a:	c8 bd       	out	0x28, r28	; 40
			}
			
			//C
			if (T_X >= 120 && T_X < 160 && T_Y >= 276 && T_Y < 320)
    139c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    13a0:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    13a4:	88 57       	subi	r24, 0x78	; 120
    13a6:	91 09       	sbc	r25, r1
    13a8:	88 97       	sbiw	r24, 0x28	; 40
    13aa:	e8 f4       	brcc	.+58     	; 0x13e6 <main+0x738>
    13ac:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    13b0:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    13b4:	84 51       	subi	r24, 0x14	; 20
    13b6:	91 40       	sbci	r25, 0x01	; 1
    13b8:	8c 97       	sbiw	r24, 0x2c	; 44
    13ba:	a8 f4       	brcc	.+42     	; 0x13e6 <main+0x738>
			{
				print_str(50, 50, 3, WHITE, BLACK, "C \0");
    13bc:	0f 2e       	mov	r0, r31
    13be:	fc ec       	ldi	r31, 0xCC	; 204
    13c0:	ef 2e       	mov	r14, r31
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ff 2e       	mov	r15, r31
    13c6:	f0 2d       	mov	r31, r0
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	10 e0       	ldi	r17, 0x00	; 0
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	43 e0       	ldi	r20, 0x03	; 3
    13d2:	62 e3       	ldi	r22, 0x32	; 50
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	82 e3       	ldi	r24, 0x32	; 50
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    13de:	db bd       	out	0x2b, r29	; 43
    13e0:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    13e2:	d9 bd       	out	0x29, r29	; 41
    13e4:	c8 bd       	out	0x28, r28	; 40
			}
			
			//D
			if (T_X >= 80 && T_X < 120 && T_Y >= 276 && T_Y < 320)
    13e6:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    13ea:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    13ee:	80 55       	subi	r24, 0x50	; 80
    13f0:	91 09       	sbc	r25, r1
    13f2:	88 97       	sbiw	r24, 0x28	; 40
    13f4:	f0 f4       	brcc	.+60     	; 0x1432 <main+0x784>
    13f6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    13fa:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    13fe:	84 51       	subi	r24, 0x14	; 20
    1400:	91 40       	sbci	r25, 0x01	; 1
    1402:	8c 97       	sbiw	r24, 0x2c	; 44
    1404:	08 f0       	brcs	.+2      	; 0x1408 <main+0x75a>
    1406:	b2 c0       	rjmp	.+356    	; 0x156c <main+0x8be>
			{
				print_str(50, 50, 3, WHITE, BLACK, "D \0");
    1408:	0f 2e       	mov	r0, r31
    140a:	f0 ed       	ldi	r31, 0xD0	; 208
    140c:	ef 2e       	mov	r14, r31
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	ff 2e       	mov	r15, r31
    1412:	f0 2d       	mov	r31, r0
    1414:	00 e0       	ldi	r16, 0x00	; 0
    1416:	10 e0       	ldi	r17, 0x00	; 0
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	3f ef       	ldi	r19, 0xFF	; 255
    141c:	43 e0       	ldi	r20, 0x03	; 3
    141e:	62 e3       	ldi	r22, 0x32	; 50
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	82 e3       	ldi	r24, 0x32	; 50
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    142a:	db bd       	out	0x2b, r29	; 43
    142c:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    142e:	d9 bd       	out	0x29, r29	; 41
    1430:	c8 bd       	out	0x28, r28	; 40
			}
			
			//E
			if (T_X >= 40 && T_X < 80 && T_Y >= 276 && T_Y < 320)
    1432:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1436:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    143a:	88 97       	sbiw	r24, 0x28	; 40
    143c:	88 97       	sbiw	r24, 0x28	; 40
    143e:	f0 f4       	brcc	.+60     	; 0x147c <main+0x7ce>
    1440:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1444:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1448:	84 51       	subi	r24, 0x14	; 20
    144a:	91 40       	sbci	r25, 0x01	; 1
    144c:	8c 97       	sbiw	r24, 0x2c	; 44
    144e:	08 f0       	brcs	.+2      	; 0x1452 <main+0x7a4>
    1450:	40 cc       	rjmp	.-1920   	; 0xcd2 <main+0x24>
			{
				print_str(50, 50, 3, WHITE, BLACK, "E \0");
    1452:	0f 2e       	mov	r0, r31
    1454:	f4 ed       	ldi	r31, 0xD4	; 212
    1456:	ef 2e       	mov	r14, r31
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	ff 2e       	mov	r15, r31
    145c:	f0 2d       	mov	r31, r0
    145e:	00 e0       	ldi	r16, 0x00	; 0
    1460:	10 e0       	ldi	r17, 0x00	; 0
    1462:	2f ef       	ldi	r18, 0xFF	; 255
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	43 e0       	ldi	r20, 0x03	; 3
    1468:	62 e3       	ldi	r22, 0x32	; 50
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	82 e3       	ldi	r24, 0x32	; 50
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    1474:	db bd       	out	0x2b, r29	; 43
    1476:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    1478:	d9 bd       	out	0x29, r29	; 41
    147a:	c8 bd       	out	0x28, r28	; 40
			}
			
			//F
			if (T_X < 40 && T_Y >= 276 && T_Y < 320)
    147c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1480:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    1484:	88 97       	sbiw	r24, 0x28	; 40
    1486:	08 f0       	brcs	.+2      	; 0x148a <main+0x7dc>
    1488:	24 cc       	rjmp	.-1976   	; 0xcd2 <main+0x24>
    148a:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    148e:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1492:	84 51       	subi	r24, 0x14	; 20
    1494:	91 40       	sbci	r25, 0x01	; 1
    1496:	8c 97       	sbiw	r24, 0x2c	; 44
    1498:	08 f0       	brcs	.+2      	; 0x149c <main+0x7ee>
    149a:	1b cc       	rjmp	.-1994   	; 0xcd2 <main+0x24>
			{
				print_str(50, 50, 3, WHITE, BLACK, "F \0");
    149c:	0f 2e       	mov	r0, r31
    149e:	f8 ed       	ldi	r31, 0xD8	; 216
    14a0:	ef 2e       	mov	r14, r31
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	ff 2e       	mov	r15, r31
    14a6:	f0 2d       	mov	r31, r0
    14a8:	00 e0       	ldi	r16, 0x00	; 0
    14aa:	10 e0       	ldi	r17, 0x00	; 0
    14ac:	2f ef       	ldi	r18, 0xFF	; 255
    14ae:	3f ef       	ldi	r19, 0xFF	; 255
    14b0:	43 e0       	ldi	r20, 0x03	; 3
    14b2:	62 e3       	ldi	r22, 0x32	; 50
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	82 e3       	ldi	r24, 0x32	; 50
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 40 04 	call	0x880	; 0x880 <print_str>
				OCR1A = 1500;
    14be:	db bd       	out	0x2b, r29	; 43
    14c0:	ca bd       	out	0x2a, r28	; 42
				OCR1B = 1500;
    14c2:	d9 bd       	out	0x29, r29	; 41
    14c4:	c8 bd       	out	0x28, r28	; 40
    14c6:	05 cc       	rjmp	.-2038   	; 0xcd2 <main+0x24>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//4
			if (T_X >= 180 && T_Y >= 144 && T_Y < 188)
    14c8:	24 3b       	cpi	r18, 0xB4	; 180
    14ca:	31 05       	cpc	r19, r1
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <main+0x822>
    14ce:	58 cd       	rjmp	.-1360   	; 0xf80 <main+0x2d2>
    14d0:	6f cd       	rjmp	.-1314   	; 0xfb0 <main+0x302>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//1
			if (T_X >= 180 && T_Y >= 188 && T_Y < 232)
    14d2:	24 3b       	cpi	r18, 0xB4	; 180
    14d4:	31 05       	cpc	r19, r1
    14d6:	08 f0       	brcs	.+2      	; 0x14da <main+0x82c>
    14d8:	ed cd       	rjmp	.-1062   	; 0x10b4 <main+0x406>
    14da:	04 ce       	rjmp	.-1016   	; 0x10e4 <main+0x436>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//0
			if (T_X >= 180 && T_Y >= 232 && T_Y < 276)
    14dc:	24 3b       	cpi	r18, 0xB4	; 180
    14de:	31 05       	cpc	r19, r1
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <main+0x836>
    14e2:	82 ce       	rjmp	.-764    	; 0x11e8 <main+0x53a>
    14e4:	99 ce       	rjmp	.-718    	; 0x1218 <main+0x56a>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//A
			if (T_X >= 200 && T_X < 240 && T_Y >= 276 && T_Y < 320)
    14e6:	88 5c       	subi	r24, 0xC8	; 200
    14e8:	91 09       	sbc	r25, r1
    14ea:	88 97       	sbiw	r24, 0x28	; 40
    14ec:	08 f4       	brcc	.+2      	; 0x14f0 <main+0x842>
    14ee:	19 cf       	rjmp	.-462    	; 0x1322 <main+0x674>
    14f0:	30 cf       	rjmp	.-416    	; 0x1352 <main+0x6a4>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//7
			if (T_X >= 180 && T_Y >= 100 && T_Y < 144)
    14f2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    14f6:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    14fa:	84 3b       	cpi	r24, 0xB4	; 180
    14fc:	91 05       	cpc	r25, r1
    14fe:	08 f0       	brcs	.+2      	; 0x1502 <main+0x854>
    1500:	a0 cc       	rjmp	.-1728   	; 0xe42 <main+0x194>
    1502:	c4 cc       	rjmp	.-1656   	; 0xe8c <main+0x1de>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			// /
			if (T_X < 60 && T_Y >= 100 && T_Y < 144)
    1504:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1508:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    150c:	dd cf       	rjmp	.-70     	; 0x14c8 <main+0x81a>
    150e:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
    1512:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
    1516:	2c 33       	cpi	r18, 0x3C	; 60
    1518:	31 05       	cpc	r19, r1
    151a:	a0 f3       	brcs	.-24     	; 0x1504 <main+0x856>
    151c:	23 cd       	rjmp	.-1466   	; 0xf64 <main+0x2b6>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//x
			if (T_X < 60 && T_Y >= 144 && T_Y < 188)
    151e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    1522:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1526:	d5 cf       	rjmp	.-86     	; 0x14d2 <main+0x824>
    1528:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
    152c:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
    1530:	2c 33       	cpi	r18, 0x3C	; 60
    1532:	31 05       	cpc	r19, r1
    1534:	a0 f3       	brcs	.-24     	; 0x151e <main+0x870>
    1536:	b0 cd       	rjmp	.-1184   	; 0x1098 <main+0x3ea>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//x
			if (T_X < 60 && T_Y >= 188 && T_Y < 232)
    1538:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <T_Y>
    153c:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <T_Y+0x1>
    1540:	cd cf       	rjmp	.-102    	; 0x14dc <main+0x82e>
    1542:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <__data_end>
    1546:	30 91 bd 02 	lds	r19, 0x02BD	; 0x8002bd <__data_end+0x1>
    154a:	2c 33       	cpi	r18, 0x3C	; 60
    154c:	31 05       	cpc	r19, r1
    154e:	a0 f3       	brcs	.-24     	; 0x1538 <main+0x88a>
    1550:	3d ce       	rjmp	.-902    	; 0x11cc <main+0x51e>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//-
			if (T_X < 60 && T_Y >= 232 && T_Y < 276)
    1552:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <T_Y>
    1556:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <T_Y+0x1>
    155a:	c5 cf       	rjmp	.-118    	; 0x14e6 <main+0x838>
    155c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1560:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    1564:	8c 33       	cpi	r24, 0x3C	; 60
    1566:	91 05       	cpc	r25, r1
    1568:	a0 f3       	brcs	.-24     	; 0x1552 <main+0x8a4>
    156a:	cb ce       	rjmp	.-618    	; 0x1302 <main+0x654>
				OCR1A = 1500;
				OCR1B = 1500;
			}
			
			//E
			if (T_X >= 40 && T_X < 80 && T_Y >= 276 && T_Y < 320)
    156c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    1570:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <__data_end+0x1>
    1574:	88 97       	sbiw	r24, 0x28	; 40
    1576:	88 97       	sbiw	r24, 0x28	; 40
    1578:	08 f4       	brcc	.+2      	; 0x157c <main+0x8ce>
    157a:	ab cb       	rjmp	.-2218   	; 0xcd2 <main+0x24>
    157c:	7f cf       	rjmp	.-258    	; 0x147c <main+0x7ce>

0000157e <__umulhisi3>:
    157e:	a2 9f       	mul	r26, r18
    1580:	b0 01       	movw	r22, r0
    1582:	b3 9f       	mul	r27, r19
    1584:	c0 01       	movw	r24, r0
    1586:	a3 9f       	mul	r26, r19
    1588:	70 0d       	add	r23, r0
    158a:	81 1d       	adc	r24, r1
    158c:	11 24       	eor	r1, r1
    158e:	91 1d       	adc	r25, r1
    1590:	b2 9f       	mul	r27, r18
    1592:	70 0d       	add	r23, r0
    1594:	81 1d       	adc	r24, r1
    1596:	11 24       	eor	r1, r1
    1598:	91 1d       	adc	r25, r1
    159a:	08 95       	ret

0000159c <_exit>:
    159c:	f8 94       	cli

0000159e <__stop_program>:
    159e:	ff cf       	rjmp	.-2      	; 0x159e <__stop_program>
